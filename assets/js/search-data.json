{
  
    
        "post0": {
            "title": "Title",
            "content": "title: MLB Trivia 2 | categories: [jupyter] | . Welcome to the second MLB quiz. How many can you get right? . Enter the letter which you think is the answer to the question | . q1 = &quot;&quot;&quot;Which team traded Fernando Tatis Jr. to the Padres? a. Boston Red Sox b. Chicago White Sox c. Cincinnati Reds d. Seattle Mariners&quot;&quot;&quot; q2 = &quot;&quot;&quot;Which team won the NL West title in 2021? a. Los Angeles Dodgers b. San Diego Padres c. San Francisco Giants d. Arizona Diamondbacks&quot;&quot;&quot; q3 = &quot;&quot;&quot;Who hit the walk-off home run against the Cardinals which sent the Dodgers in the NLDS? a. Chris Taylor b. Trea Turner c. Mookie Betts d. Justin Turner&quot;&quot;&quot; q4 = &quot;&quot;&quot;Name the two teams in the 2019 World Series. a. New York Yankees, Los Angeles Dodgers b. Houston Astros, San Francisco Giants c. Washington Nationals, Tampa Bay Rays d. Houston Astros, Washington Nationals&quot;&quot;&quot; q5 = &quot;&quot;&quot;When did Manny Machado and Fernando Tatis Jr. make their Padres debut? a. 2018 b. 2019 c. 2020 d. 2021&quot;&quot;&quot; q6 = &quot;&quot;&quot;Name the stadium of the Boston Red Sox. a. Fenway Park b. T-Mobile Park c. Minute-Maid park d. The Great American Ballpark&quot;&quot;&quot; q7 = &quot;&quot;&quot;Who won the 2018 AL Cy Young Award? a. Justin Verlander b. Patrick Corbin c. Clayton Kershaw d. Blake Snell&quot;&quot;&quot; q8 = &quot;&quot;&quot;In 2016, the Chicago Cubs won the World Series after how many years? a. 56 b. 108 c. 119 d. 65&quot;&quot;&quot; q9 = &quot;&quot;&quot;Which league division are the New York Yankees in? a. AL Central b. NL East c. NL West d. AL East&quot;&quot;&quot; q10 = &quot;&quot;&quot;Which team did Brandon Drury play for? a. San Diego Padres b. New York Mets c. Toronto Blue Jays d. Arizona Diamondbacks e. All of the above&quot;&quot;&quot; questions = {q1: &quot;b&quot;, q2: &quot;c&quot;, q3: &quot;a&quot;, q4: &quot;d&quot;, q5: &quot;b&quot;, q6: &quot;a&quot;, q7: &quot;d&quot;, q8: &quot;b&quot;, q9: &quot;d&quot;, q10: &quot;e&quot; } name = input(&quot;Enter your name: &quot;) print(name, &quot;how many can you get right?&quot;) score = 0 for i in questions: print(i) ans = input(&quot;Choose the answer which you think is right.&quot;) if ans == questions[i]: print(&quot;correct!&quot;) score = score+1 else: print(&quot;sorry, that was incorrect.&quot;) print(&quot;Your final score is &quot;,score) . Rohan how many can you get right? Which team traded Fernando Tatis Jr. to the Padres? a. Boston Red Sox b. Chicago White Sox c. Cincinnati Reds d. Seattle Mariners correct! Which team won the NL West title in 2021? a. Los Angeles Dodgers b. San Diego Padres c. San Francisco Giants d. Arizona Diamondbacks sorry, that was incorrect. Who hit the walk-off home run against the Cardinals which sent the Dodgers in the NLDS? a. Chris Taylor b. Trea Turner c. Mookie Betts d. Justin Turner correct! Name the two teams in the 2019 World Series. a. New York Yankees, Los Angeles Dodgers b. Houston Astros, San Francisco Giants c. Washington Nationals, Tampa Bay Rays d. Houston Astros, Washington Nationals sorry, that was incorrect. When did Manny Machado and Fernando Tatis Jr. make their Padres debut? a. 2018 b. 2019 c. 2020 d. 2021 sorry, that was incorrect. Name the stadium of the Boston Red Sox. a. Fenway Park b. T-Mobile Park c. Minute-Maid park d. The Great American Ballpark sorry, that was incorrect. Who won the 2018 AL Cy Young Award? a. Justin Verlander b. Patrick Corbin c. Clayton Kershaw d. Blake Snell sorry, that was incorrect. In 2016, the Chicago Cubs won the World Series after how many years? a. 56 b. 108 c. 119 d. 65 sorry, that was incorrect. Which league division are the New York Yankees in? a. AL Central b. NL East c. NL West d. AL East sorry, that was incorrect. Which team did Brandon Drury play for? a. San Diego Padres b. New York Mets c. Toronto Blue Jays d. Arizona Diamondbacks e. All of the above sorry, that was incorrect. Your final score is 2 .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/12/07/Quiz2.html",
            "relUrl": "/2022/12/07/Quiz2.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Homework",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Homework n”, “ n”, “- toc: true n”, “- badges: true n”, “- comments: true n”, “- categories: [Week 13]” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Homework/Hacks n”, “ n”, “ our homework we have decided for a decimal number to binary converter. You must use conditional statements within your code and have a input box for where the decimal number will go. This will give you a 2.7 out of 3 and you may add anything else to the code to get above a 2.7. n”, “ n” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Below is an example of decimal number to binary converter which you can use as a starting template.” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “def DecimalToBinary(num): n”, “ strs = &quot;&quot; n”, “ while num: n”, “ # if (num &amp; 1) = 1 n”, “ if (num &amp; 1): n”, “ strs += &quot;1&quot; n”, “ # if (num &amp; 1) = 0 n”, “ else: n”, “ strs += &quot;0&quot; n”, “ # right shift by 1 n”, “ num »= 1 n”, “ return strs n”, “ n”, “# function to reverse the string n”, “def reverse(strs): n”, “ print(strs[::-1]) n”, “ n”, “# Driver Code n”, “num = 67 n”, “print(&quot;Binary of num 67 is:&quot;, end=&quot; &quot;) n”, “reverse(DecimalToBinary(num))” ] } ], “metadata”: { “kernelspec”: { “display_name”: “Python 3.9.6 64-bit”, “language”: “python”, “name”: “python3” }, “language_info”: { “name”: “python”, “version”: “3.9.6” }, “orig_nbformat”: 4, “vscode”: { “interpreter”: { “hash”: “31f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6” } } }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/11/30/homework.ipynb",
            "relUrl": "/2022/11/30/homework.ipynb",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Title",
            "content": "binary homework | week 2 | preliminary score 0.9 / 1 | . the symbol for exponent is ** | the symbol for addition is + | the symbol for subtraction is - | the symbol for multiplication is * | the symbol for division is / | the symbol for modulus is % | an algorithm is a sequence of steps to perform a specific task | . Index is a number representing a position, like a character&#39;s position in a string or a string&#39;s position in a list. Concatenation is a series of interconnected strings Length is number of characters in a certain string A substring is a segment of a string . def convert(bin): # declare the convert function, named bin result = &quot;&quot; # variable which will be outputted later i = 7 # declaring i while i &gt;= 0: if bin % (2**i) == bin: # here we run some while and if loops in order to classify each number as even or odd, and we assign 0 and 1 accordingly. result = result + &quot;0&quot; i -= 1 else: result = result + &quot;1&quot; bin -= 2**i ## assignment operators i -= 1 print(result) # final print of the result, in binary convert(61) # conversion mechanism . 00111101 . names = [&quot;jaden&quot;,&quot;max&quot;,&quot;dylan&quot;,&quot;orlando&quot;] # list which has all the data def length(list): # declare the variable and function for output in names: print(output + &quot; string length: &quot; + str(len(output))) # prints the output of the length of each of the strings in each item in the list. length(names) . jaden string length: 5 max string length: 3 dylan string length: 5 orlando string length: 7 .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/11/30/GroupTwoHomework.html",
            "relUrl": "/2022/11/30/GroupTwoHomework.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Searching Introduction",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Searching Introduction n”, “&gt; Introduction to the binary search algorithm, it’s uses, advantages, and disadvantages n”, “- toc: true n”, “- badges: true n”, “- comments: true” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## What is searching? n”, “In certain computer programs and applications, one might find the need to locate and retrieve a data value and/or it’s index. Searching algorithms could be done in either intervals or sequences, and certain algorithms could be more efficient than others, with benefits and drawbacks to each. n”, “ n” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## The Naive Approach n”, “The most intuitively obvious solution to the searching problem is to sequentialy check each successful value in the data structure until either a matching value is found, or the entire structure has been transversed. This thought process could be explained graphically in this example n”, “ n” ] }, { “cell_type”: “code”, “execution_count”: 98, “metadata”: {}, “outputs”: [ { “data”: { “image/png”: “”, “text/plain”: [ “&quot; ] }, &quot;execution_count&quot;: 98, &quot;metadata&quot;: {}, &quot;output_type&quot;: &quot;execute_result&quot; } ], &quot;source&quot;: [ &quot;#hide_input n&quot;, &quot;from IPython import display n&quot;, &quot;display.Image( &quot;../images/SequentialSearch.png &quot;)&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;This algorithm could also be expressed in code, as shown below.&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 99, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;def sequentialSearch(arr, target): n&quot;, &quot; N = len(arr) # Declare N as length of array n&quot;, &quot; for i in range(N): # Iterate over the list n&quot;, &quot; if arr[i] == target: # Check for match n&quot;, &quot; return i # Match found, return index and end function call n&quot;, &quot; return -1 # Element not found&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;### Sequential Search - Larger Inputs n&quot;, &quot;Although for selection sort is seemingly fast for smaller inputs, it is clear that it cannot keep up with increasing input sizes. Because sequential search checks every value of the given array, the algorithm&#39;s overall runtime increases &quot;linearly &quot; with the input size. n&quot;, &quot; n&quot;, &quot;i.e. Pretend that one check takes one second, and that we are searching for the last element in an array. If the array length is 4, it would take 4 seconds to find the last element, whereas if the array length is 86400 indices long, it would take a whole day to find the element. n&quot;, &quot; n&quot;, &quot;Hence, although selection sort is known for its simplicity, it is unfeasible for large inputs&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;Below, we have created three **sorted** lists of length 100,1000000,100000000.&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 100, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;import time n&quot;, &quot;arr1 = [i for i in range(100)] n&quot;, &quot;arr2 = [i for i in range(1000000)] n&quot;, &quot;arr3 = [i for i in range(100000000)]&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;To analyze the sequential search algorithm, we will check for the worst case scenario, where runtime is maximized. This is because when measuring the efficiency of our algorithm, we want to be able to guarantee an upper limit or set amount of time for our program to finish running. To do this, we will attempt to search for the last element in the array&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 101, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;name&quot;: &quot;stdout&quot;, &quot;output_type&quot;: &quot;stream&quot;, &quot;text&quot;: [ &quot;length of list: 100 n&quot;, &quot;Index: 99 n&quot;, &quot;Execution time: 0.05602836608886719 ms n&quot; ] } ], &quot;source&quot;: [ &quot;## arr1 n&quot;, &quot;print( &quot;length of list: &quot;, len(arr1)) n&quot;, &quot;s = time.time() n&quot;, &quot;print( &quot;Index: &quot;, sequentialSearch(arr1,99)) n&quot;, &quot;e = time.time() n&quot;, &quot;print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 102, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;name&quot;: &quot;stdout&quot;, &quot;output_type&quot;: &quot;stream&quot;, &quot;text&quot;: [ &quot;length of list: 1000000 n&quot;, &quot;Index: 999999 n&quot;, &quot;Execution time: 58.67457389831543 ms n&quot; ] } ], &quot;source&quot;: [ &quot;## arr2 n&quot;, &quot;print( &quot;length of list: &quot;, len(arr2)) n&quot;, &quot;s = time.time() n&quot;, &quot;print( &quot;Index: &quot;, sequentialSearch(arr2,999999)) n&quot;, &quot;e = time.time() n&quot;, &quot;print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 103, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;name&quot;: &quot;stdout&quot;, &quot;output_type&quot;: &quot;stream&quot;, &quot;text&quot;: [ &quot;length of list: 100000000 n&quot;, &quot;Index: 99999999 n&quot;, &quot;Execution time: 5162.384986877441 ms n&quot; ] } ], &quot;source&quot;: [ &quot;## arr3 n&quot;, &quot;print( &quot;length of list: &quot;, len(arr3)) n&quot;, &quot;s = time.time() n&quot;, &quot;print( &quot;Index: &quot;, sequentialSearch(arr3,99999999)) n&quot;, &quot;e = time.time() n&quot;, &quot;print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;)&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;As you can see, as the input list grows larger and larger, the overall runtime of the program increases linearly as well, resulting in a lower scalability for the sequential search algorithm.&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;## Binary Search n&quot;, &quot;Binary search is an efficient way to iterate through a ***SORTED*** list to find a requested value. This is done through checking the middle value of a list and checking if the requested value is greater than or less than the middle value. You can start to see why the requested list must be sorted. If the list is not sorted, this logic is flawed, and the binary search algorithm will no longer work. n&quot;, &quot; n&quot;, &quot;Unlike the sequential search method, binary search doesn&#39;t check for each successive element until a match is found. In every iteration the algorithm is making a binary decision; if the selected element is larger or smaller than the target. n&quot;, &quot; n&quot;, &quot;How exactly does this work? Lets look at these amazing ms paint drawings:&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 104, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;data&quot;: { &quot;image/png&quot;: &quot;&quot;, &quot;text/plain&quot;: [ &quot;&quot; ] }, &quot;execution_count&quot;: 104, &quot;metadata&quot;: {}, &quot;output_type&quot;: &quot;execute_result&quot; } ], &quot;source&quot;: [ &quot;#hide_input n&quot;, &quot;display.Image( &quot;../images/BinarySearch1.png &quot;)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 105, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;data&quot;: { &quot;image/png&quot;: &quot;&quot;, &quot;text/plain&quot;: [ &quot;&quot; ] }, &quot;execution_count&quot;: 105, &quot;metadata&quot;: {}, &quot;output_type&quot;: &quot;execute_result&quot; } ], &quot;source&quot;: [ &quot;#hide_input n&quot;, &quot;display.Image( &quot;../images/BinarySearch2.png &quot;)&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;*i was too lazy to make a third so ur gonna have to live with 2 :)*&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;This algorithm is extremely efficient as the maximum number of cycles in binary search is equal to log base 2 of the closest, next power of two, to length of list. n&quot;, &quot;&gt; If the array is 8 items long, the maximum possible cycles would be **3** (log base 2 of 8 is 3) n&quot;, &quot;&gt; n&quot;, &quot;&gt; If the array is 7 items long, the maximum possible cycles would **STILL** be **3** as the closest power of 2 to 7 is 8. n&quot;, &quot;&gt; n&quot;, &quot;&gt; If the array is 9 items long, the maximum possible cycles **INCREASES** to **4**, as the closest, next power of two, is 16. n&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 106, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;def binarySearch(array, target): # Parameters: array is the given array and target is what we are looking for n&quot;, &quot; low = 0 # the starting lower bound n&quot;, &quot; high = len(array)-1 # the starting upper bound n&quot;, &quot; while high &gt;= low: # we will keep running until we run out of possible subarrays... n&quot;, &quot; mid = (high + low) // 2 # define the middle of the list to be the item at the index of the average of the lower and upper bound n&quot;, &quot; if array[mid] == target: # if item is in the middle of the list... we found what we are looking for! n&quot;, &quot; return mid # therefore, we return the index of where we found the item. n&quot;, &quot; elif array[mid] &gt; target: # if item is less than the middle of the list, this must mean that the item is on the lower half of the list n&quot;, &quot; high = mid-1 # therefore, we set the upper bound of the search to be the last item of the lower half n&quot;, &quot; else: # if item is neither less than or equal to the middle of the list, this must mean that the item is on the upper half of the list n&quot;, &quot; low = mid+1 # therefore, we set the lower bound of the search to be the first item of the upper half n&quot;, &quot; # if nothing is returned by the time the while loop ends, that means item MUST be missing from list n&quot;, &quot; return False # therefore we tell the user that the requested item was not found n&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;Likewise, we can also take a recursive approach to this problem, note the similarities&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;def BinarySearchRecursion(arr, target, lo, hi): n&quot;, &quot; if lo &gt; hi: n&quot;, &quot; return False n&quot;, &quot; mid = (lo+hi)//2 n&quot;, &quot; if arr[mid] == target: n&quot;, &quot; return mid n&quot;, &quot; elif arr[mid] &gt; target: n&quot;, &quot; return BinarySearchRecursion(arr, target, lo, mid-1) n&quot;, &quot; elif arr[mid] &lt; target: n&quot;, &quot; return BinarySearchRecursion(arr, target, mid+1, hi)&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;Now, let&#39;s compare the runtime with the same lists we tried with the sequential search algorithm.&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 107, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;name&quot;: &quot;stdout&quot;, &quot;output_type&quot;: &quot;stream&quot;, &quot;text&quot;: [ &quot;length of list: 100 n&quot;, &quot;Index: 99 n&quot;, &quot;Execution time: 0.05507469177246094 ms n&quot; ] } ], &quot;source&quot;: [ &quot;## arr1 n&quot;, &quot;print( &quot;length of list: &quot;, len(arr1)) n&quot;, &quot;s = time.time() n&quot;, &quot;print( &quot;Index: &quot;, binarySearch(arr1,99)) n&quot;, &quot;e = time.time() n&quot;, &quot;print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 108, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;name&quot;: &quot;stdout&quot;, &quot;output_type&quot;: &quot;stream&quot;, &quot;text&quot;: [ &quot;length of list: 1000000 n&quot;, &quot;Index: 999999 n&quot;, &quot;Execution time: 0.17070770263671875 ms n&quot; ] } ], &quot;source&quot;: [ &quot;## arr2 n&quot;, &quot;print( &quot;length of list: &quot;, len(arr2)) n&quot;, &quot;s = time.time() n&quot;, &quot;print( &quot;Index: &quot;, binarySearch(arr2,999999)) n&quot;, &quot;e = time.time() n&quot;, &quot;print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 109, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;name&quot;: &quot;stdout&quot;, &quot;output_type&quot;: &quot;stream&quot;, &quot;text&quot;: [ &quot;length of list: 100000000 n&quot;, &quot;Index: 99999999 n&quot;, &quot;Execution time: 0.06628036499023438 ms n&quot; ] } ], &quot;source&quot;: [ &quot;## arr3 n&quot;, &quot;print( &quot;length of list: &quot;, len(arr3)) n&quot;, &quot;s = time.time() n&quot;, &quot;print( &quot;Index: &quot;, binarySearch(arr3,99999999)) n&quot;, &quot;e = time.time() n&quot;, &quot;print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 110, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;name&quot;: &quot;stdout&quot;, &quot;output_type&quot;: &quot;stream&quot;, &quot;text&quot;: [ &quot;Index: False n&quot; ] } ], &quot;source&quot;: [ &quot;## Case: Element not found n&quot;, &quot;arr4 = [1,4,5,8,10,13,145,1938] n&quot;, &quot;print( &quot;Index: &quot;, binarySearch(arr4,17))&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;## Challenges and Homework n&quot;, &quot; n&quot;, &quot;You have one homework problem. n&quot;, &quot; n&quot;, &quot;Yes just one. n&quot;, &quot; n&quot;, &quot;Don&#39;t get excited though. n&quot;, &quot; n&quot;, &quot;**Problem:** Given a specific integer **N**, return the square root of **N** (**R**) if **N** is a perfect square, otherwise, return the square root of **N** rounded down to the nearest integer n&quot;, &quot; n&quot;, &quot;**Input:** **N** (Integer) n&quot;, &quot; n&quot;, &quot;**Output:** **R** (Integer) n&quot;, &quot; n&quot;, &quot;**Constraints:** Do not use any built-in math operations such as `sqrt(x)` or `x**(0.5)`, Try complete the problem in logarithmic time. n&quot;, &quot; n&quot;, &quot;**Hint 1:** Maybe you can use Binary Search to try and reduce the number of checks you have to perform? n&quot;, &quot; n&quot;, &quot;**Hint 2:** Is there a mathematical pattern amongst numbers and their square roots that could help you reduce the number of searches or iterations you must execute? Is there some value or rule you can set before applying binary search to narrow the range of possible values?&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;Run the very last code segment below to load test cases and submission function&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 3, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;def sqrt(N): n&quot;, &quot; # Write your code here n&quot;, &quot; return None&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 4, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;name&quot;: &quot;stdout&quot;, &quot;output_type&quot;: &quot;stream&quot;, &quot;text&quot;: [ &quot;Check number 1 failed n&quot;, &quot;Check number 2 failed n&quot;, &quot;Check number 3 failed n&quot;, &quot;Check number 4 failed n&quot;, &quot;Check number 5 failed n&quot;, &quot;Check number 6 failed n&quot;, &quot;Check number 7 failed n&quot;, &quot;Check number 8 failed n&quot;, &quot;Check number 9 failed n&quot;, &quot;Check number 10 failed n&quot;, &quot;Check number 11 failed n&quot;, &quot;Check number 12 failed n&quot;, &quot;Check number 13 failed n&quot; ] } ], &quot;source&quot;: [ &quot;from math import sqrt as sq n&quot;, &quot;test_cases = [0,1,4,85248289,22297284,18939904,91107025,69122596,9721924,37810201,1893294144,8722812816,644398225] n&quot;, &quot;answers = [int(sq(x)) for x in test_cases] n&quot;, &quot; n&quot;, &quot;def checkValid(): n&quot;, &quot; for i in range(len(test_cases)): n&quot;, &quot; if sqrt(test_cases[i]) == answers[i]: n&quot;, &quot; print( &quot;Check number {} passed &quot;.format(i+1)) n&quot;, &quot; else: n&quot;, &quot; print( &quot;Check number {} failed &quot;.format(i+1)) n&quot;, &quot; n&quot;, &quot;checkValid()&quot; ] } ], &quot;metadata&quot;: { &quot;kernelspec&quot;: { &quot;display_name&quot;: &quot;Python 3.10.6 64-bit&quot;, &quot;language&quot;: &quot;python&quot;, &quot;name&quot;: &quot;python3&quot; }, &quot;language_info&quot;: { &quot;codemirror_mode&quot;: { &quot;name&quot;: &quot;ipython&quot;, &quot;version&quot;: 3 }, &quot;file_extension&quot;: &quot;.py&quot;, &quot;mimetype&quot;: &quot;text/x-python&quot;, &quot;name&quot;: &quot;python&quot;, &quot;nbconvert_exporter&quot;: &quot;python&quot;, &quot;pygments_lexer&quot;: &quot;ipython3&quot;, &quot;version&quot;: &quot;3.10.6&quot; }, &quot;orig_nbformat&quot;: 4, &quot;vscode&quot;: { &quot;interpreter&quot;: { &quot;hash&quot;: &quot;916dbcbb3f70747c44a77c7bcd40155683ae19c65e1c03b4aa3499c5328201f1&quot; } } }, &quot;nbformat&quot;: 4, &quot;nbformat_minor&quot;: 2 } .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/11/29/searching-introduction.ipynb",
            "relUrl": "/2022/11/29/searching-introduction.ipynb",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Developing Algorithms (JavaScript)",
            "content": "Review . if-else statements . Syntax: . if (condition) { } else if (condition 2) { } else { } . for loops . for (let i = number; i &lt; number; i++) { // code } . Conditionals vs Booleans . Conditionals and booleans can be equivalent. . For example, let&#39;s say there are two booleans: rainy and sunny. . Let&#39;s look at the following code: . sunny = true; rainy = false; . if (sunny) { umbrella = false; } else if (rainy) { umbrella = true; } else { umbrella = false; } console.log(umbrella); . false . The code above is the same as below: . umbrella = !sunny &amp;&amp; rainy; console.log(umbrella); . false . To determine if two conditionals and booleans are the same, you can substitute the four possibilities that the two booleans (sunny and rainy) can be (listed below) into the conditional and boolean and see if both cases match: . sunny = true, rainy = true . sunny = true, rainy = false . sunny = false, rainy = true . sunny = false, rainy = false . Challenge . Using JavaScript, create an algorithm that takes in an IP address and a subnet mask and computes the network address. . Overview . As we&#39;ve seen in Unit 4.1, an IP address is a 32 bit number that uniquely identifies each device. (See this for a recap). Something extra is that an IP address also comes with a subnet mask. A subnet mask is also a 32 bit number that identifies what network an IP address in in through a process that uses the bitwise AND. . In ANDing: . 0 + 0 = 0 . 0 + 1 = 0 . 1 + 0 = 0 . 1 + 1 = 1 . The following are the steps to determine the network that an IP address is in given the subnet mask: . Example: IP address: 192.168.0.1 . Subnet mask: 255.255.255.0 . Convert the IP address into binary: 192.168.0.1 -&gt; 11000000.10101000.00000000.00000001 | Convert the subnet mask into binary: 255.255.255.0 -&gt; 11111111.11111111.11111111.00000000 | Do a bitwise AND operation on the binary IP address and subnet mask: | 11000000.10101000.00000000.00000001 +11111111.11111111.11111111.00000000 =11000000.10101000.00000000.00000000 . Convert the result back to decimal: 11000000.10101000.00000000.00000000 -&gt; 192.168.0.0 | The network address is 192.168.0.0 .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/11/29/developing-algorithms-js.html",
            "relUrl": "/2022/11/29/developing-algorithms-js.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Group 2 blog",
            "content": "Group 2 Blog . College Board idea number 3 and 4 | .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/11/29/GroupTwoBlog.html",
            "relUrl": "/2022/11/29/GroupTwoBlog.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Developing Algorithms",
            "content": "Algorithms can be written in different ways and still accomplish the same tasks. Algorithms that look similar often yield differnet outputs. To solve the same problem, many different algorithms can be used. . Therefore, algorithms are very important for programmers, and today we&#39;re going to explore how to determine the outcome of algorithms, how to deteremine the output of similar algorithms, how to edit existing algorithms, and how to develop our own algorithms. . Determine the outcome of algorithms . Consider the following algorithm. . def mystery(num, num2): if (num % num2 == 0): print(&quot;True&quot;) else: print(&quot;False&quot;) mystery(20, 4) . True . What does the algorithm do? Please explain in words. | What if I put in 30 as num and 4 as num2. What would be the output? | Determine the outcome of similar algorithms . What is the output of this algorithm? . temp = 95 if (temp &gt;= 90): print(&quot;it is too hot outside&quot;) else: if (temp &gt;= 65): print(&quot;I will go outside&quot;) else: print(&quot;it is too cold outside&quot;) . What is the output of this algorithm? it looks similar but the output is different! . temp = 95 if (temp &gt;= 90): print(&quot;it is too hot outside&quot;) if (temp &gt;= 65): print(&quot;i will go outside&quot;) if (temp &lt; 65): print(&quot;it is too cold outside&quot;) . Editing Algorithms . Task: Please edit the algorithm above to have it yield the same results as the previous algorithm! (no matter what temp you put in) . Developing Algorithms . To develop algorithms, we first need to understand what the question is asking. Then, think about how you would approach it as a human and then try to find what pattern you went through to arrive at the answer. Apply this to code, and there you have it! An algorithm! . Let&#39;s say you wanted to sum up the first five integers. How would you do this in real life? Your thought process would probably be: . The sum of the first integer is 1. | Then, increase that integer by 1. I now add 2 to my existing sum (1). My new sum is 3. | Repeat until I add 5 to my sum. The resulting sum is 15. | . Now let&#39;s translate this into code. . sum = 0 # start with a sum of 0 for i in range (1, 6): # you will repeat the process five times for integers 1-5 sum = sum + i # add the number to your sum print(sum) # print the result . 15 . Task: Write an algorithm in python that sums up the first 5 odd integers. You can use the following code as a starter. . sum = ? counter = ? for i in range (0, ?): sum = sum + ? counter = counter + ? . Homework . Create an algorithm that will start with any positive integer n and display the full sequence of numbers that result from the Collatz Conjecture. The COllatz Conjecture is as follows: . start with any positive integer | if the number is even, divide by 2 | if the number is odd, multiply by 3 and add 1 | repeat steps 2 and 3 until you reach 1 | Example: if the starting number was 6, the output would be 6, 3, 10, 5, 16, 8, 4, 2, 1 .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/11/29/Developing-Algorithms.html",
            "relUrl": "/2022/11/29/Developing-Algorithms.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Lists and Iteration Homework",
            "content": "Overview and Notes: 3.10 - Lists . Make sure you complete the challenge in the challenges section while we present the lesson! | . Add your OWN Notes for 3.10 here: . Fill out the empty boxes: . Pseudocode Operation Python Syntax Description . aList[i] | aList[i] | Accesses the element of aList at index i | . x ← aList[i] | x = aList[i] | Assigns the element of aList at index i to a variable &#39;x&#39; | . aList[i] &lt;- x | aList(i) = x | Assigns the value of a variable &#39;x&#39; to the element of a List at index i | . aList[i] ← aList[j] | aList [i] = aList[j] | Assigns value of aList[j] to aList[i] | . INSERT(aList, value) | aList.insert(i, value) | value is placed at index i in aList. Any element at an index greater than i will shiftone position to the right. | . APPEND(aList, value) | aList.append(value) | adds a new item | . REMOVE(aList, value) | aList.pop(i)ORaList.remove(value) | Removes item at index i and any values at indices greater than i shift to the left. Length of aList decreased by 1. | . Overview and Notes: 3.8 - Iteration . Add your OWN Notes for 3.8 here: . Homework Assignment . Instead of us making a quiz for you to take, we would like YOU to make a quiz about the material we reviewed. . We would like you to input questions into a list, and use some sort of iterative system to print the questions, detect an input, and determine if you answered correctly. There should be at least five questions, each with at least three possible answers. . You may use the template below as a framework for this assignment. . questions = [ &quot;What wpuld you call something like aList?&quot; &quot;What syntax do you need to include values into a list?&quot; &quot;What does aList.pop do?&quot; &quot;Which of these definitions best defines indexing?&quot; ] def questionloop(): pass #make an iterative function to ask the questions #this can be any loop you want as long as it works! def answercheck(): pass #make a function to check if the answer was correct or not . Hacks . Here are some ideas of things you can do to make your program even cooler. Doing these will raise your grade if done correctly. . Add more than five questions with more than three answer choices | Randomize the order in which questions/answers are output | At the end, display the user&#39;s score and determine whether or not they passed | . Challenges . Important! You don&#39;t have to complete these challenges completely perfectly, but you will be marked down if you don&#39;t show evidence of at least having tried these challenges in the time we gave during the lesson. . 3.10 Challenge . Follow the instructions in the code comments. . grocery_list = [&#39;apples&#39;, &#39;milk&#39;, &#39;oranges&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;] print(grocery_list[3]) # Now, assign the fourth item in the list to a variable, x and then print the variable i = 3 x = grocery_list[i] print(x) # Add these two items at the end of the list : umbrellas and artichokes grocery_list.append(&quot;umbrellas&quot;) grocery_list.append(&quot;artichokes&quot;) # Insert the item eggs as the third item of the list grocery_list.insert(2, &#39;eggs&#39;) # Remove milk from the list grocery_list.remove(&#39;milk&#39;) # grocery_list.pop(1) # Assign the element at the end of the list to index 2. Print index 2 to check grocery_list[2] = grocery_list[6] print(grocery_list[2]) # Print the entire list, does it match ours ? print(grocery_list) # Expected output # carrots # carrots # artichokes # [&#39;apples&#39;, &#39;eggs&#39;, &#39;artichokes&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;, &#39;umbrellas&#39;, &#39;artichokes&#39;] . carrots carrots artichokes [&#39;apples&#39;, &#39;eggs&#39;, &#39;artichokes&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;, &#39;umbrellas&#39;, &#39;artichokes&#39;] . 3.8 Challenge . Create a loop that converts 8-bit binary values from the provided list into decimal numbers. Then, after the value is determined, remove all the values greater than 100 from the list using a list-related function you&#39;ve been taught before. Print the new list when done. . Once you&#39;ve done this with one of the types of loops discussed in this lesson, create a function that does the same thing with a different type of loop. . binarylist = [ &quot;01001001&quot;, &quot;10101010&quot;, &quot;10010110&quot;, &quot;00110111&quot;, &quot;11101100&quot;, &quot;11010001&quot;, &quot;10000001&quot; ] def binary_convert(binary): pass binarylist = binarytotext? #afterward, get rid of the values that are greater than 100 in decimal #when done, print the results . Struggles . I could not figure out the right command to convert the thing | .",
            "url": "https://rohanagr.github.io/RohanRepository/homework/",
            "relUrl": "/homework/",
            "date": " • Nov 26, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Big idea 3!",
            "content": "3.3 Expressions(Show video 1 and 3) . Vocab: fill in the blanks . the symbol for exponent is * the symbol for addition is + the symbol for subtraction is - the symbol for multiplication is the symbol for division is / the symbol for modulus is % an algorithm is a sequence of steps to perform a specific task . Sequencing Practice: the code below does not follow the intended steps below. change the code so that it does so. . divide value1 by 10(value1 = 5) | multiply 2 from the result of the step 1 | subtract 4 from the result of the step 2 | print the result of step 3 | value1 = 5 value2 = value1 / 10 #step 1 value3 = value2 * 2 #step 2 value4 = value3 - 4 #step 3 print(value4) . -3.0 . Selection/Iteration Practice: Create a function to print ONLY the numbers of numlist that are divisble by 3. Hint: use the MOD operator (a % b) to find the remainder when a is divided by b. . numlist = [&quot;3&quot;,&quot;4&quot;,&quot;9&quot;,&quot;76&quot;,&quot;891&quot;] for i in numlist : if int (i) % 3 == 0: print(i + &quot; is divisible by 3&quot;) continue str(i) . 3 is divisible by 3 9 is divisible by 3 891 is divisible by 3 . Homework/Binary Adaptation: Create a python function that will convert a decimal number 1-255 to binary using mathematical operations and powers of 2. Challenge: add frontend with javascript or html. . def convert(): . 3.4 Strings(Show video 1) . Vocab: fill in the blanks using the video . Index is a number representing a position, like a character&#39;s position in a string or a string&#39;s position in a list. Concatenation is __ Length is A substring is ___ . What is psuedocode? . Pseudocode is writing out a program in plain language with keywords that are used to refer to common coding concepts. . Can you think of some benefits of using pseudocode prior to writing out the actual code? . Choose an everyday activity | Imagine that you are providing instructions for this activity to a person who has never done it before | Challenge someone to do the steps you wrote out | Ex. Brushing Teeth . Pick up your toothbrush | Rinse toothbrush | Pick up toothpaste | Place toothpaste on the toothbrush | Rinse toothbrush again | Brush teeth in a circular motion | Spit | Wash mouth | Rinse toothbrush | You have brushed your teeth! | Substring/Length Practice: change the print functions to print &quot;hello&quot;, &quot;bye&quot;, and the string length . #the substring will have the characters including the index &quot;start&quot; to the character BEFORE the index &quot;end&quot; #len(string) will print the length of string string = &quot;hellobye&quot; print() print() print() . Concatenation Practice: combine string1 and string2 to make string3, then print string3. . string1 = &quot;computer&quot; string2 = &quot;science&quot; string3 = print(string3) . Homework/List Adaptation: create a function that prints the name of each string in the list and the string&#39;s length. Challenge: add frontend with javascript or html. . names = [&quot;jaden&quot;,&quot;max&quot;,&quot;dylan&quot;,&quot;orlando&quot;] def length(list): for in : print() length(names) . Stuck? . Check out what we did. | . Have any questions? . Ask us if you have any questions! | .",
            "url": "https://rohanagr.github.io/RohanRepository/week-13/big-idea-3/2022/11/18/expressions-and-strings.html",
            "relUrl": "/week-13/big-idea-3/2022/11/18/expressions-and-strings.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Binary",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus RGB color . +1 | 00000000 | 0 | 0 | 0 | -1 | 0 | | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | | | | | | | | | | | | | | | | | .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/11/17/PBL-binary.html",
            "relUrl": "/2022/11/17/PBL-binary.html",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Night At The Museum Evaluation",
            "content": "First Piece: Banana Dolphin . . What I Like About This Piece . It is very creative. I like how they thought about the similarities in shape of a dolphin and a banana, and made it into a piece which resembles both. | Really liked the tail of the dolphin as it looks like the inside of a banana peel. Very creative indeed. | . Some Minor Things . It looks a little too perfect for a banana. Most bananas develop black spots as they ripen. Maybe if they wanted for a more realistic interpretation of a banana, they could add a few black spots here and there, and it would not take away from the beauty of the dolphin. . | Overall Rating: 9/10 . | . Second Piece: Setting The Earth On Fire . . What I Like About This Piece . Everything is drawn realistically. The hand is nicely drawn, the lighter is setting the Earth ablaze, and I really like how the artist showed the area in and around Antarctica is on fire as a result of the lighter. There could be many themes which could be derived from this pice. | . Some Minor Things . It was a little hard to tell whether the white on the Earth was ice or clouds. They were painted with the same color. If there was a little contrast between the two, it would probably make the Earth actually look like the Earth with distinct clouds and ice patches. . | Overall Rating: 9.5/10 . | .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/11/07/natm.html",
            "relUrl": "/2022/11/07/natm.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Finals",
            "content": "Final Score: 41/50 . missed some questions which may have required some thinking | In my opinion a decent score | Surpassed the 25/50 threshold | . Question 5 . . Key takeaway: Although info about which restaurants Brandon and Cynthia have visited the past might be useful, they are not needed. | The most important piece of information out of the three is the information about food allergies and dietary restrictions. | . Question 14 . . Key takeaway: 8 is correct, but it would also display a check for 7. Since it displays 9 correctly, the only other option is 6. | The correct answer should have been B and D, not B and C. | . Question 17 . . Key takeaway: Internet protocols standardize transmission, as it is a universal process. | . Question 19 . . Key takeaway: A binary representation of 29 is more than 4 bits, therefore an overflow error will occur as the max in this program is 4. | . Question 20 . . 4 bits can store 16 pieces of information, therefore it should easily store 8 pieces without overflowing. | . Question 35 . . The default parameter should be on top. Therefore option A is correct and not option B. | . Question 36 . . i is initialized at 1. With the answer I chose, the initialization starts at 0. | . Question 39 . . It has to be a positive integer. We cannot use anything else. | . Question 50 . . The assignment of characters is incorrect in the answer choice that I chose. You would only need one more character for LastName. | .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/11/06/TakeHomeTest.html",
            "relUrl": "/2022/11/06/TakeHomeTest.html",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Internet",
            "content": "Video 1 . Computing device –&gt; physical artifact that can hold and run a program. | Examples include tablets, phones, computers, and sensors | Network –&gt; Group of interconnected computer devices which can send and receive data. | Bandwidth measured in bits per second. | Computing system: group of computing devices and programs working together for a joint purpose. | Packet Switching: the file is broken into packets and sent in some random order. | . Video 2 . “Narrow waist” model | Head to toe: Application, transport, internet, network access | . Quiz . 2/3 | .",
            "url": "https://rohanagr.github.io/RohanRepository/posts/2022/10/14/Internet.html",
            "relUrl": "/posts/2022/10/14/Internet.html",
            "date": " • Oct 14, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Git Sociology",
            "content": "Any sociology questions within team need to be answered with a Blog, A Scrum Master working with other Developers should establish the Github administration/sociology policies: . What is the main repository for your project? . Group Repository | . Did you create a .gitignore to avoid committing files that ‘don’t belong in version control? . gitignore | . Do you have a requirements.txt file to manage dependencies introduced to your Code Base? . Requirements for project | . Have you established Issues as part of your Development process? . Group Issue (to do’s) | . Have you considered making Pull Requests to track development? Have you considered forks or branching techniques with pull requests? . Pull Request | We are able to pull and push in the repository in order to stay in touch with the team and make sure that the group repository is updated for everyone. | . Are you managing Issues on a Project Board/Scrum Board like Kanban? . Group Scrum Board | .",
            "url": "https://rohanagr.github.io/RohanRepository/posts/2022/10/11/gitsociology.html",
            "relUrl": "/posts/2022/10/11/gitsociology.html",
            "date": " • Oct 11, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "College Board",
            "content": "Video 1 . Types of Errors: | Logic Error: Mistake in a program which causes it to give the output incorrectly or unexpectedly. | Syntax Error: Mistake in the program which leads to program failure or incorrect output. Usually occurs when coding rules are not followed. | Runtime Error: Mistake in the program when it is executed | Overflow Error: Error that happens when a computer handles a number greater than a set threshold or limit. | . Video 2 . We can correct errors by doing the following: | Test cases, hand tracing | visualizations | debuggers and extra output statements | . Video 3 . testing uses defined inputs to ensure that the program is working as desired. | testing of results are used to revise the program | It should demonstrate the different expected outcomes that are at or beyond the min / max of input data | Requirements essential to defining testing inputs. | . Quiz . 3/3 | .",
            "url": "https://rohanagr.github.io/RohanRepository/posts/2022/10/11/collegeboard.html",
            "relUrl": "/posts/2022/10/11/collegeboard.html",
            "date": " • Oct 11, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;b558955759msh32134753facfdd1p133021jsncf26cd31822e&quot;, &quot;X-RapidAPI-Host&quot;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(response.json()) # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . {&#39;countries_stat&#39;: [{&#39;country_name&#39;: &#39;USA&#39;, &#39;cases&#39;: &#39;82,649,779&#39;, &#39;deaths&#39;: &#39;1,018,316&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;80,434,925&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1,465&#39;, &#39;active_cases&#39;: &#39;1,196,538&#39;, &#39;total_cases_per_1m_population&#39;: &#39;247,080&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,044&#39;, &#39;total_tests&#39;: &#39;1,000,275,726&#39;, &#39;tests_per_1m_population&#39;: &#39;2,990,303&#39;}, {&#39;country_name&#39;: &#39;India&#39;, &#39;cases&#39;: &#39;43,057,545&#39;, &#39;deaths&#39;: &#39;522,193&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;42,519,479&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;698&#39;, &#39;active_cases&#39;: &#39;15,873&#39;, &#39;total_cases_per_1m_population&#39;: &#39;30,657&#39;, &#39;deaths_per_1m_population&#39;: &#39;372&#39;, &#39;total_tests&#39;: &#39;834,717,702&#39;, &#39;tests_per_1m_population&#39;: &#39;594,319&#39;}, {&#39;country_name&#39;: &#39;Brazil&#39;, &#39;cases&#39;: &#39;30,345,654&#39;, &#39;deaths&#39;: &#39;662,663&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;29,364,400&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;8,318&#39;, &#39;active_cases&#39;: &#39;318,591&#39;, &#39;total_cases_per_1m_population&#39;: &#39;140,954&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,078&#39;, &#39;total_tests&#39;: &#39;63,776,166&#39;, &#39;tests_per_1m_population&#39;: &#39;296,238&#39;}, {&#39;country_name&#39;: &#39;France&#39;, &#39;cases&#39;: &#39;28,244,977&#39;, &#39;deaths&#39;: &#39;145,020&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;25,852,832&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1,677&#39;, &#39;active_cases&#39;: &#39;2,247,125&#39;, &#39;total_cases_per_1m_population&#39;: &#39;430,996&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,213&#39;, &#39;total_tests&#39;: &#39;266,484,045&#39;, &#39;tests_per_1m_population&#39;: &#39;4,066,333&#39;}, {&#39;country_name&#39;: &#39;Germany&#39;, &#39;cases&#39;: &#39;24,109,433&#39;, &#39;deaths&#39;: &#39;134,624&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;21,243,000&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1,980&#39;, &#39;active_cases&#39;: &#39;2,731,809&#39;, &#39;total_cases_per_1m_population&#39;: &#39;286,106&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,598&#39;, &#39;total_tests&#39;: &#39;122,332,384&#39;, &#39;tests_per_1m_population&#39;: &#39;1,451,714&#39;}, {&#39;country_name&#39;: &#39;UK&#39;, &#39;cases&#39;: &#39;21,933,206&#39;, &#39;deaths&#39;: &#39;173,352&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;20,782,350&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;339&#39;, &#39;active_cases&#39;: &#39;977,504&#39;, &#39;total_cases_per_1m_population&#39;: &#39;320,054&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,530&#39;, &#39;total_tests&#39;: &#39;514,985,782&#39;, &#39;tests_per_1m_population&#39;: &#39;7,514,777&#39;}, {&#39;country_name&#39;: &#39;Russia&#39;, &#39;cases&#39;: &#39;18,137,137&#39;, &#39;deaths&#39;: &#39;374,902&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;17,474,628&#39;, &#39;new_deaths&#39;: &#39;168&#39;, &#39;new_cases&#39;: &#39;8,446&#39;, &#39;serious_critical&#39;: &#39;2,300&#39;, &#39;active_cases&#39;: &#39;287,607&#39;, &#39;total_cases_per_1m_population&#39;: &#39;124,187&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,567&#39;, &#39;total_tests&#39;: &#39;273,400,000&#39;, &#39;tests_per_1m_population&#39;: &#39;1,871,995&#39;}, {&#39;country_name&#39;: &#39;S. Korea&#39;, &#39;cases&#39;: &#39;16,895,194&#39;, &#39;deaths&#39;: &#39;22,133&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;109&#39;, &#39;new_cases&#39;: &#39;64,725&#39;, &#39;serious_critical&#39;: &#39;726&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;329,028&#39;, &#39;deaths_per_1m_population&#39;: &#39;431&#39;, &#39;total_tests&#39;: &#39;15,804,065&#39;, &#39;tests_per_1m_population&#39;: &#39;307,778&#39;}, {&#39;country_name&#39;: &#39;Italy&#39;, &#39;cases&#39;: &#39;16,079,209&#39;, &#39;deaths&#39;: &#39;162,609&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;14,684,371&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;409&#39;, &#39;active_cases&#39;: &#39;1,232,229&#39;, &#39;total_cases_per_1m_population&#39;: &#39;266,648&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,697&#39;, &#39;total_tests&#39;: &#39;211,365,630&#39;, &#39;tests_per_1m_population&#39;: &#39;3,505,156&#39;}, {&#39;country_name&#39;: &#39;Turkey&#39;, &#39;cases&#39;: &#39;15,016,270&#39;, &#39;deaths&#39;: &#39;98,676&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;14,854,475&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;975&#39;, &#39;active_cases&#39;: &#39;63,119&#39;, &#39;total_cases_per_1m_population&#39;: &#39;174,654&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,148&#39;, &#39;total_tests&#39;: &#39;158,110,923&#39;, &#39;tests_per_1m_population&#39;: &#39;1,838,986&#39;}, {&#39;country_name&#39;: &#39;Spain&#39;, &#39;cases&#39;: &#39;11,786,036&#39;, &#39;deaths&#39;: &#39;103,908&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;11,261,340&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;339&#39;, &#39;active_cases&#39;: &#39;420,788&#39;, &#39;total_cases_per_1m_population&#39;: &#39;251,906&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,221&#39;, &#39;total_tests&#39;: &#39;471,036,328&#39;, &#39;tests_per_1m_population&#39;: &#39;10,067,575&#39;}, {&#39;country_name&#39;: &#39;Vietnam&#39;, &#39;cases&#39;: &#39;10,563,502&#39;, &#39;deaths&#39;: &#39;43,013&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;9,086,075&#39;, &#39;new_deaths&#39;: &#39;9&#39;, &#39;new_cases&#39;: &#39;8,813&#39;, &#39;serious_critical&#39;: &#39;612&#39;, &#39;active_cases&#39;: &#39;1,434,414&#39;, &#39;total_cases_per_1m_population&#39;: &#39;106,789&#39;, &#39;deaths_per_1m_population&#39;: &#39;435&#39;, &#39;total_tests&#39;: &#39;85,789,114&#39;, &#39;tests_per_1m_population&#39;: &#39;867,262&#39;}, {&#39;country_name&#39;: &#39;Argentina&#39;, &#39;cases&#39;: &#39;9,060,923&#39;, &#39;deaths&#39;: &#39;128,344&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;8,895,999&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;412&#39;, &#39;active_cases&#39;: &#39;36,580&#39;, &#39;total_cases_per_1m_population&#39;: &#39;197,215&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,793&#39;, &#39;total_tests&#39;: &#39;35,716,069&#39;, &#39;tests_per_1m_population&#39;: &#39;777,376&#39;}, {&#39;country_name&#39;: &#39;Netherlands&#39;, &#39;cases&#39;: &#39;8,035,603&#39;, &#39;deaths&#39;: &#39;22,206&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7,643,520&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;94&#39;, &#39;active_cases&#39;: &#39;369,877&#39;, &#39;total_cases_per_1m_population&#39;: &#39;467,096&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,291&#39;, &#39;total_tests&#39;: &#39;21,107,399&#39;, &#39;tests_per_1m_population&#39;: &#39;1,226,938&#39;}, {&#39;country_name&#39;: &#39;Japan&#39;, &#39;cases&#39;: &#39;7,621,562&#39;, &#39;deaths&#39;: &#39;29,284&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7,135,403&#39;, &#39;new_deaths&#39;: &#39;27&#39;, &#39;new_cases&#39;: &#39;43,721&#39;, &#39;serious_critical&#39;: &#39;195&#39;, &#39;active_cases&#39;: &#39;456,875&#39;, &#39;total_cases_per_1m_population&#39;: &#39;60,596&#39;, &#39;deaths_per_1m_population&#39;: &#39;233&#39;, &#39;total_tests&#39;: &#39;46,690,473&#39;, &#39;tests_per_1m_population&#39;: &#39;371,215&#39;}, {&#39;country_name&#39;: &#39;Iran&#39;, &#39;cases&#39;: &#39;7,216,040&#39;, &#39;deaths&#39;: &#39;140,975&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;6,966,954&#39;, &#39;new_deaths&#39;: &#39;13&#39;, &#39;new_cases&#39;: &#39;528&#39;, &#39;serious_critical&#39;: &#39;1,046&#39;, &#39;active_cases&#39;: &#39;108,111&#39;, &#39;total_cases_per_1m_population&#39;: &#39;83,972&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,641&#39;, &#39;total_tests&#39;: &#39;50,811,054&#39;, &#39;tests_per_1m_population&#39;: &#39;591,284&#39;}, {&#39;country_name&#39;: &#39;Colombia&#39;, &#39;cases&#39;: &#39;6,091,094&#39;, &#39;deaths&#39;: &#39;139,771&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,924,433&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;342&#39;, &#39;active_cases&#39;: &#39;26,890&#39;, &#39;total_cases_per_1m_population&#39;: &#39;117,448&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,695&#39;, &#39;total_tests&#39;: &#39;34,355,022&#39;, &#39;tests_per_1m_population&#39;: &#39;662,433&#39;}, {&#39;country_name&#39;: &#39;Indonesia&#39;, &#39;cases&#39;: &#39;6,043,768&#39;, &#39;deaths&#39;: &#39;156,067&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,868,251&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;2,771&#39;, &#39;active_cases&#39;: &#39;19,450&#39;, &#39;total_cases_per_1m_population&#39;: &#39;21,682&#39;, &#39;deaths_per_1m_population&#39;: &#39;560&#39;, &#39;total_tests&#39;: &#39;94,877,499&#39;, &#39;tests_per_1m_population&#39;: &#39;340,374&#39;}, {&#39;country_name&#39;: &#39;Poland&#39;, &#39;cases&#39;: &#39;5,991,197&#39;, &#39;deaths&#39;: &#39;115,948&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,334,375&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;344&#39;, &#39;serious_critical&#39;: &#39;1,588&#39;, &#39;active_cases&#39;: &#39;540,874&#39;, &#39;total_cases_per_1m_population&#39;: &#39;158,616&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,070&#39;, &#39;total_tests&#39;: &#39;36,027,053&#39;, &#39;tests_per_1m_population&#39;: &#39;953,808&#39;}, {&#39;country_name&#39;: &#39;Mexico&#39;, &#39;cases&#39;: &#39;5,733,514&#39;, &#39;deaths&#39;: &#39;324,117&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,033,892&#39;, &#39;new_deaths&#39;: &#39;57&#39;, &#39;new_cases&#39;: &#39;802&#39;, &#39;serious_critical&#39;: &#39;4,798&#39;, &#39;active_cases&#39;: &#39;375,505&#39;, &#39;total_cases_per_1m_population&#39;: &#39;43,641&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,467&#39;, &#39;total_tests&#39;: &#39;15,762,889&#39;, &#39;tests_per_1m_population&#39;: &#39;119,981&#39;}, {&#39;country_name&#39;: &#39;Australia&#39;, &#39;cases&#39;: &#39;5,689,377&#39;, &#39;deaths&#39;: &#39;6,991&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,274,197&#39;, &#39;new_deaths&#39;: &#39;21&#39;, &#39;new_cases&#39;: &#39;34,769&#39;, &#39;serious_critical&#39;: &#39;135&#39;, &#39;active_cases&#39;: &#39;408,189&#39;, &#39;total_cases_per_1m_population&#39;: &#39;218,537&#39;, &#39;deaths_per_1m_population&#39;: &#39;269&#39;, &#39;total_tests&#39;: &#39;68,845,476&#39;, &#39;tests_per_1m_population&#39;: &#39;2,644,452&#39;}, {&#39;country_name&#39;: &#39;Ukraine&#39;, &#39;cases&#39;: &#39;4,997,224&#39;, &#39;deaths&#39;: &#39;108,306&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;177&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;115,517&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,504&#39;, &#39;total_tests&#39;: &#39;19,521,252&#39;, &#39;tests_per_1m_population&#39;: &#39;451,259&#39;}, {&#39;country_name&#39;: &#39;Malaysia&#39;, &#39;cases&#39;: &#39;4,427,067&#39;, &#39;deaths&#39;: &#39;35,491&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;4,310,599&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;89&#39;, &#39;active_cases&#39;: &#39;80,977&#39;, &#39;total_cases_per_1m_population&#39;: &#39;133,690&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,072&#39;, &#39;total_tests&#39;: &#39;58,332,799&#39;, &#39;tests_per_1m_population&#39;: &#39;1,761,549&#39;}, {&#39;country_name&#39;: &#39;Thailand&#39;, &#39;cases&#39;: &#39;4,165,874&#39;, &#39;deaths&#39;: &#39;27,778&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,954,945&#39;, &#39;new_deaths&#39;: &#39;126&#39;, &#39;new_cases&#39;: &#39;17,784&#39;, &#39;serious_critical&#39;: &#39;1,496&#39;, &#39;active_cases&#39;: &#39;183,151&#39;, &#39;total_cases_per_1m_population&#39;: &#39;59,414&#39;, &#39;deaths_per_1m_population&#39;: &#39;396&#39;, &#39;total_tests&#39;: &#39;17,270,775&#39;, &#39;tests_per_1m_population&#39;: &#39;246,317&#39;}, {&#39;country_name&#39;: &#39;Austria&#39;, &#39;cases&#39;: &#39;4,104,859&#39;, &#39;deaths&#39;: &#39;18,047&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,989,860&#39;, &#39;new_deaths&#39;: &#39;12&#39;, &#39;new_cases&#39;: &#39;5,810&#39;, &#39;serious_critical&#39;: &#39;121&#39;, &#39;active_cases&#39;: &#39;96,952&#39;, &#39;total_cases_per_1m_population&#39;: &#39;451,125&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,983&#39;, &#39;total_tests&#39;: &#39;181,825,734&#39;, &#39;tests_per_1m_population&#39;: &#39;19,982,688&#39;}, {&#39;country_name&#39;: &#39;Israel&#39;, &#39;cases&#39;: &#39;4,054,342&#39;, &#39;deaths&#39;: &#39;10,658&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;4,009,152&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;220&#39;, &#39;active_cases&#39;: &#39;34,532&#39;, &#39;total_cases_per_1m_population&#39;: &#39;434,735&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,143&#39;, &#39;total_tests&#39;: &#39;41,373,364&#39;, &#39;tests_per_1m_population&#39;: &#39;4,436,346&#39;}, {&#39;country_name&#39;: &#39;Belgium&#39;, &#39;cases&#39;: &#39;4,015,791&#39;, &#39;deaths&#39;: &#39;31,319&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,726,457&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;169&#39;, &#39;active_cases&#39;: &#39;258,015&#39;, &#39;total_cases_per_1m_population&#39;: &#39;343,798&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,681&#39;, &#39;total_tests&#39;: &#39;33,456,470&#39;, &#39;tests_per_1m_population&#39;: &#39;2,864,259&#39;}, {&#39;country_name&#39;: &#39;Czechia&#39;, &#39;cases&#39;: &#39;3,895,544&#39;, &#39;deaths&#39;: &#39;40,081&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,838,099&#39;, &#39;new_deaths&#39;: &#39;5&#39;, &#39;new_cases&#39;: &#39;911&#39;, &#39;serious_critical&#39;: &#39;43&#39;, &#39;active_cases&#39;: &#39;17,364&#39;, &#39;total_cases_per_1m_population&#39;: &#39;362,550&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,730&#39;, &#39;total_tests&#39;: &#39;55,117,064&#39;, &#39;tests_per_1m_population&#39;: &#39;5,129,629&#39;}, {&#39;country_name&#39;: &#39;Portugal&#39;, &#39;cases&#39;: &#39;3,791,744&#39;, &#39;deaths&#39;: &#39;22,162&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;61&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;373,827&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,185&#39;, &#39;total_tests&#39;: &#39;40,748,372&#39;, &#39;tests_per_1m_population&#39;: &#39;4,017,371&#39;}, {&#39;country_name&#39;: &#39;South Africa&#39;, &#39;cases&#39;: &#39;3,759,689&#39;, &#39;deaths&#39;: &#39;100,298&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,632,572&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;175&#39;, &#39;active_cases&#39;: &#39;26,819&#39;, &#39;total_cases_per_1m_population&#39;: &#39;61,981&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,653&#39;, &#39;total_tests&#39;: &#39;24,313,334&#39;, &#39;tests_per_1m_population&#39;: &#39;400,824&#39;}, {&#39;country_name&#39;: &#39;Canada&#39;, &#39;cases&#39;: &#39;3,695,585&#39;, &#39;deaths&#39;: &#39;38,777&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,426,082&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;426&#39;, &#39;active_cases&#39;: &#39;230,726&#39;, &#39;total_cases_per_1m_population&#39;: &#39;96,391&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,011&#39;, &#39;total_tests&#39;: &#39;60,536,359&#39;, &#39;tests_per_1m_population&#39;: &#39;1,578,955&#39;}, {&#39;country_name&#39;: &#39;Philippines&#39;, &#39;cases&#39;: &#39;3,684,500&#39;, &#39;deaths&#39;: &#39;60,182&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,610,658&#39;, &#39;new_deaths&#39;: &#39;3&#39;, &#39;new_cases&#39;: &#39;205&#39;, &#39;serious_critical&#39;: &#39;289&#39;, &#39;active_cases&#39;: &#39;13,660&#39;, &#39;total_cases_per_1m_population&#39;: &#39;32,835&#39;, &#39;deaths_per_1m_population&#39;: &#39;536&#39;, &#39;total_tests&#39;: &#39;29,427,586&#39;, &#39;tests_per_1m_population&#39;: &#39;262,246&#39;}, {&#39;country_name&#39;: &#39;Switzerland&#39;, &#39;cases&#39;: &#39;3,579,867&#39;, &#39;deaths&#39;: &#39;13,816&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,378,507&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;90&#39;, &#39;active_cases&#39;: &#39;187,544&#39;, &#39;total_cases_per_1m_population&#39;: &#39;408,247&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,576&#39;, &#39;total_tests&#39;: &#39;20,666,182&#39;, &#39;tests_per_1m_population&#39;: &#39;2,356,766&#39;}, {&#39;country_name&#39;: &#39;Peru&#39;, &#39;cases&#39;: &#39;3,559,343&#39;, &#39;deaths&#39;: &#39;212,724&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;356&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;105,303&#39;, &#39;deaths_per_1m_population&#39;: &#39;6,293&#39;, &#39;total_tests&#39;: &#39;29,592,270&#39;, &#39;tests_per_1m_population&#39;: &#39;875,489&#39;}, {&#39;country_name&#39;: &#39;Chile&#39;, &#39;cases&#39;: &#39;3,544,463&#39;, &#39;deaths&#39;: &#39;57,375&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,368,772&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;286&#39;, &#39;active_cases&#39;: &#39;118,316&#39;, &#39;total_cases_per_1m_population&#39;: &#39;182,588&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,956&#39;, &#39;total_tests&#39;: &#39;36,711,724&#39;, &#39;tests_per_1m_population&#39;: &#39;1,891,147&#39;}, {&#39;country_name&#39;: &#39;Greece&#39;, &#39;cases&#39;: &#39;3,277,557&#39;, &#39;deaths&#39;: &#39;28,867&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,151,717&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;277&#39;, &#39;active_cases&#39;: &#39;96,973&#39;, &#39;total_cases_per_1m_population&#39;: &#39;317,250&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,794&#39;, &#39;total_tests&#39;: &#39;78,872,546&#39;, &#39;tests_per_1m_population&#39;: &#39;7,634,431&#39;}, {&#39;country_name&#39;: &#39;Denmark&#39;, &#39;cases&#39;: &#39;2,959,040&#39;, &#39;deaths&#39;: &#39;6,072&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,929,091&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;15&#39;, &#39;active_cases&#39;: &#39;23,877&#39;, &#39;total_cases_per_1m_population&#39;: &#39;507,639&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,042&#39;, &#39;total_tests&#39;: &#39;127,141,200&#39;, &#39;tests_per_1m_population&#39;: &#39;21,811,751&#39;}, {&#39;country_name&#39;: &#39;Romania&#39;, &#39;cases&#39;: &#39;2,888,318&#39;, &#39;deaths&#39;: &#39;65,427&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,606,660&#39;, &#39;new_deaths&#39;: &#39;6&#39;, &#39;new_cases&#39;: &#39;494&#39;, &#39;serious_critical&#39;: &#39;216&#39;, &#39;active_cases&#39;: &#39;216,231&#39;, &#39;total_cases_per_1m_population&#39;: &#39;151,968&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,442&#39;, &#39;total_tests&#39;: &#39;22,594,702&#39;, &#39;tests_per_1m_population&#39;: &#39;1,188,815&#39;}, {&#39;country_name&#39;: &#39;Sweden&#39;, &#39;cases&#39;: &#39;2,498,388&#39;, &#39;deaths&#39;: &#39;18,656&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,464,421&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;19&#39;, &#39;active_cases&#39;: &#39;15,311&#39;, &#39;total_cases_per_1m_population&#39;: &#39;244,630&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,827&#39;, &#39;total_tests&#39;: &#39;18,493,218&#39;, &#39;tests_per_1m_population&#39;: &#39;1,810,763&#39;}, {&#39;country_name&#39;: &#39;Iraq&#39;, &#39;cases&#39;: &#39;2,324,141&#39;, &#39;deaths&#39;: &#39;25,204&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,295,947&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;20&#39;, &#39;active_cases&#39;: &#39;2,990&#39;, &#39;total_cases_per_1m_population&#39;: &#39;55,534&#39;, &#39;deaths_per_1m_population&#39;: &#39;602&#39;, &#39;total_tests&#39;: &#39;18,450,939&#39;, &#39;tests_per_1m_population&#39;: &#39;440,871&#39;}, {&#39;country_name&#39;: &#39;Serbia&#39;, &#39;cases&#39;: &#39;2,001,144&#39;, &#39;deaths&#39;: &#39;15,953&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,967,786&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;25&#39;, &#39;active_cases&#39;: &#39;17,405&#39;, &#39;total_cases_per_1m_population&#39;: &#39;230,710&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,839&#39;, &#39;total_tests&#39;: &#39;9,427,662&#39;, &#39;tests_per_1m_population&#39;: &#39;1,086,907&#39;}, {&#39;country_name&#39;: &#39;Bangladesh&#39;, &#39;cases&#39;: &#39;1,952,532&#39;, &#39;deaths&#39;: &#39;29,127&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,893,131&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1,297&#39;, &#39;active_cases&#39;: &#39;30,274&#39;, &#39;total_cases_per_1m_population&#39;: &#39;11,646&#39;, &#39;deaths_per_1m_population&#39;: &#39;174&#39;, &#39;total_tests&#39;: &#39;13,956,056&#39;, &#39;tests_per_1m_population&#39;: &#39;83,245&#39;}, {&#39;country_name&#39;: &#39;Hungary&#39;, &#39;cases&#39;: &#39;1,890,953&#39;, &#39;deaths&#39;: &#39;46,048&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,776,617&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;45&#39;, &#39;active_cases&#39;: &#39;68,288&#39;, &#39;total_cases_per_1m_population&#39;: &#39;196,645&#39;, &#39;deaths_per_1m_population&#39;: &#39;4,789&#39;, &#39;total_tests&#39;: &#39;11,295,119&#39;, &#39;tests_per_1m_population&#39;: &#39;1,174,608&#39;}, {&#39;country_name&#39;: &#39;Slovakia&#39;, &#39;cases&#39;: &#39;1,774,808&#39;, &#39;deaths&#39;: &#39;19,839&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,730,712&#39;, &#39;new_deaths&#39;: &#39;10&#39;, &#39;new_cases&#39;: &#39;1,155&#39;, &#39;serious_critical&#39;: &#39;88&#39;, &#39;active_cases&#39;: &#39;24,257&#39;, &#39;total_cases_per_1m_population&#39;: &#39;324,794&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,631&#39;, &#39;total_tests&#39;: &#39;7,057,901&#39;, &#39;tests_per_1m_population&#39;: &#39;1,291,611&#39;}, {&#39;country_name&#39;: &#39;Jordan&#39;, &#39;cases&#39;: &#39;1,694,216&#39;, &#39;deaths&#39;: &#39;14,048&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,678,941&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;124&#39;, &#39;active_cases&#39;: &#39;1,227&#39;, &#39;total_cases_per_1m_population&#39;: &#39;163,125&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,353&#39;, &#39;total_tests&#39;: &#39;16,670,254&#39;, &#39;tests_per_1m_population&#39;: &#39;1,605,074&#39;}, {&#39;country_name&#39;: &#39;Georgia&#39;, &#39;cases&#39;: &#39;1,654,255&#39;, &#39;deaths&#39;: &#39;16,800&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,635,791&#39;, &#39;new_deaths&#39;: &#39;3&#39;, &#39;new_cases&#39;: &#39;92&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1,664&#39;, &#39;total_cases_per_1m_population&#39;: &#39;416,129&#39;, &#39;deaths_per_1m_population&#39;: &#39;4,226&#39;, &#39;total_tests&#39;: &#39;16,807,205&#39;, &#39;tests_per_1m_population&#39;: &#39;4,227,861&#39;}, {&#39;country_name&#39;: &#39;Pakistan&#39;, &#39;cases&#39;: &#39;1,527,856&#39;, &#39;deaths&#39;: &#39;30,369&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,493,998&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;105&#39;, &#39;serious_critical&#39;: &#39;186&#39;, &#39;active_cases&#39;: &#39;3,489&#39;, &#39;total_cases_per_1m_population&#39;: &#39;6,683&#39;, &#39;deaths_per_1m_population&#39;: &#39;133&#39;, &#39;total_tests&#39;: &#39;28,048,307&#39;, &#39;tests_per_1m_population&#39;: &#39;122,679&#39;}, {&#39;country_name&#39;: &#39;Ireland&#39;, &#39;cases&#39;: &#39;1,509,536&#39;, &#39;deaths&#39;: &#39;6,996&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,415,949&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;41&#39;, &#39;active_cases&#39;: &#39;86,591&#39;, &#39;total_cases_per_1m_population&#39;: &#39;299,669&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,389&#39;, &#39;total_tests&#39;: &#39;12,016,948&#39;, &#39;tests_per_1m_population&#39;: &#39;2,385,571&#39;}, {&#39;country_name&#39;: &#39;Norway&#39;, &#39;cases&#39;: &#39;1,423,509&#39;, &#39;deaths&#39;: &#39;2,871&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;20&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;258,925&#39;, &#39;deaths_per_1m_population&#39;: &#39;522&#39;, &#39;total_tests&#39;: &#39;11,002,430&#39;, &#39;tests_per_1m_population&#39;: &#39;2,001,256&#39;}, {&#39;country_name&#39;: &#39;Kazakhstan&#39;, &#39;cases&#39;: &#39;1,305,457&#39;, &#39;deaths&#39;: &#39;13,660&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,290,988&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;10&#39;, &#39;serious_critical&#39;: &#39;24&#39;, &#39;active_cases&#39;: &#39;809&#39;, &#39;total_cases_per_1m_population&#39;: &#39;68,056&#39;, &#39;deaths_per_1m_population&#39;: &#39;712&#39;, &#39;total_tests&#39;: &#39;11,575,012&#39;, &#39;tests_per_1m_population&#39;: &#39;603,428&#39;}, {&#39;country_name&#39;: &#39;Hong Kong&#39;, &#39;cases&#39;: &#39;1,201,431&#39;, &#39;deaths&#39;: &#39;9,236&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;115&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;157,942&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,214&#39;, &#39;total_tests&#39;: &#39;44,972,952&#39;, &#39;tests_per_1m_population&#39;: &#39;5,912,223&#39;}, {&#39;country_name&#39;: &#39;Singapore&#39;, &#39;cases&#39;: &#39;1,180,124&#39;, &#39;deaths&#39;: &#39;1,325&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,109,387&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;9&#39;, &#39;active_cases&#39;: &#39;69,412&#39;, &#39;total_cases_per_1m_population&#39;: &#39;198,895&#39;, &#39;deaths_per_1m_population&#39;: &#39;223&#39;, &#39;total_tests&#39;: &#39;23,712,995&#39;, &#39;tests_per_1m_population&#39;: &#39;3,996,529&#39;}, {&#39;country_name&#39;: &#39;Morocco&#39;, &#39;cases&#39;: &#39;1,164,670&#39;, &#39;deaths&#39;: &#39;16,065&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,148,154&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;293&#39;, &#39;active_cases&#39;: &#39;451&#39;, &#39;total_cases_per_1m_population&#39;: &#39;30,893&#39;, &#39;deaths_per_1m_population&#39;: &#39;426&#39;, &#39;total_tests&#39;: &#39;11,237,010&#39;, &#39;tests_per_1m_population&#39;: &#39;298,062&#39;}, {&#39;country_name&#39;: &#39;Bulgaria&#39;, &#39;cases&#39;: &#39;1,152,892&#39;, &#39;deaths&#39;: &#39;36,849&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;959,542&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;105&#39;, &#39;active_cases&#39;: &#39;156,501&#39;, &#39;total_cases_per_1m_population&#39;: &#39;168,206&#39;, &#39;deaths_per_1m_population&#39;: &#39;5,376&#39;, &#39;total_tests&#39;: &#39;9,797,011&#39;, &#39;tests_per_1m_population&#39;: &#39;1,429,377&#39;}, {&#39;country_name&#39;: &#39;Croatia&#39;, &#39;cases&#39;: &#39;1,117,175&#39;, &#39;deaths&#39;: &#39;15,778&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,096,829&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;22&#39;, &#39;active_cases&#39;: &#39;4,568&#39;, &#39;total_cases_per_1m_population&#39;: &#39;275,195&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,887&#39;, &#39;total_tests&#39;: &#39;4,762,146&#39;, &#39;tests_per_1m_population&#39;: &#39;1,173,065&#39;}, {&#39;country_name&#39;: &#39;Cuba&#39;, &#39;cases&#39;: &#39;1,101,486&#39;, &#39;deaths&#39;: &#39;8,523&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,091,603&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;23&#39;, &#39;active_cases&#39;: &#39;1,360&#39;, &#39;total_cases_per_1m_population&#39;: &#39;97,355&#39;, &#39;deaths_per_1m_population&#39;: &#39;753&#39;, &#39;total_tests&#39;: &#39;12,920,253&#39;, &#39;tests_per_1m_population&#39;: &#39;1,141,957&#39;}, {&#39;country_name&#39;: &#39;Lebanon&#39;, &#39;cases&#39;: &#39;1,096,320&#39;, &#39;deaths&#39;: &#39;10,374&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,079,455&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;186&#39;, &#39;active_cases&#39;: &#39;6,491&#39;, &#39;total_cases_per_1m_population&#39;: &#39;161,931&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,532&#39;, &#39;total_tests&#39;: &#39;4,795,578&#39;, &#39;tests_per_1m_population&#39;: &#39;708,328&#39;}, {&#39;country_name&#39;: &#39;Lithuania&#39;, &#39;cases&#39;: &#39;1,054,618&#39;, &#39;deaths&#39;: &#39;9,063&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,016,510&#39;, &#39;new_deaths&#39;: &#39;9&#39;, &#39;new_cases&#39;: &#39;427&#39;, &#39;serious_critical&#39;: &#39;31&#39;, &#39;active_cases&#39;: &#39;29,045&#39;, &#39;total_cases_per_1m_population&#39;: &#39;397,407&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,415&#39;, &#39;total_tests&#39;: &#39;8,217,113&#39;, &#39;tests_per_1m_population&#39;: &#39;3,096,414&#39;}, {&#39;country_name&#39;: &#39;Tunisia&#39;, &#39;cases&#39;: &#39;1,039,532&#39;, &#39;deaths&#39;: &#39;28,533&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;29&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;86,327&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,369&#39;, &#39;total_tests&#39;: &#39;4,563,397&#39;, &#39;tests_per_1m_population&#39;: &#39;378,962&#39;}, {&#39;country_name&#39;: &#39;Slovenia&#39;, &#39;cases&#39;: &#39;1,003,970&#39;, &#39;deaths&#39;: &#39;6,576&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;980,501&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;30&#39;, &#39;active_cases&#39;: &#39;16,893&#39;, &#39;total_cases_per_1m_population&#39;: &#39;482,805&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,162&#39;, &#39;total_tests&#39;: &#39;2,640,107&#39;, &#39;tests_per_1m_population&#39;: &#39;1,269,615&#39;}, {&#39;country_name&#39;: &#39;Finland&#39;, &#39;cases&#39;: &#39;1,000,472&#39;, &#39;deaths&#39;: &#39;3,638&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;46,000&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;31&#39;, &#39;active_cases&#39;: &#39;950,834&#39;, &#39;total_cases_per_1m_population&#39;: &#39;180,062&#39;, &#39;deaths_per_1m_population&#39;: &#39;655&#39;, &#39;total_tests&#39;: &#39;10,644,579&#39;, &#39;tests_per_1m_population&#39;: &#39;1,915,782&#39;}, {&#39;country_name&#39;: &#39;Nepal&#39;, &#39;cases&#39;: &#39;978,743&#39;, &#39;deaths&#39;: &#39;11,951&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;966,523&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;11&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;269&#39;, &#39;total_cases_per_1m_population&#39;: &#39;32,535&#39;, &#39;deaths_per_1m_population&#39;: &#39;397&#39;, &#39;total_tests&#39;: &#39;5,616,752&#39;, &#39;tests_per_1m_population&#39;: &#39;186,711&#39;}, {&#39;country_name&#39;: &#39;Belarus&#39;, &#39;cases&#39;: &#39;977,434&#39;, &#39;deaths&#39;: &#39;6,922&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;928,536&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;41,976&#39;, &#39;total_cases_per_1m_population&#39;: &#39;103,501&#39;, &#39;deaths_per_1m_population&#39;: &#39;733&#39;, &#39;total_tests&#39;: &#39;13,092,771&#39;, &#39;tests_per_1m_population&#39;: &#39;1,386,401&#39;}, {&#39;country_name&#39;: &#39;Bolivia&#39;, &#39;cases&#39;: &#39;904,377&#39;, &#39;deaths&#39;: &#39;21,908&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;855,123&#39;, &#39;new_deaths&#39;: &#39;1&#39;, &#39;new_cases&#39;: &#39;83&#39;, &#39;serious_critical&#39;: &#39;220&#39;, &#39;active_cases&#39;: &#39;27,346&#39;, &#39;total_cases_per_1m_population&#39;: &#39;75,614&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,832&#39;, &#39;total_tests&#39;: &#39;2,693,845&#39;, &#39;tests_per_1m_population&#39;: &#39;225,230&#39;}, {&#39;country_name&#39;: &#39;UAE&#39;, &#39;cases&#39;: &#39;897,136&#39;, &#39;deaths&#39;: &#39;2,302&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;879,787&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;244&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;15,047&#39;, &#39;total_cases_per_1m_population&#39;: &#39;88,772&#39;, &#39;deaths_per_1m_population&#39;: &#39;228&#39;, &#39;total_tests&#39;: &#39;154,420,740&#39;, &#39;tests_per_1m_population&#39;: &#39;15,279,961&#39;}, {&#39;country_name&#39;: &#39;Uruguay&#39;, &#39;cases&#39;: &#39;895,775&#39;, &#39;deaths&#39;: &#39;7,197&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;886,654&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;18&#39;, &#39;active_cases&#39;: &#39;1,924&#39;, &#39;total_cases_per_1m_population&#39;: &#39;256,268&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,059&#39;, &#39;total_tests&#39;: &#39;6,091,188&#39;, &#39;tests_per_1m_population&#39;: &#39;1,742,599&#39;}, {&#39;country_name&#39;: &#39;New Zealand&#39;, &#39;cases&#39;: &#39;884,289&#39;, &#39;deaths&#39;: &#39;636&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;824,272&#39;, &#39;new_deaths&#39;: &#39;9&#39;, &#39;new_cases&#39;: &#39;5,714&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;59,381&#39;, &#39;total_cases_per_1m_population&#39;: &#39;176,784&#39;, &#39;deaths_per_1m_population&#39;: &#39;127&#39;, &#39;total_tests&#39;: &#39;6,983,031&#39;, &#39;tests_per_1m_population&#39;: &#39;1,396,020&#39;}, {&#39;country_name&#39;: &#39;Ecuador&#39;, &#39;cases&#39;: &#39;868,053&#39;, &#39;deaths&#39;: &#39;35,581&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;759&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;47,888&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,963&#39;, &#39;total_tests&#39;: &#39;2,470,170&#39;, &#39;tests_per_1m_population&#39;: &#39;136,273&#39;}, {&#39;country_name&#39;: &#39;Costa Rica&#39;, &#39;cases&#39;: &#39;847,784&#39;, &#39;deaths&#39;: &#39;8,383&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;829,515&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;43&#39;, &#39;active_cases&#39;: &#39;9,886&#39;, &#39;total_cases_per_1m_population&#39;: &#39;163,725&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,619&#39;, &#39;total_tests&#39;: &#39;4,240,743&#39;, &#39;tests_per_1m_population&#39;: &#39;818,979&#39;}, {&#39;country_name&#39;: &#39;Guatemala&#39;, &#39;cases&#39;: &#39;841,341&#39;, &#39;deaths&#39;: &#39;17,496&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;821,185&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;5&#39;, &#39;active_cases&#39;: &#39;2,660&#39;, &#39;total_cases_per_1m_population&#39;: &#39;45,444&#39;, &#39;deaths_per_1m_population&#39;: &#39;945&#39;, &#39;total_tests&#39;: &#39;4,402,305&#39;, &#39;tests_per_1m_population&#39;: &#39;237,787&#39;}, {&#39;country_name&#39;: &#39;Latvia&#39;, &#39;cases&#39;: &#39;817,316&#39;, &#39;deaths&#39;: &#39;5,743&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;803,135&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;322&#39;, &#39;serious_critical&#39;: &#39;9&#39;, &#39;active_cases&#39;: &#39;8,438&#39;, &#39;total_cases_per_1m_population&#39;: &#39;442,135&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,107&#39;, &#39;total_tests&#39;: &#39;7,154,016&#39;, &#39;tests_per_1m_population&#39;: &#39;3,870,035&#39;}, {&#39;country_name&#39;: &#39;Azerbaijan&#39;, &#39;cases&#39;: &#39;792,476&#39;, &#39;deaths&#39;: &#39;9,707&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;782,634&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;135&#39;, &#39;total_cases_per_1m_population&#39;: &#39;76,908&#39;, &#39;deaths_per_1m_population&#39;: &#39;942&#39;, &#39;total_tests&#39;: &#39;6,792,132&#39;, &#39;tests_per_1m_population&#39;: &#39;659,165&#39;}, {&#39;country_name&#39;: &#39;Panama&#39;, &#39;cases&#39;: &#39;771,486&#39;, &#39;deaths&#39;: &#39;8,182&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;759,832&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;8&#39;, &#39;active_cases&#39;: &#39;3,472&#39;, &#39;total_cases_per_1m_population&#39;: &#39;173,862&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,844&#39;, &#39;total_tests&#39;: &#39;5,820,472&#39;, &#39;tests_per_1m_population&#39;: &#39;1,311,699&#39;}, {&#39;country_name&#39;: &#39;Saudi Arabia&#39;, &#39;cases&#39;: &#39;753,332&#39;, &#39;deaths&#39;: &#39;9,076&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;740,467&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;45&#39;, &#39;active_cases&#39;: &#39;3,789&#39;, &#39;total_cases_per_1m_population&#39;: &#39;21,047&#39;, &#39;deaths_per_1m_population&#39;: &#39;254&#39;, &#39;total_tests&#39;: &#39;41,817,866&#39;, &#39;tests_per_1m_population&#39;: &#39;1,168,345&#39;}, {&#39;country_name&#39;: &#39;Sri Lanka&#39;, &#39;cases&#39;: &#39;663,131&#39;, &#39;deaths&#39;: &#39;16,502&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;642,574&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;4,055&#39;, &#39;total_cases_per_1m_population&#39;: &#39;30,736&#39;, &#39;deaths_per_1m_population&#39;: &#39;765&#39;, &#39;total_tests&#39;: &#39;6,486,117&#39;, &#39;tests_per_1m_population&#39;: &#39;300,627&#39;}, {&#39;country_name&#39;: &#39;Paraguay&#39;, &#39;cases&#39;: &#39;649,034&#39;, &#39;deaths&#39;: &#39;18,795&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;624,673&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;5&#39;, &#39;active_cases&#39;: &#39;5,566&#39;, &#39;total_cases_per_1m_population&#39;: &#39;89,022&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,578&#39;, &#39;total_tests&#39;: &#39;2,623,300&#39;, &#39;tests_per_1m_population&#39;: &#39;359,816&#39;}, {&#39;country_name&#39;: &#39;Kuwait&#39;, &#39;cases&#39;: &#39;631,294&#39;, &#39;deaths&#39;: &#39;2,555&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;627,899&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;8&#39;, &#39;active_cases&#39;: &#39;840&#39;, &#39;total_cases_per_1m_population&#39;: &#39;143,981&#39;, &#39;deaths_per_1m_population&#39;: &#39;583&#39;, &#39;total_tests&#39;: &#39;7,999,656&#39;, &#39;tests_per_1m_population&#39;: &#39;1,824,506&#39;}, {&#39;country_name&#39;: &#39;Myanmar&#39;, &#39;cases&#39;: &#39;612,733&#39;, &#39;deaths&#39;: &#39;19,434&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;591,609&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1,690&#39;, &#39;total_cases_per_1m_population&#39;: &#39;11,127&#39;, &#39;deaths_per_1m_population&#39;: &#39;353&#39;, &#39;total_tests&#39;: &#39;7,891,077&#39;, &#39;tests_per_1m_population&#39;: &#39;143,296&#39;}, {&#39;country_name&#39;: &#39;Palestine&#39;, &#39;cases&#39;: &#39;581,816&#39;, &#39;deaths&#39;: &#39;5,353&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;575,899&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;17&#39;, &#39;active_cases&#39;: &#39;564&#39;, &#39;total_cases_per_1m_population&#39;: &#39;109,459&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,007&#39;, &#39;total_tests&#39;: &#39;3,078,533&#39;, &#39;tests_per_1m_population&#39;: &#39;579,175&#39;}, {&#39;country_name&#39;: &#39;Dominican Republic&#39;, &#39;cases&#39;: &#39;578,954&#39;, &#39;deaths&#39;: &#39;4,376&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;574,297&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;16&#39;, &#39;active_cases&#39;: &#39;281&#39;, &#39;total_cases_per_1m_population&#39;: &#39;52,421&#39;, &#39;deaths_per_1m_population&#39;: &#39;396&#39;, &#39;total_tests&#39;: &#39;3,261,060&#39;, &#39;tests_per_1m_population&#39;: &#39;295,272&#39;}, {&#39;country_name&#39;: &#39;Estonia&#39;, &#39;cases&#39;: &#39;570,257&#39;, &#39;deaths&#39;: &#39;2,531&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;507,474&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;181&#39;, &#39;serious_critical&#39;: &#39;7&#39;, &#39;active_cases&#39;: &#39;60,252&#39;, &#39;total_cases_per_1m_population&#39;: &#39;429,364&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,906&#39;, &#39;total_tests&#39;: &#39;3,311,935&#39;, &#39;tests_per_1m_population&#39;: &#39;2,493,655&#39;}, {&#39;country_name&#39;: &#39;Bahrain&#39;, &#39;cases&#39;: &#39;565,830&#39;, &#39;deaths&#39;: &#39;1,475&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;560,795&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;3&#39;, &#39;active_cases&#39;: &#39;3,560&#39;, &#39;total_cases_per_1m_population&#39;: &#39;312,916&#39;, &#39;deaths_per_1m_population&#39;: &#39;816&#39;, &#39;total_tests&#39;: &#39;9,695,962&#39;, &#39;tests_per_1m_population&#39;: &#39;5,362,081&#39;}, {&#39;country_name&#39;: &#39;Venezuela&#39;, &#39;cases&#39;: &#39;522,121&#39;, &#39;deaths&#39;: &#39;5,705&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;515,305&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;230&#39;, &#39;active_cases&#39;: &#39;1,111&#39;, &#39;total_cases_per_1m_population&#39;: &#39;18,456&#39;, &#39;deaths_per_1m_population&#39;: &#39;202&#39;, &#39;total_tests&#39;: &#39;3,359,014&#39;, &#39;tests_per_1m_population&#39;: &#39;118,733&#39;}, {&#39;country_name&#39;: &#39;Moldova&#39;, &#39;cases&#39;: &#39;516,986&#39;, &#39;deaths&#39;: &#39;11,489&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;504,142&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;49&#39;, &#39;active_cases&#39;: &#39;1,355&#39;, &#39;total_cases_per_1m_population&#39;: &#39;128,698&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,860&#39;, &#39;total_tests&#39;: &#39;3,216,305&#39;, &#39;tests_per_1m_population&#39;: &#39;800,665&#39;}, {&#39;country_name&#39;: &#39;Egypt&#39;, &#39;cases&#39;: &#39;515,645&#39;, &#39;deaths&#39;: &#39;24,613&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;442,182&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;122&#39;, &#39;active_cases&#39;: &#39;48,850&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,873&#39;, &#39;deaths_per_1m_population&#39;: &#39;233&#39;, &#39;total_tests&#39;: &#39;3,693,367&#39;, &#39;tests_per_1m_population&#39;: &#39;34,903&#39;}, {&#39;country_name&#39;: &#39;Libya&#39;, &#39;cases&#39;: &#39;501,862&#39;, &#39;deaths&#39;: &#39;6,429&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;490,900&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;101&#39;, &#39;active_cases&#39;: &#39;4,533&#39;, &#39;total_cases_per_1m_population&#39;: &#39;71,288&#39;, &#39;deaths_per_1m_population&#39;: &#39;913&#39;, &#39;total_tests&#39;: &#39;2,476,960&#39;, &#39;tests_per_1m_population&#39;: &#39;351,844&#39;}, {&#39;country_name&#39;: &#39;Cyprus&#39;, &#39;cases&#39;: &#39;470,481&#39;, &#39;deaths&#39;: &#39;1,011&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;124,370&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;60&#39;, &#39;active_cases&#39;: &#39;345,100&#39;, &#39;total_cases_per_1m_population&#39;: &#39;384,623&#39;, &#39;deaths_per_1m_population&#39;: &#39;827&#39;, &#39;total_tests&#39;: &#39;9,477,138&#39;, &#39;tests_per_1m_population&#39;: &#39;7,747,665&#39;}, {&#39;country_name&#39;: &#39;Ethiopia&#39;, &#39;cases&#39;: &#39;470,417&#39;, &#39;deaths&#39;: &#39;7,510&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;454,967&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;15&#39;, &#39;active_cases&#39;: &#39;7,940&#39;, &#39;total_cases_per_1m_population&#39;: &#39;3,917&#39;, &#39;deaths_per_1m_population&#39;: &#39;63&#39;, &#39;total_tests&#39;: &#39;4,763,756&#39;, &#39;tests_per_1m_population&#39;: &#39;39,665&#39;}, {&#39;country_name&#39;: &#39;Mongolia&#39;, &#39;cases&#39;: &#39;469,580&#39;, &#39;deaths&#39;: &#39;2,177&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;313,256&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;30&#39;, &#39;serious_critical&#39;: &#39;192&#39;, &#39;active_cases&#39;: &#39;154,147&#39;, &#39;total_cases_per_1m_population&#39;: &#39;139,194&#39;, &#39;deaths_per_1m_population&#39;: &#39;645&#39;, &#39;total_tests&#39;: &#39;4,030,048&#39;, &#39;tests_per_1m_population&#39;: &#39;1,194,595&#39;}, {&#39;country_name&#39;: &#39;Armenia&#39;, &#39;cases&#39;: &#39;422,825&#39;, &#39;deaths&#39;: &#39;8,622&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;410,558&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;3&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;3,645&#39;, &#39;total_cases_per_1m_population&#39;: &#39;142,210&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,900&#39;, &#39;total_tests&#39;: &#39;3,035,104&#39;, &#39;tests_per_1m_population&#39;: &#39;1,020,807&#39;}, {&#39;country_name&#39;: &#39;Honduras&#39;, &#39;cases&#39;: &#39;422,275&#39;, &#39;deaths&#39;: &#39;10,892&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;131,100&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;105&#39;, &#39;active_cases&#39;: &#39;280,283&#39;, &#39;total_cases_per_1m_population&#39;: &#39;41,445&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,069&#39;, &#39;total_tests&#39;: &#39;1,263,329&#39;, &#39;tests_per_1m_population&#39;: &#39;123,991&#39;}, {&#39;country_name&#39;: &#39;Oman&#39;, &#39;cases&#39;: &#39;388,995&#39;, &#39;deaths&#39;: &#39;4,257&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;384,055&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;2&#39;, &#39;active_cases&#39;: &#39;683&#39;, &#39;total_cases_per_1m_population&#39;: &#39;72,833&#39;, &#39;deaths_per_1m_population&#39;: &#39;797&#39;, &#39;total_tests&#39;: &#39;25,000,000&#39;, &#39;tests_per_1m_population&#39;: &#39;4,680,828&#39;}, {&#39;country_name&#39;: &#39;Bosnia and Herzegovina&#39;, &#39;cases&#39;: &#39;376,699&#39;, &#39;deaths&#39;: &#39;15,756&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;192,218&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;168,725&#39;, &#39;total_cases_per_1m_population&#39;: &#39;116,122&#39;, &#39;deaths_per_1m_population&#39;: &#39;4,857&#39;, &#39;total_tests&#39;: &#39;1,752,716&#39;, &#39;tests_per_1m_population&#39;: &#39;540,297&#39;}, {&#39;country_name&#39;: &#39;Réunion&#39;, &#39;cases&#39;: &#39;374,295&#39;, &#39;deaths&#39;: &#39;742&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;355,605&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;10&#39;, &#39;active_cases&#39;: &#39;17,948&#39;, &#39;total_cases_per_1m_population&#39;: &#39;412,744&#39;, &#39;deaths_per_1m_population&#39;: &#39;818&#39;, &#39;total_tests&#39;: &#39;1,603,660&#39;, &#39;tests_per_1m_population&#39;: &#39;1,768,393&#39;}, {&#39;country_name&#39;: &#39;Qatar&#39;, &#39;cases&#39;: &#39;364,089&#39;, &#39;deaths&#39;: &#39;677&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;362,568&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;844&#39;, &#39;total_cases_per_1m_population&#39;: &#39;129,670&#39;, &#39;deaths_per_1m_population&#39;: &#39;241&#39;, &#39;total_tests&#39;: &#39;3,425,362&#39;, &#39;tests_per_1m_population&#39;: &#39;1,219,943&#39;}, {&#39;country_name&#39;: &#39;Kenya&#39;, &#39;cases&#39;: &#39;323,696&#39;, &#39;deaths&#39;: &#39;5,649&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;317,909&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;138&#39;, &#39;total_cases_per_1m_population&#39;: &#39;5,790&#39;, &#39;deaths_per_1m_population&#39;: &#39;101&#39;, &#39;total_tests&#39;: &#39;3,581,506&#39;, &#39;tests_per_1m_population&#39;: &#39;64,060&#39;}, {&#39;country_name&#39;: &#39;Zambia&#39;, &#39;cases&#39;: &#39;318,984&#39;, &#39;deaths&#39;: &#39;3,974&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;314,075&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;935&#39;, &#39;total_cases_per_1m_population&#39;: &#39;16,517&#39;, &#39;deaths_per_1m_population&#39;: &#39;206&#39;, &#39;total_tests&#39;: &#39;3,408,441&#39;, &#39;tests_per_1m_population&#39;: &#39;176,487&#39;}, {&#39;country_name&#39;: &#39;North Macedonia&#39;, &#39;cases&#39;: &#39;309,062&#39;, &#39;deaths&#39;: &#39;9,271&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;299,064&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;727&#39;, &#39;total_cases_per_1m_population&#39;: &#39;148,358&#39;, &#39;deaths_per_1m_population&#39;: &#39;4,450&#39;, &#39;total_tests&#39;: &#39;2,007,553&#39;, &#39;tests_per_1m_population&#39;: &#39;963,678&#39;}, {&#39;country_name&#39;: &#39;Botswana&#39;, &#39;cases&#39;: &#39;305,859&#39;, &#39;deaths&#39;: &#39;2,688&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;303,026&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;145&#39;, &#39;total_cases_per_1m_population&#39;: &#39;125,491&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,103&#39;, &#39;total_tests&#39;: &#39;2,026,898&#39;, &#39;tests_per_1m_population&#39;: &#39;831,613&#39;}, {&#39;country_name&#39;: &#39;Albania&#39;, &#39;cases&#39;: &#39;274,791&#39;, &#39;deaths&#39;: &#39;3,496&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;270,869&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;2&#39;, &#39;active_cases&#39;: &#39;426&#39;, &#39;total_cases_per_1m_population&#39;: &#39;95,675&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,217&#39;, &#39;total_tests&#39;: &#39;1,799,730&#39;, &#39;tests_per_1m_population&#39;: &#39;626,620&#39;}, {&#39;country_name&#39;: &#39;Algeria&#39;, &#39;cases&#39;: &#39;265,761&#39;, &#39;deaths&#39;: &#39;6,874&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;178,344&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;6&#39;, &#39;active_cases&#39;: &#39;80,543&#39;, &#39;total_cases_per_1m_population&#39;: &#39;5,869&#39;, &#39;deaths_per_1m_population&#39;: &#39;152&#39;, &#39;total_tests&#39;: &#39;230,861&#39;, &#39;tests_per_1m_population&#39;: &#39;5,099&#39;}, {&#39;country_name&#39;: &#39;Nigeria&#39;, &#39;cases&#39;: &#39;255,685&#39;, &#39;deaths&#39;: &#39;3,143&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;249,890&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;11&#39;, &#39;active_cases&#39;: &#39;2,652&#39;, &#39;total_cases_per_1m_population&#39;: &#39;1,187&#39;, &#39;deaths_per_1m_population&#39;: &#39;15&#39;, &#39;total_tests&#39;: &#39;5,036,813&#39;, &#39;tests_per_1m_population&#39;: &#39;23,388&#39;}, {&#39;country_name&#39;: &#39;Zimbabwe&#39;, &#39;cases&#39;: &#39;247,524&#39;, &#39;deaths&#39;: &#39;5,468&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;241,362&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;12&#39;, &#39;active_cases&#39;: &#39;694&#39;, &#39;total_cases_per_1m_population&#39;: &#39;16,227&#39;, &#39;deaths_per_1m_population&#39;: &#39;358&#39;, &#39;total_tests&#39;: &#39;2,240,305&#39;, &#39;tests_per_1m_population&#39;: &#39;146,872&#39;}, {&#39;country_name&#39;: &#39;Uzbekistan&#39;, &#39;cases&#39;: &#39;238,469&#39;, &#39;deaths&#39;: &#39;1,637&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;236,483&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;27&#39;, &#39;serious_critical&#39;: &#39;23&#39;, &#39;active_cases&#39;: &#39;349&#39;, &#39;total_cases_per_1m_population&#39;: &#39;6,943&#39;, &#39;deaths_per_1m_population&#39;: &#39;48&#39;, &#39;total_tests&#39;: &#39;1,377,915&#39;, &#39;tests_per_1m_population&#39;: &#39;40,120&#39;}, {&#39;country_name&#39;: &#39;Montenegro&#39;, &#39;cases&#39;: &#39;234,619&#39;, &#39;deaths&#39;: &#39;2,713&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;231,297&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;6&#39;, &#39;active_cases&#39;: &#39;609&#39;, &#39;total_cases_per_1m_population&#39;: &#39;373,473&#39;, &#39;deaths_per_1m_population&#39;: &#39;4,319&#39;, &#39;total_tests&#39;: &#39;2,444,820&#39;, &#39;tests_per_1m_population&#39;: &#39;3,891,730&#39;}, {&#39;country_name&#39;: &#39;Luxembourg&#39;, &#39;cases&#39;: &#39;233,966&#39;, &#39;deaths&#39;: &#39;1,058&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;221,501&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;11,407&#39;, &#39;total_cases_per_1m_population&#39;: &#39;363,099&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,642&#39;, &#39;total_tests&#39;: &#39;4,213,886&#39;, &#39;tests_per_1m_population&#39;: &#39;6,539,666&#39;}, {&#39;country_name&#39;: &#39;Mozambique&#39;, &#39;cases&#39;: &#39;225,358&#39;, &#39;deaths&#39;: &#39;2,201&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;223,104&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;13&#39;, &#39;active_cases&#39;: &#39;53&#39;, &#39;total_cases_per_1m_population&#39;: &#39;6,863&#39;, &#39;deaths_per_1m_population&#39;: &#39;67&#39;, &#39;total_tests&#39;: &#39;1,308,458&#39;, &#39;tests_per_1m_population&#39;: &#39;39,849&#39;}, {&#39;country_name&#39;: &#39;Laos&#39;, &#39;cases&#39;: &#39;205,975&#39;, &#39;deaths&#39;: &#39;732&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7,660&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;1,082&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;197,583&#39;, &#39;total_cases_per_1m_population&#39;: &#39;27,588&#39;, &#39;deaths_per_1m_population&#39;: &#39;98&#39;, &#39;total_tests&#39;: &#39;1,232,128&#39;, &#39;tests_per_1m_population&#39;: &#39;165,029&#39;}, {&#39;country_name&#39;: &#39;Kyrgyzstan&#39;, &#39;cases&#39;: &#39;200,983&#39;, &#39;deaths&#39;: &#39;2,991&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;196,386&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;131&#39;, &#39;active_cases&#39;: &#39;1,606&#39;, &#39;total_cases_per_1m_population&#39;: &#39;29,915&#39;, &#39;deaths_per_1m_population&#39;: &#39;445&#39;, &#39;total_tests&#39;: &#39;1,907,195&#39;, &#39;tests_per_1m_population&#39;: &#39;283,874&#39;}, {&#39;country_name&#39;: &#39;China&#39;, &#39;cases&#39;: &#39;200,654&#39;, &#39;deaths&#39;: &#39;4,725&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;166,398&#39;, &#39;new_deaths&#39;: &#39;39&#39;, &#39;new_cases&#39;: &#39;1,580&#39;, &#39;serious_critical&#39;: &#39;236&#39;, &#39;active_cases&#39;: &#39;29,531&#39;, &#39;total_cases_per_1m_population&#39;: &#39;139&#39;, &#39;deaths_per_1m_population&#39;: &#39;3&#39;, &#39;total_tests&#39;: &#39;160,000,000&#39;, &#39;tests_per_1m_population&#39;: &#39;111,163&#39;}, {&#39;country_name&#39;: &#39;Iceland&#39;, &#39;cases&#39;: &#39;183,974&#39;, &#39;deaths&#39;: &#39;112&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;75,685&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;108,177&#39;, &#39;total_cases_per_1m_population&#39;: &#39;532,886&#39;, &#39;deaths_per_1m_population&#39;: &#39;324&#39;, &#39;total_tests&#39;: &#39;1,953,616&#39;, &#39;tests_per_1m_population&#39;: &#39;5,658,702&#39;}, {&#39;country_name&#39;: &#39;Maldives&#39;, &#39;cases&#39;: &#39;178,883&#39;, &#39;deaths&#39;: &#39;298&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;163,687&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;25&#39;, &#39;active_cases&#39;: &#39;14,898&#39;, &#39;total_cases_per_1m_population&#39;: &#39;320,737&#39;, &#39;deaths_per_1m_population&#39;: &#39;534&#39;, &#39;total_tests&#39;: &#39;2,213,831&#39;, &#39;tests_per_1m_population&#39;: &#39;3,969,395&#39;}, {&#39;country_name&#39;: &#39;Afghanistan&#39;, &#39;cases&#39;: &#39;178,689&#39;, &#39;deaths&#39;: &#39;7,682&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;161,748&#39;, &#39;new_deaths&#39;: &#39;1&#39;, &#39;new_cases&#39;: &#39;39&#39;, &#39;serious_critical&#39;: &#39;1,124&#39;, &#39;active_cases&#39;: &#39;9,259&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,411&#39;, &#39;deaths_per_1m_population&#39;: &#39;190&#39;, &#39;total_tests&#39;: &#39;940,341&#39;, &#39;tests_per_1m_population&#39;: &#39;23,212&#39;}, {&#39;country_name&#39;: &#39;Uganda&#39;, &#39;cases&#39;: &#39;164,069&#39;, &#39;deaths&#39;: &#39;3,596&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;100,205&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;2&#39;, &#39;active_cases&#39;: &#39;60,268&#39;, &#39;total_cases_per_1m_population&#39;: &#39;3,394&#39;, &#39;deaths_per_1m_population&#39;: &#39;74&#39;, &#39;total_tests&#39;: &#39;2,612,795&#39;, &#39;tests_per_1m_population&#39;: &#39;54,043&#39;}, {&#39;country_name&#39;: &#39;El Salvador&#39;, &#39;cases&#39;: &#39;162,089&#39;, &#39;deaths&#39;: &#39;4,127&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;150,662&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;8&#39;, &#39;active_cases&#39;: &#39;7,300&#39;, &#39;total_cases_per_1m_population&#39;: &#39;24,764&#39;, &#39;deaths_per_1m_population&#39;: &#39;631&#39;, &#39;total_tests&#39;: &#39;1,950,448&#39;, &#39;tests_per_1m_population&#39;: &#39;297,993&#39;}, {&#39;country_name&#39;: &#39;Ghana&#39;, &#39;cases&#39;: &#39;161,124&#39;, &#39;deaths&#39;: &#39;1,445&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;159,655&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;24&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,997&#39;, &#39;deaths_per_1m_population&#39;: &#39;45&#39;, &#39;total_tests&#39;: &#39;2,433,244&#39;, &#39;tests_per_1m_population&#39;: &#39;75,465&#39;}, {&#39;country_name&#39;: &#39;Namibia&#39;, &#39;cases&#39;: &#39;158,332&#39;, &#39;deaths&#39;: &#39;4,023&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;153,662&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;647&#39;, &#39;total_cases_per_1m_population&#39;: &#39;60,341&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,533&#39;, &#39;total_tests&#39;: &#39;1,001,354&#39;, &#39;tests_per_1m_population&#39;: &#39;381,621&#39;}, {&#39;country_name&#39;: &#39;Martinique&#39;, &#39;cases&#39;: &#39;147,519&#39;, &#39;deaths&#39;: &#39;918&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;104&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;8&#39;, &#39;active_cases&#39;: &#39;146,497&#39;, &#39;total_cases_per_1m_population&#39;: &#39;393,657&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,450&#39;, &#39;total_tests&#39;: &#39;828,928&#39;, &#39;tests_per_1m_population&#39;: &#39;2,212,008&#39;}, {&#39;country_name&#39;: &#39;Trinidad and Tobago&#39;, &#39;cases&#39;: &#39;144,359&#39;, &#39;deaths&#39;: &#39;3,812&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;133,604&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;18&#39;, &#39;active_cases&#39;: &#39;6,943&#39;, &#39;total_cases_per_1m_population&#39;: &#39;102,552&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,708&#39;, &#39;total_tests&#39;: &#39;696,148&#39;, &#39;tests_per_1m_population&#39;: &#39;494,540&#39;}, {&#39;country_name&#39;: &#39;Brunei&#39;, &#39;cases&#39;: &#39;141,014&#39;, &#39;deaths&#39;: &#39;218&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;139,724&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;2&#39;, &#39;active_cases&#39;: &#39;1,072&#39;, &#39;total_cases_per_1m_population&#39;: &#39;316,857&#39;, &#39;deaths_per_1m_population&#39;: &#39;490&#39;, &#39;total_tests&#39;: &#39;717,784&#39;, &#39;tests_per_1m_population&#39;: &#39;1,612,853&#39;}, {&#39;country_name&#39;: &#39;Guadeloupe&#39;, &#39;cases&#39;: &#39;140,130&#39;, &#39;deaths&#39;: &#39;854&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,250&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;19&#39;, &#39;active_cases&#39;: &#39;137,026&#39;, &#39;total_cases_per_1m_population&#39;: &#39;350,108&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,134&#39;, &#39;total_tests&#39;: &#39;938,039&#39;, &#39;tests_per_1m_population&#39;: &#39;2,343,644&#39;}, {&#39;country_name&#39;: &#39;Cambodia&#39;, &#39;cases&#39;: &#39;136,200&#39;, &#39;deaths&#39;: &#39;3,056&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;132,896&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;248&#39;, &#39;total_cases_per_1m_population&#39;: &#39;7,948&#39;, &#39;deaths_per_1m_population&#39;: &#39;178&#39;, &#39;total_tests&#39;: &#39;2,946,965&#39;, &#39;tests_per_1m_population&#39;: &#39;171,969&#39;}, {&#39;country_name&#39;: &#39;Rwanda&#39;, &#39;cases&#39;: &#39;129,764&#39;, &#39;deaths&#39;: &#39;1,458&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;45,522&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;82,784&#39;, &#39;total_cases_per_1m_population&#39;: &#39;9,590&#39;, &#39;deaths_per_1m_population&#39;: &#39;108&#39;, &#39;total_tests&#39;: &#39;5,225,494&#39;, &#39;tests_per_1m_population&#39;: &#39;386,173&#39;}, {&#39;country_name&#39;: &#39;Jamaica&#39;, &#39;cases&#39;: &#39;129,489&#39;, &#39;deaths&#39;: &#39;2,943&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;82,965&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;43,581&#39;, &#39;total_cases_per_1m_population&#39;: &#39;43,387&#39;, &#39;deaths_per_1m_population&#39;: &#39;986&#39;, &#39;total_tests&#39;: &#39;981,688&#39;, &#39;tests_per_1m_population&#39;: &#39;328,929&#39;}, {&#39;country_name&#39;: &#39;Cameroon&#39;, &#39;cases&#39;: &#39;119,780&#39;, &#39;deaths&#39;: &#39;1,927&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;117,791&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;13&#39;, &#39;active_cases&#39;: &#39;62&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,318&#39;, &#39;deaths_per_1m_population&#39;: &#39;69&#39;, &#39;total_tests&#39;: &#39;1,751,774&#39;, &#39;tests_per_1m_population&#39;: &#39;63,154&#39;}, {&#39;country_name&#39;: &#39;Angola&#39;, &#39;cases&#39;: &#39;99,194&#39;, &#39;deaths&#39;: &#39;1,900&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;97,149&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;145&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,858&#39;, &#39;deaths_per_1m_population&#39;: &#39;55&#39;, &#39;total_tests&#39;: &#39;1,499,795&#39;, &#39;tests_per_1m_population&#39;: &#39;43,209&#39;}, {&#39;country_name&#39;: &#39;Malta&#39;, &#39;cases&#39;: &#39;90,595&#39;, &#39;deaths&#39;: &#39;688&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;84,646&#39;, &#39;new_deaths&#39;: &#39;1&#39;, &#39;new_cases&#39;: &#39;196&#39;, &#39;serious_critical&#39;: &#39;4&#39;, &#39;active_cases&#39;: &#39;5,261&#39;, &#39;total_cases_per_1m_population&#39;: &#39;204,196&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,551&#39;, &#39;total_tests&#39;: &#39;1,872,465&#39;, &#39;tests_per_1m_population&#39;: &#39;4,220,438&#39;}, {&#39;country_name&#39;: &#39;DRC&#39;, &#39;cases&#39;: &#39;87,023&#39;, &#39;deaths&#39;: &#39;1,337&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;50,930&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;34,756&#39;, &#39;total_cases_per_1m_population&#39;: &#39;921&#39;, &#39;deaths_per_1m_population&#39;: &#39;14&#39;, &#39;total_tests&#39;: &#39;846,704&#39;, &#39;tests_per_1m_population&#39;: &#39;8,962&#39;}, {&#39;country_name&#39;: &#39;Senegal&#39;, &#39;cases&#39;: &#39;85,984&#39;, &#39;deaths&#39;: &#39;1,966&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;84,001&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;17&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,902&#39;, &#39;deaths_per_1m_population&#39;: &#39;112&#39;, &#39;total_tests&#39;: &#39;1,063,849&#39;, &#39;tests_per_1m_population&#39;: &#39;60,653&#39;}, {&#39;country_name&#39;: &#39;Malawi&#39;, &#39;cases&#39;: &#39;85,747&#39;, &#39;deaths&#39;: &#39;2,633&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;81,938&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;67&#39;, &#39;active_cases&#39;: &#39;1,176&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,283&#39;, &#39;deaths_per_1m_population&#39;: &#39;132&#39;, &#39;total_tests&#39;: &#39;571,585&#39;, &#39;tests_per_1m_population&#39;: &#39;28,548&#39;}, {&#39;country_name&#39;: &#39;Ivory Coast&#39;, &#39;cases&#39;: &#39;81,887&#39;, &#39;deaths&#39;: &#39;799&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;81,061&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;27&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,972&#39;, &#39;deaths_per_1m_population&#39;: &#39;29&#39;, &#39;total_tests&#39;: &#39;1,494,624&#39;, &#39;tests_per_1m_population&#39;: &#39;54,238&#39;}, {&#39;country_name&#39;: &#39;French Guiana&#39;, &#39;cases&#39;: &#39;80,422&#39;, &#39;deaths&#39;: &#39;394&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;11,254&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;68,774&#39;, &#39;total_cases_per_1m_population&#39;: &#39;257,228&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,260&#39;, &#39;total_tests&#39;: &#39;622,646&#39;, &#39;tests_per_1m_population&#39;: &#39;1,991,518&#39;}, {&#39;country_name&#39;: &#39;Suriname&#39;, &#39;cases&#39;: &#39;79,302&#39;, &#39;deaths&#39;: &#39;1,327&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;49,396&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;28,579&#39;, &#39;total_cases_per_1m_population&#39;: &#39;133,030&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,226&#39;, &#39;total_tests&#39;: &#39;235,824&#39;, &#39;tests_per_1m_population&#39;: &#39;395,598&#39;}, {&#39;country_name&#39;: &#39;Channel Islands&#39;, &#39;cases&#39;: &#39;73,609&#39;, &#39;deaths&#39;: &#39;166&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;72,059&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1,384&#39;, &#39;total_cases_per_1m_population&#39;: &#39;416,444&#39;, &#39;deaths_per_1m_population&#39;: &#39;939&#39;, &#39;total_tests&#39;: &#39;1,252,808&#39;, &#39;tests_per_1m_population&#39;: &#39;7,087,782&#39;}, {&#39;country_name&#39;: &#39;French Polynesia&#39;, &#39;cases&#39;: &#39;72,648&#39;, &#39;deaths&#39;: &#39;648&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;7&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;255,948&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,283&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Eswatini&#39;, &#39;cases&#39;: &#39;70,284&#39;, &#39;deaths&#39;: &#39;1,397&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;68,764&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;11&#39;, &#39;active_cases&#39;: &#39;123&#39;, &#39;total_cases_per_1m_population&#39;: &#39;59,470&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,182&#39;, &#39;total_tests&#39;: &#39;1,012,397&#39;, &#39;tests_per_1m_population&#39;: &#39;856,623&#39;}, {&#39;country_name&#39;: &#39;Barbados&#39;, &#39;cases&#39;: &#39;67,256&#39;, &#39;deaths&#39;: &#39;389&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;63,424&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;3,443&#39;, &#39;total_cases_per_1m_population&#39;: &#39;233,520&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,351&#39;, &#39;total_tests&#39;: &#39;640,085&#39;, &#39;tests_per_1m_population&#39;: &#39;2,222,440&#39;}, {&#39;country_name&#39;: &#39;Fiji&#39;, &#39;cases&#39;: &#39;64,524&#39;, &#39;deaths&#39;: &#39;862&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;62,677&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;985&#39;, &#39;total_cases_per_1m_population&#39;: &#39;71,048&#39;, &#39;deaths_per_1m_population&#39;: &#39;949&#39;, &#39;total_tests&#39;: &#39;506,642&#39;, &#39;tests_per_1m_population&#39;: &#39;557,871&#39;}, {&#39;country_name&#39;: &#39;Madagascar&#39;, &#39;cases&#39;: &#39;64,121&#39;, &#39;deaths&#39;: &#39;1,391&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;59,370&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;14&#39;, &#39;active_cases&#39;: &#39;3,360&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,213&#39;, &#39;deaths_per_1m_population&#39;: &#39;48&#39;, &#39;total_tests&#39;: &#39;418,849&#39;, &#39;tests_per_1m_population&#39;: &#39;14,455&#39;}, {&#39;country_name&#39;: &#39;Guyana&#39;, &#39;cases&#39;: &#39;63,413&#39;, &#39;deaths&#39;: &#39;1,228&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;62,092&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;93&#39;, &#39;total_cases_per_1m_population&#39;: &#39;79,925&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,548&#39;, &#39;total_tests&#39;: &#39;590,638&#39;, &#39;tests_per_1m_population&#39;: &#39;744,436&#39;}, {&#39;country_name&#39;: &#39;Sudan&#39;, &#39;cases&#39;: &#39;62,093&#39;, &#39;deaths&#39;: &#39;4,930&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;1,359&#39;, &#39;deaths_per_1m_population&#39;: &#39;108&#39;, &#39;total_tests&#39;: &#39;562,941&#39;, &#39;tests_per_1m_population&#39;: &#39;12,319&#39;}, {&#39;country_name&#39;: &#39;New Caledonia&#39;, &#39;cases&#39;: &#39;60,457&#39;, &#39;deaths&#39;: &#39;312&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;60,064&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;9&#39;, &#39;active_cases&#39;: &#39;81&#39;, &#39;total_cases_per_1m_population&#39;: &#39;208,148&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,074&#39;, &#39;total_tests&#39;: &#39;98,964&#39;, &#39;tests_per_1m_population&#39;: &#39;340,724&#39;}, {&#39;country_name&#39;: &#39;Mauritania&#39;, &#39;cases&#39;: &#39;58,683&#39;, &#39;deaths&#39;: &#39;982&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;57,693&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;8&#39;, &#39;total_cases_per_1m_population&#39;: &#39;12,050&#39;, &#39;deaths_per_1m_population&#39;: &#39;202&#39;, &#39;total_tests&#39;: &#39;799,187&#39;, &#39;tests_per_1m_population&#39;: &#39;164,099&#39;}, {&#39;country_name&#39;: &#39;Bhutan&#39;, &#39;cases&#39;: &#39;57,771&#39;, &#39;deaths&#39;: &#39;20&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;53,080&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;431&#39;, &#39;serious_critical&#39;: &#39;3&#39;, &#39;active_cases&#39;: &#39;4,671&#39;, &#39;total_cases_per_1m_population&#39;: &#39;73,412&#39;, &#39;deaths_per_1m_population&#39;: &#39;25&#39;, &#39;total_tests&#39;: &#39;2,284,301&#39;, &#39;tests_per_1m_population&#39;: &#39;2,902,749&#39;}, {&#39;country_name&#39;: &#39;Belize&#39;, &#39;cases&#39;: &#39;57,419&#39;, &#39;deaths&#39;: &#39;676&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;56,534&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;6&#39;, &#39;active_cases&#39;: &#39;209&#39;, &#39;total_cases_per_1m_population&#39;: &#39;139,823&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,646&#39;, &#39;total_tests&#39;: &#39;534,770&#39;, &#39;tests_per_1m_population&#39;: &#39;1,302,237&#39;}, {&#39;country_name&#39;: &#39;Taiwan&#39;, &#39;cases&#39;: &#39;56,468&#39;, &#39;deaths&#39;: &#39;856&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;23,729&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;5,172&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;31,883&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,363&#39;, &#39;deaths_per_1m_population&#39;: &#39;36&#39;, &#39;total_tests&#39;: &#39;14,289,370&#39;, &#39;tests_per_1m_population&#39;: &#39;598,017&#39;}, {&#39;country_name&#39;: &#39;Cabo Verde&#39;, &#39;cases&#39;: &#39;56,004&#39;, &#39;deaths&#39;: &#39;401&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;55,538&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;23&#39;, &#39;active_cases&#39;: &#39;65&#39;, &#39;total_cases_per_1m_population&#39;: &#39;98,792&#39;, &#39;deaths_per_1m_population&#39;: &#39;707&#39;, &#39;total_tests&#39;: &#39;400,982&#39;, &#39;tests_per_1m_population&#39;: &#39;707,340&#39;}, {&#39;country_name&#39;: &#39;Syria&#39;, &#39;cases&#39;: &#39;55,795&#39;, &#39;deaths&#39;: &#39;3,150&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;52,090&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;555&#39;, &#39;total_cases_per_1m_population&#39;: &#39;3,054&#39;, &#39;deaths_per_1m_population&#39;: &#39;172&#39;, &#39;total_tests&#39;: &#39;146,269&#39;, &#39;tests_per_1m_population&#39;: &#39;8,007&#39;}, {&#39;country_name&#39;: &#39;Gabon&#39;, &#39;cases&#39;: &#39;47,597&#39;, &#39;deaths&#39;: &#39;303&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;47,282&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;12&#39;, &#39;total_cases_per_1m_population&#39;: &#39;20,512&#39;, &#39;deaths_per_1m_population&#39;: &#39;131&#39;, &#39;total_tests&#39;: &#39;1,592,483&#39;, &#39;tests_per_1m_population&#39;: &#39;686,270&#39;}, {&#39;country_name&#39;: &#39;Papua New Guinea&#39;, &#39;cases&#39;: &#39;43,732&#39;, &#39;deaths&#39;: &#39;649&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;43,025&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;7&#39;, &#39;active_cases&#39;: &#39;58&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,726&#39;, &#39;deaths_per_1m_population&#39;: &#39;70&#39;, &#39;total_tests&#39;: &#39;249,149&#39;, &#39;tests_per_1m_population&#39;: &#39;26,927&#39;}, {&#39;country_name&#39;: &#39;Seychelles&#39;, &#39;cases&#39;: &#39;42,079&#39;, &#39;deaths&#39;: &#39;165&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;41,260&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;654&#39;, &#39;total_cases_per_1m_population&#39;: &#39;423,134&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,659&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Curaçao&#39;, &#39;cases&#39;: &#39;41,966&#39;, &#39;deaths&#39;: &#39;273&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;41,251&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;3&#39;, &#39;active_cases&#39;: &#39;442&#39;, &#39;total_cases_per_1m_population&#39;: &#39;253,872&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,652&#39;, &#39;total_tests&#39;: &#39;496,693&#39;, &#39;tests_per_1m_population&#39;: &#39;3,004,725&#39;}, {&#39;country_name&#39;: &#39;Andorra&#39;, &#39;cases&#39;: &#39;41,013&#39;, &#39;deaths&#39;: &#39;153&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;40,343&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;14&#39;, &#39;active_cases&#39;: &#39;517&#39;, &#39;total_cases_per_1m_population&#39;: &#39;529,282&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,974&#39;, &#39;total_tests&#39;: &#39;249,838&#39;, &#39;tests_per_1m_population&#39;: &#39;3,224,215&#39;}, {&#39;country_name&#39;: &#39;Burundi&#39;, &#39;cases&#39;: &#39;38,887&#39;, &#39;deaths&#39;: &#39;38&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;773&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;38,076&#39;, &#39;total_cases_per_1m_population&#39;: &#39;3,104&#39;, &#39;deaths_per_1m_population&#39;: &#39;3&#39;, &#39;total_tests&#39;: &#39;345,742&#39;, &#39;tests_per_1m_population&#39;: &#39;27,594&#39;}, {&#39;country_name&#39;: &#39;Mauritius&#39;, &#39;cases&#39;: &#39;37,656&#39;, &#39;deaths&#39;: &#39;990&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;35,656&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1,010&#39;, &#39;total_cases_per_1m_population&#39;: &#39;29,521&#39;, &#39;deaths_per_1m_population&#39;: &#39;776&#39;, &#39;total_tests&#39;: &#39;358,675&#39;, &#39;tests_per_1m_population&#39;: &#39;281,186&#39;}, {&#39;country_name&#39;: &#39;Mayotte&#39;, &#39;cases&#39;: &#39;37,038&#39;, &#39;deaths&#39;: &#39;187&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,964&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;33,887&#39;, &#39;total_cases_per_1m_population&#39;: &#39;130,099&#39;, &#39;deaths_per_1m_population&#39;: &#39;657&#39;, &#39;total_tests&#39;: &#39;176,919&#39;, &#39;tests_per_1m_population&#39;: &#39;621,442&#39;}, {&#39;country_name&#39;: &#39;Togo&#39;, &#39;cases&#39;: &#39;36,977&#39;, &#39;deaths&#39;: &#39;273&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;36,679&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;25&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,285&#39;, &#39;deaths_per_1m_population&#39;: &#39;32&#39;, &#39;total_tests&#39;: &#39;727,740&#39;, &#39;tests_per_1m_population&#39;: &#39;84,338&#39;}, {&#39;country_name&#39;: &#39;Guinea&#39;, &#39;cases&#39;: &#39;36,459&#39;, &#39;deaths&#39;: &#39;440&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;35,976&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;8&#39;, &#39;active_cases&#39;: &#39;43&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,647&#39;, &#39;deaths_per_1m_population&#39;: &#39;32&#39;, &#39;total_tests&#39;: &#39;660,107&#39;, &#39;tests_per_1m_population&#39;: &#39;47,919&#39;}, {&#39;country_name&#39;: &#39;Faeroe Islands&#39;, &#39;cases&#39;: &#39;34,658&#39;, &#39;deaths&#39;: &#39;28&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7,693&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;5&#39;, &#39;active_cases&#39;: &#39;26,937&#39;, &#39;total_cases_per_1m_population&#39;: &#39;704,460&#39;, &#39;deaths_per_1m_population&#39;: &#39;569&#39;, &#39;total_tests&#39;: &#39;778,000&#39;, &#39;tests_per_1m_population&#39;: &#39;15,813,651&#39;}, {&#39;country_name&#39;: &#39;Aruba&#39;, &#39;cases&#39;: &#39;34,589&#39;, &#39;deaths&#39;: &#39;212&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;34,251&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;2&#39;, &#39;active_cases&#39;: &#39;126&#39;, &#39;total_cases_per_1m_population&#39;: &#39;321,507&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,971&#39;, &#39;total_tests&#39;: &#39;177,885&#39;, &#39;tests_per_1m_population&#39;: &#39;1,653,452&#39;}, {&#39;country_name&#39;: &#39;Tanzania&#39;, &#39;cases&#39;: &#39;33,864&#39;, &#39;deaths&#39;: &#39;803&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;7&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;539&#39;, &#39;deaths_per_1m_population&#39;: &#39;13&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Bahamas&#39;, &#39;cases&#39;: &#39;33,463&#39;, &#39;deaths&#39;: &#39;789&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;32,310&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;11&#39;, &#39;active_cases&#39;: &#39;364&#39;, &#39;total_cases_per_1m_population&#39;: &#39;83,652&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,972&#39;, &#39;total_tests&#39;: &#39;229,817&#39;, &#39;tests_per_1m_population&#39;: &#39;574,504&#39;}, {&#39;country_name&#39;: &#39;Lesotho&#39;, &#39;cases&#39;: &#39;32,910&#39;, &#39;deaths&#39;: &#39;697&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;24,155&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;8,058&#39;, &#39;total_cases_per_1m_population&#39;: &#39;15,146&#39;, &#39;deaths_per_1m_population&#39;: &#39;321&#39;, &#39;total_tests&#39;: &#39;431,221&#39;, &#39;tests_per_1m_population&#39;: &#39;198,454&#39;}, {&#39;country_name&#39;: &#39;Mali&#39;, &#39;cases&#39;: &#39;30,727&#39;, &#39;deaths&#39;: &#39;731&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;29,795&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;201&#39;, &#39;total_cases_per_1m_population&#39;: &#39;1,442&#39;, &#39;deaths_per_1m_population&#39;: &#39;34&#39;, &#39;total_tests&#39;: &#39;663,805&#39;, &#39;tests_per_1m_population&#39;: &#39;31,160&#39;}, {&#39;country_name&#39;: &#39;Haiti&#39;, &#39;cases&#39;: &#39;30,640&#39;, &#39;deaths&#39;: &#39;835&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;29,389&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;416&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,629&#39;, &#39;deaths_per_1m_population&#39;: &#39;72&#39;, &#39;total_tests&#39;: &#39;132,422&#39;, &#39;tests_per_1m_population&#39;: &#39;11,363&#39;}, {&#39;country_name&#39;: &#39;Isle of Man&#39;, &#39;cases&#39;: &#39;28,416&#39;, &#39;deaths&#39;: &#39;87&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;26,794&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1,535&#39;, &#39;total_cases_per_1m_population&#39;: &#39;331,015&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,013&#39;, &#39;total_tests&#39;: &#39;150,753&#39;, &#39;tests_per_1m_population&#39;: &#39;1,756,107&#39;}, {&#39;country_name&#39;: &#39;Benin&#39;, &#39;cases&#39;: &#39;26,952&#39;, &#39;deaths&#39;: &#39;163&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;25,506&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;5&#39;, &#39;active_cases&#39;: &#39;1,283&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,123&#39;, &#39;deaths_per_1m_population&#39;: &#39;13&#39;, &#39;total_tests&#39;: &#39;604,310&#39;, &#39;tests_per_1m_population&#39;: &#39;47,598&#39;}, {&#39;country_name&#39;: &#39;Somalia&#39;, &#39;cases&#39;: &#39;26,485&#39;, &#39;deaths&#39;: &#39;1,350&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;13,182&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;11,953&#39;, &#39;total_cases_per_1m_population&#39;: &#39;1,587&#39;, &#39;deaths_per_1m_population&#39;: &#39;81&#39;, &#39;total_tests&#39;: &#39;400,466&#39;, &#39;tests_per_1m_population&#39;: &#39;23,990&#39;}, {&#39;country_name&#39;: &#39;Congo&#39;, &#39;cases&#39;: &#39;24,079&#39;, &#39;deaths&#39;: &#39;385&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;20,178&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;3,516&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,178&#39;, &#39;deaths_per_1m_population&#39;: &#39;67&#39;, &#39;total_tests&#39;: &#39;347,815&#39;, &#39;tests_per_1m_population&#39;: &#39;60,352&#39;}, {&#39;country_name&#39;: &#39;Saint Lucia&#39;, &#39;cases&#39;: &#39;23,239&#39;, &#39;deaths&#39;: &#39;368&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;22,736&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;135&#39;, &#39;total_cases_per_1m_population&#39;: &#39;125,520&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,988&#39;, &#39;total_tests&#39;: &#39;142,630&#39;, &#39;tests_per_1m_population&#39;: &#39;770,382&#39;}, {&#39;country_name&#39;: &#39;Timor-Leste&#39;, &#39;cases&#39;: &#39;22,860&#39;, &#39;deaths&#39;: &#39;130&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;22,714&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;16&#39;, &#39;total_cases_per_1m_population&#39;: &#39;16,762&#39;, &#39;deaths_per_1m_population&#39;: &#39;95&#39;, &#39;total_tests&#39;: &#39;261,007&#39;, &#39;tests_per_1m_population&#39;: &#39;191,388&#39;}, {&#39;country_name&#39;: &#39;Cayman Islands&#39;, &#39;cases&#39;: &#39;21,755&#39;, &#39;deaths&#39;: &#39;26&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;8,553&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;13,176&#39;, &#39;total_cases_per_1m_population&#39;: &#39;324,145&#39;, &#39;deaths_per_1m_population&#39;: &#39;387&#39;, &#39;total_tests&#39;: &#39;222,773&#39;, &#39;tests_per_1m_population&#39;: &#39;3,319,273&#39;}, {&#39;country_name&#39;: &#39;Burkina Faso&#39;, &#39;cases&#39;: &#39;20,853&#39;, &#39;deaths&#39;: &#39;382&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;20,439&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;32&#39;, &#39;total_cases_per_1m_population&#39;: &#39;951&#39;, &#39;deaths_per_1m_population&#39;: &#39;17&#39;, &#39;total_tests&#39;: &#39;248,995&#39;, &#39;tests_per_1m_population&#39;: &#39;11,350&#39;}, {&#39;country_name&#39;: &#39;Nicaragua&#39;, &#39;cases&#39;: &#39;18,491&#39;, &#39;deaths&#39;: &#39;225&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;4,225&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;14,041&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,733&#39;, &#39;deaths_per_1m_population&#39;: &#39;33&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Gibraltar&#39;, &#39;cases&#39;: &#39;17,706&#39;, &#39;deaths&#39;: &#39;102&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;16,579&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1,025&#39;, &#39;total_cases_per_1m_population&#39;: &#39;525,822&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,029&#39;, &#39;total_tests&#39;: &#39;534,283&#39;, &#39;tests_per_1m_population&#39;: &#39;15,866,807&#39;}, {&#39;country_name&#39;: &#39;South Sudan&#39;, &#39;cases&#39;: &#39;17,422&#39;, &#39;deaths&#39;: &#39;138&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;13,514&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;3,770&#39;, &#39;total_cases_per_1m_population&#39;: &#39;1,524&#39;, &#39;deaths_per_1m_population&#39;: &#39;12&#39;, &#39;total_tests&#39;: &#39;376,391&#39;, &#39;tests_per_1m_population&#39;: &#39;32,928&#39;}, {&#39;country_name&#39;: &#39;Tajikistan&#39;, &#39;cases&#39;: &#39;17,388&#39;, &#39;deaths&#39;: &#39;124&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;17,264&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;0&#39;, &#39;total_cases_per_1m_population&#39;: &#39;1,752&#39;, &#39;deaths_per_1m_population&#39;: &#39;12&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Liechtenstein&#39;, &#39;cases&#39;: &#39;17,103&#39;, &#39;deaths&#39;: &#39;85&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;16,831&#39;, &#39;new_deaths&#39;: &#39;1&#39;, &#39;new_cases&#39;: &#39;12&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;187&#39;, &#39;total_cases_per_1m_population&#39;: &#39;446,251&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,218&#39;, &#39;total_tests&#39;: &#39;102,174&#39;, &#39;tests_per_1m_population&#39;: &#39;2,665,919&#39;}, {&#39;country_name&#39;: &#39;San Marino&#39;, &#39;cases&#39;: &#39;16,140&#39;, &#39;deaths&#39;: &#39;114&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;15,662&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;4&#39;, &#39;active_cases&#39;: &#39;364&#39;, &#39;total_cases_per_1m_population&#39;: &#39;473,870&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,347&#39;, &#39;total_tests&#39;: &#39;149,271&#39;, &#39;tests_per_1m_population&#39;: &#39;4,382,590&#39;}, {&#39;country_name&#39;: &#39;Equatorial Guinea&#39;, &#39;cases&#39;: &#39;15,907&#39;, &#39;deaths&#39;: &#39;183&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;15,698&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;5&#39;, &#39;active_cases&#39;: &#39;26&#39;, &#39;total_cases_per_1m_population&#39;: &#39;10,704&#39;, &#39;deaths_per_1m_population&#39;: &#39;123&#39;, &#39;total_tests&#39;: &#39;310,972&#39;, &#39;tests_per_1m_population&#39;: &#39;209,251&#39;}, {&#39;country_name&#39;: &#39;Djibouti&#39;, &#39;cases&#39;: &#39;15,611&#39;, &#39;deaths&#39;: &#39;189&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;15,411&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;11&#39;, &#39;total_cases_per_1m_population&#39;: &#39;15,396&#39;, &#39;deaths_per_1m_population&#39;: &#39;186&#39;, &#39;total_tests&#39;: &#39;303,924&#39;, &#39;tests_per_1m_population&#39;: &#39;299,748&#39;}, {&#39;country_name&#39;: &#39;CAR&#39;, &#39;cases&#39;: &#39;14,649&#39;, &#39;deaths&#39;: &#39;113&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;6,859&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;2&#39;, &#39;active_cases&#39;: &#39;7,677&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,941&#39;, &#39;deaths_per_1m_population&#39;: &#39;23&#39;, &#39;total_tests&#39;: &#39;81,294&#39;, &#39;tests_per_1m_population&#39;: &#39;16,320&#39;}, {&#39;country_name&#39;: &#39;Grenada&#39;, &#39;cases&#39;: &#39;14,428&#39;, &#39;deaths&#39;: &#39;220&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;13,945&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;4&#39;, &#39;active_cases&#39;: &#39;263&#39;, &#39;total_cases_per_1m_population&#39;: &#39;127,159&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,939&#39;, &#39;total_tests&#39;: &#39;148,567&#39;, &#39;tests_per_1m_population&#39;: &#39;1,309,376&#39;}, {&#39;country_name&#39;: &#39;Bermuda&#39;, &#39;cases&#39;: &#39;13,143&#39;, &#39;deaths&#39;: &#39;131&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;12,719&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;293&#39;, &#39;total_cases_per_1m_population&#39;: &#39;212,453&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,118&#39;, &#39;total_tests&#39;: &#39;866,313&#39;, &#39;tests_per_1m_population&#39;: &#39;14,003,734&#39;}, {&#39;country_name&#39;: &#39;Solomon Islands&#39;, &#39;cases&#39;: &#39;12,437&#39;, &#39;deaths&#39;: &#39;139&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;11,194&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;2&#39;, &#39;active_cases&#39;: &#39;1,104&#39;, &#39;total_cases_per_1m_population&#39;: &#39;17,339&#39;, &#39;deaths_per_1m_population&#39;: &#39;194&#39;, &#39;total_tests&#39;: &#39;5,117&#39;, &#39;tests_per_1m_population&#39;: &#39;7,134&#39;}, {&#39;country_name&#39;: &#39;Dominica&#39;, &#39;cases&#39;: &#39;12,011&#39;, &#39;deaths&#39;: &#39;63&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;11,926&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;22&#39;, &#39;total_cases_per_1m_population&#39;: &#39;166,107&#39;, &#39;deaths_per_1m_population&#39;: &#39;871&#39;, &#39;total_tests&#39;: &#39;187,690&#39;, &#39;tests_per_1m_population&#39;: &#39;2,595,666&#39;}, {&#39;country_name&#39;: &#39;Gambia&#39;, &#39;cases&#39;: &#39;11,995&#39;, &#39;deaths&#39;: &#39;365&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;11,591&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;39&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,724&#39;, &#39;deaths_per_1m_population&#39;: &#39;144&#39;, &#39;total_tests&#39;: &#39;155,686&#39;, &#39;tests_per_1m_population&#39;: &#39;61,314&#39;}, {&#39;country_name&#39;: &#39;Greenland&#39;, &#39;cases&#39;: &#39;11,971&#39;, &#39;deaths&#39;: &#39;21&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,761&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;4&#39;, &#39;active_cases&#39;: &#39;9,189&#39;, &#39;total_cases_per_1m_population&#39;: &#39;210,209&#39;, &#39;deaths_per_1m_population&#39;: &#39;369&#39;, &#39;total_tests&#39;: &#39;164,926&#39;, &#39;tests_per_1m_population&#39;: &#39;2,896,081&#39;}, {&#39;country_name&#39;: &#39;Yemen&#39;, &#39;cases&#39;: &#39;11,818&#39;, &#39;deaths&#39;: &#39;2,148&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;9,001&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;23&#39;, &#39;active_cases&#39;: &#39;669&#39;, &#39;total_cases_per_1m_population&#39;: &#39;381&#39;, &#39;deaths_per_1m_population&#39;: &#39;69&#39;, &#39;total_tests&#39;: &#39;265,253&#39;, &#39;tests_per_1m_population&#39;: &#39;8,553&#39;}, {&#39;country_name&#39;: &#39;Monaco&#39;, &#39;cases&#39;: &#39;11,604&#39;, &#39;deaths&#39;: &#39;54&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;11,362&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;4&#39;, &#39;active_cases&#39;: &#39;188&#39;, &#39;total_cases_per_1m_population&#39;: &#39;291,969&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,359&#39;, &#39;total_tests&#39;: &#39;54,960&#39;, &#39;tests_per_1m_population&#39;: &#39;1,382,850&#39;}, {&#39;country_name&#39;: &#39;Saint Martin&#39;, &#39;cases&#39;: &#39;10,279&#39;, &#39;deaths&#39;: &#39;63&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,399&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;7&#39;, &#39;active_cases&#39;: &#39;8,817&#39;, &#39;total_cases_per_1m_population&#39;: &#39;257,903&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,581&#39;, &#39;total_tests&#39;: &#39;112,382&#39;, &#39;tests_per_1m_population&#39;: &#39;2,819,701&#39;}, {&#39;country_name&#39;: &#39;Sint Maarten&#39;, &#39;cases&#39;: &#39;9,990&#39;, &#39;deaths&#39;: &#39;86&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;9,841&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;10&#39;, &#39;active_cases&#39;: &#39;63&#39;, &#39;total_cases_per_1m_population&#39;: &#39;228,317&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,965&#39;, &#39;total_tests&#39;: &#39;62,056&#39;, &#39;tests_per_1m_population&#39;: &#39;1,418,261&#39;}, {&#39;country_name&#39;: &#39;Eritrea&#39;, &#39;cases&#39;: &#39;9,733&#39;, &#39;deaths&#39;: &#39;103&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;9,629&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,678&#39;, &#39;deaths_per_1m_population&#39;: &#39;28&#39;, &#39;total_tests&#39;: &#39;23,693&#39;, &#39;tests_per_1m_population&#39;: &#39;6,518&#39;}, {&#39;country_name&#39;: &#39;Caribbean Netherlands&#39;, &#39;cases&#39;: &#39;9,592&#39;, &#39;deaths&#39;: &#39;34&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;9,392&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;166&#39;, &#39;total_cases_per_1m_population&#39;: &#39;359,749&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,275&#39;, &#39;total_tests&#39;: &#39;30,126&#39;, &#39;tests_per_1m_population&#39;: &#39;1,129,880&#39;}, {&#39;country_name&#39;: &#39;Tonga&#39;, &#39;cases&#39;: &#39;9,553&#39;, &#39;deaths&#39;: &#39;11&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;8,306&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1,236&#39;, &#39;total_cases_per_1m_population&#39;: &#39;88,571&#39;, &#39;deaths_per_1m_population&#39;: &#39;102&#39;, &#39;total_tests&#39;: &#39;408,213&#39;, &#39;tests_per_1m_population&#39;: &#39;3,784,761&#39;}, {&#39;country_name&#39;: &#39;Niger&#39;, &#39;cases&#39;: &#39;8,914&#39;, &#39;deaths&#39;: &#39;309&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;8,507&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;98&#39;, &#39;total_cases_per_1m_population&#39;: &#39;346&#39;, &#39;deaths_per_1m_population&#39;: &#39;12&#39;, &#39;total_tests&#39;: &#39;249,026&#39;, &#39;tests_per_1m_population&#39;: &#39;9,657&#39;}, {&#39;country_name&#39;: &#39;Guinea-Bissau&#39;, &#39;cases&#39;: &#39;8,185&#39;, &#39;deaths&#39;: &#39;171&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7,515&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;6&#39;, &#39;active_cases&#39;: &#39;499&#39;, &#39;total_cases_per_1m_population&#39;: &#39;3,989&#39;, &#39;deaths_per_1m_population&#39;: &#39;83&#39;, &#39;total_tests&#39;: &#39;132,611&#39;, &#39;tests_per_1m_population&#39;: &#39;64,628&#39;}, {&#39;country_name&#39;: &#39;Comoros&#39;, &#39;cases&#39;: &#39;8,100&#39;, &#39;deaths&#39;: &#39;160&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7,933&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;7&#39;, &#39;total_cases_per_1m_population&#39;: &#39;8,970&#39;, &#39;deaths_per_1m_population&#39;: &#39;177&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Sierra Leone&#39;, &#39;cases&#39;: &#39;7,681&#39;, &#39;deaths&#39;: &#39;125&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;929&#39;, &#39;deaths_per_1m_population&#39;: &#39;15&#39;, &#39;total_tests&#39;: &#39;259,958&#39;, &#39;tests_per_1m_population&#39;: &#39;31,435&#39;}, {&#39;country_name&#39;: &#39;Antigua and Barbuda&#39;, &#39;cases&#39;: &#39;7,571&#39;, &#39;deaths&#39;: &#39;135&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7,402&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;34&#39;, &#39;total_cases_per_1m_population&#39;: &#39;76,172&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,358&#39;, &#39;total_tests&#39;: &#39;18,901&#39;, &#39;tests_per_1m_population&#39;: &#39;190,164&#39;}, {&#39;country_name&#39;: &#39;Liberia&#39;, &#39;cases&#39;: &#39;7,432&#39;, &#39;deaths&#39;: &#39;294&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,747&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;2&#39;, &#39;active_cases&#39;: &#39;1,391&#39;, &#39;total_cases_per_1m_population&#39;: &#39;1,410&#39;, &#39;deaths_per_1m_population&#39;: &#39;56&#39;, &#39;total_tests&#39;: &#39;139,824&#39;, &#39;tests_per_1m_population&#39;: &#39;26,521&#39;}, {&#39;country_name&#39;: &#39;Chad&#39;, &#39;cases&#39;: &#39;7,396&#39;, &#39;deaths&#39;: &#39;193&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;4,874&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;2,329&#39;, &#39;total_cases_per_1m_population&#39;: &#39;428&#39;, &#39;deaths_per_1m_population&#39;: &#39;11&#39;, &#39;total_tests&#39;: &#39;191,341&#39;, &#39;tests_per_1m_population&#39;: &#39;11,075&#39;}, {&#39;country_name&#39;: &#39;Samoa&#39;, &#39;cases&#39;: &#39;7,185&#39;, &#39;deaths&#39;: &#39;13&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,605&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;3&#39;, &#39;active_cases&#39;: &#39;5,567&#39;, &#39;total_cases_per_1m_population&#39;: &#39;35,783&#39;, &#39;deaths_per_1m_population&#39;: &#39;65&#39;, &#39;total_tests&#39;: &#39;53,893&#39;, &#39;tests_per_1m_population&#39;: &#39;268,399&#39;}, {&#39;country_name&#39;: &#39;Vanuatu&#39;, &#39;cases&#39;: &#39;6,793&#39;, &#39;deaths&#39;: &#39;12&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,991&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;5&#39;, &#39;active_cases&#39;: &#39;790&#39;, &#39;total_cases_per_1m_population&#39;: &#39;21,222&#39;, &#39;deaths_per_1m_population&#39;: &#39;37&#39;, &#39;total_tests&#39;: &#39;24,976&#39;, &#39;tests_per_1m_population&#39;: &#39;78,027&#39;}, {&#39;country_name&#39;: &#39;St. Vincent Grenadines&#39;, &#39;cases&#39;: &#39;6,779&#39;, &#39;deaths&#39;: &#39;106&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;6,641&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;32&#39;, &#39;total_cases_per_1m_population&#39;: &#39;60,757&#39;, &#39;deaths_per_1m_population&#39;: &#39;950&#39;, &#39;total_tests&#39;: &#39;98,860&#39;, &#39;tests_per_1m_population&#39;: &#39;886,033&#39;}, {&#39;country_name&#39;: &#39;British Virgin Islands&#39;, &#39;cases&#39;: &#39;6,296&#39;, &#39;deaths&#39;: &#39;62&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;205,792&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,027&#39;, &#39;total_tests&#39;: &#39;102,862&#39;, &#39;tests_per_1m_population&#39;: &#39;3,362,163&#39;}, {&#39;country_name&#39;: &#39;Sao Tome and Principe&#39;, &#39;cases&#39;: &#39;5,953&#39;, &#39;deaths&#39;: &#39;73&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,875&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;5&#39;, &#39;total_cases_per_1m_population&#39;: &#39;26,282&#39;, &#39;deaths_per_1m_population&#39;: &#39;322&#39;, &#39;total_tests&#39;: &#39;29,036&#39;, &#39;tests_per_1m_population&#39;: &#39;128,193&#39;}, {&#39;country_name&#39;: &#39;Turks and Caicos&#39;, &#39;cases&#39;: &#39;5,941&#39;, &#39;deaths&#39;: &#39;36&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,862&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;4&#39;, &#39;active_cases&#39;: &#39;43&#39;, &#39;total_cases_per_1m_population&#39;: &#39;149,791&#39;, &#39;deaths_per_1m_population&#39;: &#39;908&#39;, &#39;total_tests&#39;: &#39;478,593&#39;, &#39;tests_per_1m_population&#39;: &#39;12,066,789&#39;}, {&#39;country_name&#39;: &#39;Saint Kitts and Nevis&#39;, &#39;cases&#39;: &#39;5,561&#39;, &#39;deaths&#39;: &#39;43&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,517&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1&#39;, &#39;total_cases_per_1m_population&#39;: &#39;103,215&#39;, &#39;deaths_per_1m_population&#39;: &#39;798&#39;, &#39;total_tests&#39;: &#39;65,141&#39;, &#39;tests_per_1m_population&#39;: &#39;1,209,046&#39;}, {&#39;country_name&#39;: &#39;Cook Islands&#39;, &#39;cases&#39;: &#39;4,727&#39;, &#39;deaths&#39;: &#39;0&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,990&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;737&#39;, &#39;total_cases_per_1m_population&#39;: &#39;268,686&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;15,740&#39;, &#39;tests_per_1m_population&#39;: &#39;894,674&#39;}, {&#39;country_name&#39;: &#39;St. Barth&#39;, &#39;cases&#39;: &#39;4,432&#39;, &#39;deaths&#39;: &#39;6&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;446,279&#39;, &#39;deaths_per_1m_population&#39;: &#39;604&#39;, &#39;total_tests&#39;: &#39;78,646&#39;, &#39;tests_per_1m_population&#39;: &#39;7,919,243&#39;}, {&#39;country_name&#39;: &#39;Palau&#39;, &#39;cases&#39;: &#39;4,396&#39;, &#39;deaths&#39;: &#39;6&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,879&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;511&#39;, &#39;total_cases_per_1m_population&#39;: &#39;240,877&#39;, &#39;deaths_per_1m_population&#39;: &#39;329&#39;, &#39;total_tests&#39;: &#39;45,500&#39;, &#39;tests_per_1m_population&#39;: &#39;2,493,151&#39;}, {&#39;country_name&#39;: &#39;Kiribati&#39;, &#39;cases&#39;: &#39;3,076&#39;, &#39;deaths&#39;: &#39;13&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,597&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;3&#39;, &#39;active_cases&#39;: &#39;466&#39;, &#39;total_cases_per_1m_population&#39;: &#39;25,058&#39;, &#39;deaths_per_1m_population&#39;: &#39;106&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Anguilla&#39;, &#39;cases&#39;: &#39;2,731&#39;, &#39;deaths&#39;: &#39;9&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,716&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;4&#39;, &#39;active_cases&#39;: &#39;6&#39;, &#39;total_cases_per_1m_population&#39;: &#39;179,141&#39;, &#39;deaths_per_1m_population&#39;: &#39;590&#39;, &#39;total_tests&#39;: &#39;51,382&#39;, &#39;tests_per_1m_population&#39;: &#39;3,370,417&#39;}, {&#39;country_name&#39;: &#39;Saint Pierre Miquelon&#39;, &#39;cases&#39;: &#39;2,641&#39;, &#39;deaths&#39;: &#39;1&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,449&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;191&#39;, &#39;total_cases_per_1m_population&#39;: &#39;459,864&#39;, &#39;deaths_per_1m_population&#39;: &#39;174&#39;, &#39;total_tests&#39;: &#39;22,941&#39;, &#39;tests_per_1m_population&#39;: &#39;3,994,602&#39;}, {&#39;country_name&#39;: &#39;Diamond Princess&#39;, &#39;cases&#39;: &#39;712&#39;, &#39;deaths&#39;: &#39;13&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;699&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;0&#39;, &#39;total_cases_per_1m_population&#39;: &#39;0&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Wallis and Futuna&#39;, &#39;cases&#39;: &#39;454&#39;, &#39;deaths&#39;: &#39;7&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;438&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;9&#39;, &#39;total_cases_per_1m_population&#39;: &#39;41,713&#39;, &#39;deaths_per_1m_population&#39;: &#39;643&#39;, &#39;total_tests&#39;: &#39;20,508&#39;, &#39;tests_per_1m_population&#39;: &#39;1,884,234&#39;}, {&#39;country_name&#39;: &#39;Montserrat&#39;, &#39;cases&#39;: &#39;183&#39;, &#39;deaths&#39;: &#39;2&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;174&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;7&#39;, &#39;total_cases_per_1m_population&#39;: &#39;36,622&#39;, &#39;deaths_per_1m_population&#39;: &#39;400&#39;, &#39;total_tests&#39;: &#39;9,700&#39;, &#39;tests_per_1m_population&#39;: &#39;1,941,165&#39;}, {&#39;country_name&#39;: &#39;Falkland Islands&#39;, &#39;cases&#39;: &#39;128&#39;, &#39;deaths&#39;: &#39;0&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;34,944&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;8,632&#39;, &#39;tests_per_1m_population&#39;: &#39;2,356,538&#39;}, {&#39;country_name&#39;: &#39;Macao&#39;, &#39;cases&#39;: &#39;82&#39;, &#39;deaths&#39;: &#39;0&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;82&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;0&#39;, &#39;total_cases_per_1m_population&#39;: &#39;123&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;5,375&#39;, &#39;tests_per_1m_population&#39;: &#39;8,079&#39;}, {&#39;country_name&#39;: &#39;Vatican City&#39;, &#39;cases&#39;: &#39;29&#39;, &#39;deaths&#39;: &#39;0&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;29&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;0&#39;, &#39;total_cases_per_1m_population&#39;: &#39;36,025&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Marshall Islands&#39;, &#39;cases&#39;: &#39;15&#39;, &#39;deaths&#39;: &#39;0&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;8&#39;, &#39;total_cases_per_1m_population&#39;: &#39;250&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Western Sahara&#39;, &#39;cases&#39;: &#39;10&#39;, &#39;deaths&#39;: &#39;1&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;9&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;0&#39;, &#39;total_cases_per_1m_population&#39;: &#39;16&#39;, &#39;deaths_per_1m_population&#39;: &#39;2&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;MS Zaandam&#39;, &#39;cases&#39;: &#39;9&#39;, &#39;deaths&#39;: &#39;2&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;0&#39;, &#39;total_cases_per_1m_population&#39;: &#39;0&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Niue&#39;, &#39;cases&#39;: &#39;8&#39;, &#39;deaths&#39;: &#39;0&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,860&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Nauru&#39;, &#39;cases&#39;: &#39;3&#39;, &#39;deaths&#39;: &#39;0&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;0&#39;, &#39;total_cases_per_1m_population&#39;: &#39;274&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Saint Helena&#39;, &#39;cases&#39;: &#39;2&#39;, &#39;deaths&#39;: &#39;0&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;0&#39;, &#39;total_cases_per_1m_population&#39;: &#39;327&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Micronesia&#39;, &#39;cases&#39;: &#39;1&#39;, &#39;deaths&#39;: &#39;0&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;0&#39;, &#39;total_cases_per_1m_population&#39;: &#39;9&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}], &#39;statistic_taken_at&#39;: &#39;2022-04-24 11:18:01&#39;, &#39;world_total&#39;: {&#39;total_cases&#39;: &#39;509,268,964&#39;, &#39;new_cases&#39;: &#39;204,268&#39;, &#39;total_deaths&#39;: &#39;6,242,509&#39;, &#39;new_deaths&#39;: &#39;630&#39;, &#39;total_recovered&#39;: &#39;461,827,849&#39;, &#39;active_cases&#39;: &#39;41,198,606&#39;, &#39;serious_critical&#39;: &#39;42,510&#39;, &#39;total_cases_per_1m_population&#39;: &#39;65,334&#39;, &#39;deaths_per_1m_population&#39;: &#39;800.9&#39;, &#39;statistic_taken_at&#39;: &#39;2022-04-24 11:18:01&#39;}} World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . import requests url = &quot;https://airport-info.p.rapidapi.com/airport&quot; querystring = {&quot;iata&quot;:&quot;LAX&quot;,&quot;icao&quot;:&quot;KLAX&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;b558955759msh32134753facfdd1p133021jsncf26cd31822e&quot;, &quot;X-RapidAPI-Host&quot;: &quot;airport-info.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) . {&#34;id&#34;:4044,&#34;iata&#34;:&#34;LAX&#34;,&#34;icao&#34;:&#34;KLAX&#34;,&#34;name&#34;:&#34;Los Angeles International Airport&#34;,&#34;location&#34;:&#34;Los Angeles, California, United States&#34;,&#34;street_number&#34;:&#34;1&#34;,&#34;street&#34;:&#34;World Way&#34;,&#34;city&#34;:&#34;Los Angeles&#34;,&#34;county&#34;:&#34;Los Angeles County&#34;,&#34;state&#34;:&#34;California&#34;,&#34;country_iso&#34;:&#34;US&#34;,&#34;country&#34;:&#34;United States&#34;,&#34;postal_code&#34;:&#34;90045&#34;,&#34;phone&#34;:&#34;+1 855-463-5252&#34;,&#34;latitude&#34;:33.94159,&#34;longitude&#34;:-118.40853,&#34;uct&#34;:-420,&#34;website&#34;:&#34;http://www.lawa.org/welcomelax.aspx&#34;} . import requests url = &quot;https://airport-info.p.rapidapi.com/airport&quot; querystring = {&quot;iata&quot;:&quot;LAX&quot;,&quot;icao&quot;:&quot;KLAX&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;b558955759msh32134753facfdd1p133021jsncf26cd31822e&quot;, &quot;X-RapidAPI-Host&quot;: &quot;airport-info.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) # print(response.text) airports = response.json().get(&#39;data&#39;) for airport in airports: if airport[&quot;home&quot;] == &quot;LAX&quot;: for key, value in airport.items(): print(key, value) . TypeError Traceback (most recent call last) /mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb Cell 10 in &lt;cell line: 16&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; # print(response.text) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; airports = response.json().get(&#39;data&#39;) &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; for airport in airports: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; if airport[&#34;home&#34;] == &#34;LAX&#34;: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; for key, value in airport.items(): TypeError: &#39;NoneType&#39; object is not iterable . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://rohanagr.github.io/RohanRepository/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 1 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 101: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 10 == 5: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 print(&quot;Hello! Welcome to me restaurant.&quot;) print(&quot;Menu:&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) order = True while order: item = input(&quot;order here:&quot;) if item in menu.keys(): total+= menu[item] print(&quot;grand total:&quot;, total) else: order = False print(&quot;Your Total is:&quot;,total) . Hello! Welcome to me restaurant. Menu: burger $3.99 fries $1.99 drink $0.99 Your Total is: 0 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://rohanagr.github.io/RohanRepository/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Tentative Project Idea",
            "content": "Group Members: . Rohan | Saavan | Derek | Dillon | . Tentative project ideas . We were thinking of making a website which could allow for free movies and streams. | Another idea was that we make a small database of baseball, football, and / or basketball players | The goal is to get people into sports (maybe) | .",
            "url": "https://rohanagr.github.io/RohanRepository/posts/2022/09/26/ProjectIdea.html",
            "relUrl": "/posts/2022/09/26/ProjectIdea.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "JavaScript Fragments",
            "content": "Our Group . Dillon Lee: Scrum Master | Rohan Agarwal: Backend Dev | Derek Sol: Frontend Dev | Saavan Gade: DevOps | .",
            "url": "https://rohanagr.github.io/RohanRepository/csp%20assignments/week%206/2022/09/26/JSFragments.html",
            "relUrl": "/csp%20assignments/week%206/2022/09/26/JSFragments.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Title",
            "content": ". toc: true layout: notebook description: categories: [posts] . title: CB Performance Task Planning . This is an overview of javascript | . console.log(&quot;Rohan Agarwal&quot;); . Rohan Agarwal . var msg = &quot;Rohan Agarwal&quot; console.log(msg) . Rohan Agarwal . function logIt(output) { console.log(output); } logIt(msg) . Rohan Agarwal . console.log(&quot;Reuse of logIt&quot;) logIt(&quot;Rohan Agarwal&quot;) logIt(2023) . Reuse of logIt Rohan Agarwal 2023 . function LogItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) LogItType(&quot;Rohan Agarwal&quot;); LogItType(2020); LogItType([1, 2, 3]); . Looking at dynamic nature of types in JavaScript string ; Rohan Agarwal number ; 2020 object ; [ 1, 2, 3 ] . function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } Person.prototype.setRole = function(role) { this.role = role; } Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } var student = new Person(&quot;Rohan&quot;, &quot;RohanAgr&quot;, 2023); LogItType(student); LogItType(student.toJSON()); teacher.setRole(&quot;Student&quot;); LogItType(student); LogItType(teacher.toJSON()); . object ; Person { name: &#39;Rohan&#39;, ghID: &#39;RohanAgr&#39;, classOf: 2023, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Rohan&#34;,&#34;ghID&#34;:&#34;RohanAgr&#34;,&#34;classOf&#34;:2023,&#34;role&#34;:&#34;&#34;} . evalmachine.&lt;anonymous&gt;:22 teacher.setRole(&#34;Student&#34;); ^ ReferenceError: teacher is not defined at evalmachine.&lt;anonymous&gt;:22:1 at ContextifyScript.Script.runInThisContext (vm.js:25:33) at Object.runInThisContext (vm.js:97:38) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) . function Player(name, position, average) { this.name = name; this.position = position; this.average = average; this.role = &quot;&quot;; } Player.prototype.setRole = function(role) { this.role = role; } Player.prototype.toJSON = function() { const obj = {name: this.name, position: this.position, average: this.average, role: this.role}; const json = JSON.stringify(obj); return json; } var manager = new Player(&quot;Bob Melvin&quot;, &quot;Catcher&quot;, &quot;.233&quot;); LogItType(manager); LogItType(manager.toJSON()); manager.setRole(&quot;Manager&quot;); LogItType(manager); LogItType(manager.toJSON()); . object ; Player { name: &#39;Bob Melvin&#39;, position: &#39;Catcher&#39;, average: &#39;.233&#39;, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Bob Melvin&#34;,&#34;position&#34;:&#34;Catcher&#34;,&#34;average&#34;:&#34;.233&#34;,&#34;role&#34;:&#34;&#34;} object ; Player { name: &#39;Bob Melvin&#39;, position: &#39;Catcher&#39;, average: &#39;.233&#39;, role: &#39;Manager&#39; } string ; {&#34;name&#34;:&#34;Bob Melvin&#34;,&#34;position&#34;:&#34;Catcher&#34;,&#34;average&#34;:&#34;.233&#34;,&#34;role&#34;:&#34;Manager&#34;} . var players = [ new Player(&quot;Manny Machado&quot;, &quot;Third Base&quot;, &quot;.299&quot;), new Player(&quot;Trent Grisham&quot;, &quot;Center Field&quot;, &quot;.185&quot;), new Player(&quot;Jake Cronenworth&quot;, &quot;Second Base&quot;, &quot;.238&quot;), new Player(&quot;Jurickson Profar&quot;, &quot;Left Field&quot;, &quot;.240&quot;), new Player(&quot;Ha-Seong Kim&quot;, &quot;Shortstop&quot;, &quot;.252&quot;), new Player(&quot;Brandon Drury&quot;, &quot;First Base&quot;, &quot;.226&quot;), new Player(&quot;Jorge Alfaro&quot;, &quot;Catcher&quot;, &quot;.249&quot;), new Player(&quot;Wil Myers&quot;, &quot;Right Field, First Base&quot;, &quot;.255&quot;), new Player(&quot;Juan Soto&quot;, &quot;Right Field&quot;, &quot;.242&quot;), new Player(&quot;Austin Nola&quot;, &quot;Catcher&quot;, &quot;.248&quot;), new Player(&quot;Josh Bell&quot;, &quot;Designated Hitter, First Base&quot;, &quot;.191&quot;), new Player(&quot;Jose Azocar&quot;, &quot;Outfield&quot;, &quot;.272&quot;), ]; function Padres(manager, players){ manager.setRole(&quot;Manager&quot;); this.manager = manager; this.padres = [manager]; this.players = players; this.players.forEach(player =&gt; { player.setRole(&quot;Player&quot;); this.padres.push(player); }); this.json = []; this.padres.forEach(player =&gt; this.json.push(player.toJSON())); } sd2022 = new Padres(manager, players); LogItType(sd2022.padres); LogItType(sd2022.padres[0].name); LogItType(sd2022.json[0]); LogItType(JSON.parse(sd2022.json[0])); . object ; [ Player { name: &#39;Bob Melvin&#39;, position: &#39;Catcher&#39;, average: &#39;.233&#39;, role: &#39;Manager&#39; }, Player { name: &#39;Manny Machado&#39;, position: &#39;Third Base&#39;, average: &#39;.299&#39;, role: &#39;Player&#39; }, Player { name: &#39;Trent Grisham&#39;, position: &#39;Center Field&#39;, average: &#39;.185&#39;, role: &#39;Player&#39; }, Player { name: &#39;Jake Cronenworth&#39;, position: &#39;Second Base&#39;, average: &#39;.238&#39;, role: &#39;Player&#39; }, Player { name: &#39;Jurickson Profar&#39;, position: &#39;Left Field&#39;, average: &#39;.240&#39;, role: &#39;Player&#39; }, Player { name: &#39;Ha-Seong Kim&#39;, position: &#39;Shortstop&#39;, average: &#39;.252&#39;, role: &#39;Player&#39; }, Player { name: &#39;Brandon Drury&#39;, position: &#39;First Base&#39;, average: &#39;.226&#39;, role: &#39;Player&#39; }, Player { name: &#39;Jorge Alfaro&#39;, position: &#39;Catcher&#39;, average: &#39;.249&#39;, role: &#39;Player&#39; }, Player { name: &#39;Wil Myers&#39;, position: &#39;Right Field, First Base&#39;, average: &#39;.255&#39;, role: &#39;Player&#39; }, Player { name: &#39;Juan Soto&#39;, position: &#39;Right Field&#39;, average: &#39;.242&#39;, role: &#39;Player&#39; }, Player { name: &#39;Austin Nola&#39;, position: &#39;Catcher&#39;, average: &#39;.248&#39;, role: &#39;Player&#39; }, Player { name: &#39;Josh Bell&#39;, position: &#39;Designated Hitter, First Base&#39;, average: &#39;.191&#39;, role: &#39;Player&#39; }, Player { name: &#39;Jose Azocar&#39;, position: &#39;Outfield&#39;, average: &#39;.272&#39;, role: &#39;Player&#39; } ] string ; Bob Melvin string ; {&#34;name&#34;:&#34;Bob Melvin&#34;,&#34;position&#34;:&#34;Catcher&#34;,&#34;average&#34;:&#34;.233&#34;,&#34;role&#34;:&#34;Manager&#34;} object ; { name: &#39;Bob Melvin&#39;, position: &#39;Catcher&#39;, average: &#39;.233&#39;, role: &#39;Manager&#39; } . Padres.prototype._toHtml = function() { var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); var body = &quot;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Position&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Batting Average&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; for (var row of sd2022.padres) { body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.position + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.average + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; } return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; $$.html(sd2022._toHtml()); . NamePositionBatting AverageRole . Bob Melvin | Catcher | .233 | Manager | Manny Machado | Third Base | .299 | Player | Trent Grisham | Center Field | .185 | Player | Jake Cronenworth | Second Base | .238 | Player | Jurickson Profar | Left Field | .240 | Player | Ha-Seong Kim | Shortstop | .252 | Player | Brandon Drury | First Base | .226 | Player | Jorge Alfaro | Catcher | .249 | Player | Wil Myers | Right Field, First Base | .255 | Player | Juan Soto | Right Field | .242 | Player | Austin Nola | Catcher | .248 | Player | Josh Bell | Designated Hitter, First Base | .191 | Player | Jose Azocar | Outfield | .272 | Player | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . . . .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/09/25/JavaScript.html",
            "relUrl": "/2022/09/25/JavaScript.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Collaboration Post",
            "content": "The Essence of Collaboration . Innovations are always better through collaboration and other people’s input | Effective collaboration includes communication, consensus, compromises, and resolving conflicts | Computing innovation is a result of collaboration and includes diverse talents, skills, perspectives, and backgrounds. | Can reduce bias | . From the second daily video . Emphasizes communication and consultation of peers | Inputs from the entire group can help understand all the aspects of a program or the task at hand. It also incorporates all the perspectives | . Quiz . 2/3 correct | Benefits of a diverse team: It can eliminate the need for software testing | Having three students write independent code and then another person combine all of them into a program is not an effective way of communication. | One benefit of having users participate is to provide feedback that can be used to incorporate a variety of perspectives into the software. | .",
            "url": "https://rohanagr.github.io/RohanRepository/posts/2022/09/21/collaboration.html",
            "relUrl": "/posts/2022/09/21/collaboration.html",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Stress Video Blog",
            "content": "Overview . A college professor surveyed Yale University’s student body and noticed that a lot of people were stressed | It affected their learning environment and negatively affected the student body and endeavors of Yale University | There are many fallacies such as GI-Joe | Knowing your mental situation is half the battle, and taking action is the other half | They excitedly come to Yale but cannot function properly because of their depression or other mental situation | . What I learned . 40% of students are extremely stressed | 1/3 are so depressed that it is hard for them to function properly | 40% feel hopeless in school | 60% of people have developed a large amount of anxiety | It is crazy that people are stressed to an extent that they cannot function properly at school, even in a prestigious university like Yale. | It makes me want to regularly check myself and make sure I am not overly stressed to an extent where my performance drops. | . Group Member Takeaways . Derek said that it was interesting how stress is everywhere and many people have it, but find it hard to deal with. He felt connected to some statistics and it made him feel that we are not alone when we are unhappy at times. | Dillon was surprised aat how much stress and anxiety college students have in the academic environment. He worries about himself as a result and always takes time to reflect and make sure he is under control. | Saavan thought the video was very informational and believes that it is very important to work towards stress relief as a means of living a happier life. | . I Am Thankful For… . my parents | my computer | my teachers for fostering a great learning environment | my bike so I can go places | my drivers license so I can actually drive. | .",
            "url": "https://rohanagr.github.io/RohanRepository/posts/2022/09/15/StressPost.html",
            "relUrl": "/posts/2022/09/15/StressPost.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Docker Test",
            "content": "print (&quot;testing... testing... testing...&quot;) .",
            "url": "https://rohanagr.github.io/RohanRepository/posts/2022/09/13/dockerpost.html",
            "relUrl": "/posts/2022/09/13/dockerpost.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "CB Performance Task Planning",
            "content": "This is going to be a monumental task XD . Me and Dillon will be sharing a common code, and then we deviate based on whatever theme we want to add . We make a new Jupyter notebook for the code | we hope to make a database to store information, and then we make a search engine | The search engine will extract information from the database depending on what is searched | Variables: we can use this to interchange the variables in between 2 code cells | one code cell stores data, and the other code cell outputs the data | we can classify and sort each input in the database (e.g. date of birth, height, other statistics) | Me and Dillon might split this task into smaller problems, and we will specify who wrote which code cell. | We can take inspiration from the Data Abstraction week and expand on it. | Everything here is subject to change in case an idea doesn’t work | .",
            "url": "https://rohanagr.github.io/RohanRepository/posts/2022/09/09/PerformaceTaskPlan.html",
            "relUrl": "/posts/2022/09/09/PerformaceTaskPlan.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Quiz and App using AppLab",
            "content": "Me and Dillon made an app and quiz using AppLab . it was fun lol xd | We were introduced to JavaScript and used it in our app through block codes. We were able to see the plaintext when we changed a few settings. | Our quiz was about Major League Baseball (again) and our app consisted of a drop down menu which gave a brief overview about the major wars fought by the West in the 20th century (World War I, World War II, Cold War) | Our quiz has 10 questions and our app had 3 sections, one for each question and / or major event. | We got the program to work without facing too many setbacks | We included a lot of “on event” commands to allow for easy app and quiz navigation | We found the overall process to be easy, but it was tedious writing the same “on event” command function over 10-20 times. | . Key Takeaways . AppLab is a great little platform to see how certain commands and variables work | With the right planning and execution, a task which may seem hard at first gets a lot easier | The data appeared to be stored in each screen, and the OnEvent command would allow for the code to call the input. | Resembled data abstraction . | You can view the quiz here | You can view the app here . | Here is the plan that me and Dillon made before coding the app and the quiz: | . Component Plan / Execution . Home Page | Have an image of the MLB logo. Place a button below the logo and the quiz begins when we press start. | . Questions | Here we can have all sorts of questions MLB related, such as MVP races, team names, trades, and more | . Aesthetic Appeal | We can place images beside each question to make the screen look full. We can adjust the theme so it is easy on the eye. | .",
            "url": "https://rohanagr.github.io/RohanRepository/posts/2022/09/09/AppQuizBlog.html",
            "relUrl": "/posts/2022/09/09/AppQuizBlog.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Themeblogpost",
            "content": "categories: [posts] . I used the hacker theme for my fastpages. I thought it looked good and the color contrast was quite nice. | However, I could not locate the menus, about me, and the other tabs which was there in the default theme. | .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/09/04/ThemeBlogPost.html",
            "relUrl": "/2022/09/04/ThemeBlogPost.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Title",
            "content": "Title: MLB Players | layout: notebook | categories: [jupyter] | . This post contains some information about two of my favorite baseball players. . #Append to player profile of Manny Machado in his 10 year career in MLB InfoDb = [] InfoDb.append({ &quot;FirstName&quot;: &quot;Manny&quot;, &quot;LastName&quot;: &quot;Machado&quot;, &quot;Position&quot;: &quot;Third Base&quot;, &quot;MLB Debut&quot;: &quot;August 9, 2012&quot;, &quot;Batting Average&quot;: &quot;.282&quot;, &quot;Career OPS&quot;: &quot;.833&quot;, &quot;Teams&quot;: [&quot;Baltimore Orioles&quot;, &quot;Los Angeles Dodgers&quot;, &quot;San Diego Padres&quot;] }) #Append to player profile of Aaron Judge in his 6 year career in MLB InfoDb.append({ &quot;FirstName&quot;: &quot;Aaron&quot;, &quot;LastName&quot;: &quot;Judge&quot;, &quot;Position&quot;: &quot;Outfield&quot;, &quot;MLB Debut&quot;: &quot;August 13, 2016&quot;, &quot;Batting Average&quot;: &quot;.280&quot;, &quot;Career OPS&quot;: &quot;.963&quot;, &quot;Teams&quot;: [&quot;New York Yankees&quot;] }) . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Position:&quot;, d_rec[&quot;Position&quot;]) print(&quot; t&quot;, &quot;MLB Debut:&quot;, d_rec[&quot;MLB Debut&quot;]) print(&quot; t&quot;, &quot;Batting Average:&quot;, d_rec[&quot;Batting Average&quot;]) print(&quot; t&quot;, &quot;Career OPS:&quot;, d_rec[&quot;Career OPS&quot;]) print(&quot; t&quot;, &quot;Teams: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Teams&quot;])) print() def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Manny Machado Position: Third Base MLB Debut: August 9, 2012 Batting Average: .282 Career OPS: .833 Teams: Baltimore Orioles, Los Angeles Dodgers, San Diego Padres Aaron Judge Position: Outfield MLB Debut: August 13, 2016 Batting Average: .280 Career OPS: .963 Teams: New York Yankees .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/08/30/InfoDb.html",
            "relUrl": "/2022/08/30/InfoDb.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Title",
            "content": "categories: [jupyter] | . Welcome . This bash code will check to see if the javascript kernel is installed. . python --versions python2 --version . unknown option --versions usage: python [option] ... [-c cmd | -m mod | file | -] [arg] ... Try `python -h&#39; for more information. Python 2.7.18 . conda list . # packages in environment at /home/rohanagr/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.4.0 ipykernel : 6.15.1 ipywidgets : not installed jupyter_client : 7.3.4 jupyter_core : 4.11.1 jupyter_server : not installed jupyterlab : not installed nbclient : not installed nbconvert : not installed nbformat : not installed notebook : not installed qtconsole : not installed traitlets : 5.3.0 Available kernels: bash /home/rohanagr/.local/share/jupyter/kernels/bash javascript /home/rohanagr/.local/share/jupyter/kernels/javascript python3 /home/rohanagr/.local/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /home/rohanagr/.local/share/jupyter/kernels/python3 .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/08/28/bashtoolcheck.html",
            "relUrl": "/2022/08/28/bashtoolcheck.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Statistics",
            "content": "As of 8/26/2022, I have learned the following: . Types of graphs and representations of data . | Ideal graphs for certain scenarios . | Analysis of numerical data and distributions . | How to analyze data through words and effective language . | . So far AP Statistics hasn’t been brutal. .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/08/28/Statistics.html",
            "relUrl": "/2022/08/28/Statistics.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Physics",
            "content": "Stuff we learned in physics: . - The equation used to find the electrical force is largely similar to the equation used for the force of gravity. . - The force of electricity is generally many magnitudes larger than the force of gravity . - electric fields are somewhat interesting . - There is a positive and a negative charge .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/08/28/Physics.html",
            "relUrl": "/2022/08/28/Physics.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Economics",
            "content": "Stuff we learned in Economics: . - Manage your money well! . - Make a budget and spend accordingly. . - Invest as much as you can, and watch your money grow . - Know your money habits and personality, and spend / save accordingly .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/08/28/Economics.html",
            "relUrl": "/2022/08/28/Economics.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Rohan's research notes",
            "content": "Here you will find my notes from class every week. . Week of 8/22 . In class this week we got a brief overview of python and jupyter notebooks. | We were shown a sample quiz and were tasked to create one of our own. | We had to use PowerShell and send pull requests to gain more file access from the APCSP repository. | We were introduced to bash and ran a few commands so everything was aligned. | .",
            "url": "https://rohanagr.github.io/RohanRepository/posts/2022/08/27/pages.notes.html",
            "relUrl": "/posts/2022/08/27/pages.notes.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Title",
            "content": "title: MLB Quiz | categories: [jupyter] | . Greetings, user. . Welcome to this quiz. How many can you get right? . This quiz will have 5 questions | What do you know about the MLB? | Be sure to capitalize the first letter of each word | Good luck! | . import getpass, sys, math from re import U from locale import LC_ALL def question_with_response(prompt) : print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 5 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot;running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot;questions. &quot;) question_with_response(&quot;Are you ready to take the test? &quot;) rsp = question_with_response(&quot;What award is given to the best pitcher in a season?&quot;) if rsp == &quot;Cy Young&quot;: print(rsp + &quot;is correct!&quot;) correct += 1 else: print(rsp + &quot;is incorrect, the correct answer was Cy Young&quot;) rsp = question_with_response(&quot;which team did Manny Machado play for before signing with the Padres?&quot;) if rsp == &quot;Dodgers&quot;: print (rsp + &quot;is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect, the correct answer is Dodgers.&quot;) rsp = question_with_response(&quot;Complete the name: ____ Red Sox&quot;) if rsp == &quot;Boston&quot;: print (rsp + &quot; is correct!&quot;) correct += 1 else: print ( rsp + &quot; is incorrect, Boston is the right answer.&quot;) rsp = question_with_response(&quot;How many cities have 2 baseball teams?&quot;) if rsp == &quot;3&quot;: print (rsp + &quot;is correct!&quot;) correct += 1 else: print( rsp + &quot; is incorrect, the correct answer is 3.&quot;) rsp = question_with_response(&quot;What do you call a home run with the bases loaded?&quot;) if rsp == &quot;Grand Slam&quot;: print (rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect, the correct answer is Grand Slam&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) + &quot;/&quot; + str(questions) + &quot; for a score of &quot; + str((correct/questions)*100) + &quot;%&quot; ) . Hello, rohanagrrunning /bin/python3 You will be asked 5questions. Question: Are you ready to take the test? Question: What award is given to the best pitcher in a season? is incorrect, the correct answer was Cy Young Question: which team did Manny Machado play for before signing with the Padres? Dodgersis correct! Question: Complete the name: ____ Red Sox is incorrect, Boston is the right answer. Question: How many cities have 2 baseball teams? Boston is incorrect, the correct answer is 3. Question: What do you call a home run with the bases loaded? is incorrect, the correct answer is Grand Slam rohanagr you scored 1/5 for a score of 20.0% .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/08/25/Rohans-quiz.html",
            "relUrl": "/2022/08/25/Rohans-quiz.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Welcome to Rohan's first post!",
            "content": "Welcome! . Hello world, this is my first Jekyll blog post. .",
            "url": "https://rohanagr.github.io/RohanRepository/posts/2022/08/21/RohanFirstPost.html",
            "relUrl": "/posts/2022/08/21/RohanFirstPost.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Title",
            "content": "toc: true | branch: master | badges: true | comments: true | categories: [jupyter] # My Jupyter Notebook&quot;Here is a line of code which will print Hello World!&quot; . | . print (&quot;Hello World!&quot;) print (&quot;My name is Rohan&quot;) . Hello World! My name is Rohan .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/08/21/MyFirstNotebook.html",
            "relUrl": "/2022/08/21/MyFirstNotebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Me",
          "content": "This website is powered by fastpages [^1]. . Hello! My name is Rohan Agarwal. I am currently a senior in Del Norte High School. My hobbies include watching baseball, eating, and playing games. I wanted to get a jist of coding this year and hence I signed up for APCSP. I hope to learn a lot about python, github, and other computer science topics this year. I hope I can convey my interest in learning through my fastpages. .",
          "url": "https://rohanagr.github.io/RohanRepository/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Vocabulary",
          "content": "| Term| Description | |—- | ————| |Github | A version-control platform for software development and version control using git. | |Jupyter Notebook | A web-based interactive computive platform. It supports python, markdown, bash, and other languages. | | Visual Studio Code | Code editor which acts as a text editor and IDE by including multiple coding and scripting languages. | | Python | An open source, object oriented programming language | | Markdown | Lightweight markup language for formatting text. | | Shell Script | A computer program used in the shell to install, modify, or optimize things in the computer. | | Code | A system of statements and programs integrated to produce something. | | Input | Something which a user enters into the computer | | Output | Anything which a computer displays as a result of the input. | | Repository | A hub where all the user’s code, websites, and other data is stored. | | Commit | the action of making tentative changes permanent | | Push | delivery of information from one server to the other | | Pull | a request of data from one server to the other | | Bash | A command line interpreter commonly used in the shell | | Bin | Compressed binary files used by computer applications | . Other Vocabulary . | Review Ticket | A ticket where every group member puts their issues (work from the week) for teacher review. It consists of each member’s work and peer evaluation. | | Creativity | Presents itself in how a person or group approaches a certain problems and tasks. It is often unique and has features which others may find hard to replicate. | | Critical Thinking | A person or group thinks hard about a problem and offers unique approaches while considering all the aspects. Always looks for improvement opportunities, and always welcome challenges. | | Communication | Methods which groups use to convey information to each other. Crucial to getting complex tasks done. | | Collaboration Through Leadership | Leaders can facilitate conversations and foster the essence of collaboration by taking charge, managing conflicts, groups, and initiating new ideas. | | Collaboration Through Teamwork | Two or more group members communicate and incorporate the above vocabulary terms to tackle a large problem or project. If done right, collaboration can elevate the spirit and creates a domino effect in the right direction. | | Research | Process of searching the internet for information. It is used to gain useful insights and other pieces of information which a group may not posses. | | Technical | The process of being current with the latest updates of anything, including technologies and other features. | .",
          "url": "https://rohanagr.github.io/RohanRepository/vocabulary/",
          "relUrl": "/vocabulary/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Other Class Notes",
          "content": "Class . Economics | . Physics | . Statistics | .",
          "url": "https://rohanagr.github.io/RohanRepository/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  

  

  

  
      ,"page6": {
          "title": "Trimester 2 Algorithm Vocabulary",
          "content": "Term Description . Addition Symbol + | Adds integers and other data | . Subtraction Symbol - | Subtracts integers and other data | . Multiplication Symbol * | Multiplies integers and other data | . Division Symbol / | Divides integers and other data | . Modulus Symbol % | Takes the modulus of numerical data | . Exponent Symbol ** | Takes numerical values and adds an inputted power to it. | . Algorithm | A way of performing a task… | . Index | Position of something in a data set | . Concatenation | Combining multiple strings | . Length | Number of characters in a string | . Substring | Part of a string | . Pseudocode | Program written in plain English in order to lay out the framework of said program | .",
          "url": "https://rohanagr.github.io/RohanRepository/algorithmvocabulary/",
          "relUrl": "/algorithmvocabulary/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  
  

  

  

  
  

  
      ,"page17": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://rohanagr.github.io/RohanRepository/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}