{
  
    
        "post0": {
            "title": "SASS",
            "content": "Why SASS? . SASS is an improvement on CSS in that there are methods of abstraction. It is a language that is _ into CSS, which means that __, which is what your web browser can read. . SASS vs SCSS . As you learn about Sass, you might notice something called Scss. They are basically the same thing except that Scss uses curly braces and semicolons to distinguish between lines. Sass uses indentation and newlines instead. . We will be teaching the Scss syntax because it is more commonly used. . Getting started . A easy way to write SASS and have it preprocessed into CSS is by using a Jekyll powered website, such as GitHub pages or Fastpages. . The first step is to clone a GitHub pages repo, such as this one. . Within the repository, head over to assets/css/, and open style.scss. . This is where you can create your SASS code. . To see your CSS-translated SASS code, head over to _site/assets/css/style.css . Note: You will need to run bundle exec jekyll serve before the _site directory appears. . The first few hundred lines are used to style Github&#39;s theme. Make sure to scroll to the very bottom to see the SASS code that you wrote, which is in the form of CSS. . Nesting . Many selectors may share the same element | SASS nesting --&gt; style code using hierarchies | . Mini-hack . Write out the SASS equivalent for the following CSS code: . .a .b { color: green; } .a .c { color: blue; } . .a .b { color: green; . .c { color: blue; } . } . Extend/Inheritance . What are some similarities that the buttons share? What are the differences? . The shape and configuration of the buttons are the same | Same width, height, and font color. | . Notes . Can create placeholders that can store reusable code | can use syntax like %buttonlayout and style in there. This can also be used later. | . Mixin . Creates code template that can be reused | Can take in parameters for dynamic styling | . Mini-hack . Write out a mixin in SASS that takes in a color and a font size as the parameter. Within the mixin, set the background color and font color to the color parameter, and set the font size to the font size parameter. Then create a selector that calls the mixin, and pass in a color and font size of your choice as the arguments. . Function . Function: can take in rgb value and returns the inverted rgb color. | You call a function by specifying the name of the function with parenthesis. | Arguments can be specified. | . Import . We can split code into multiple files and then combine them. | We put one stylesheet in some other SASS file and then create a directory called _sass. | | . SASS Hacks . Take notes and complete the mini-hacks. (0.9) . | Complete the quiz questions and provide your answers in this notebook. (0.9) . | Use SASS to create something that uses either extend or mixin. (0.9) . | Extra credit: Research other SASS features and blog about what you learned or add to your SASS project with any extra features not covered in this lesson. More points will be given if both are done. . | SASS MCQ . SASS is a scripting language that has many styling operations (option b) | The difference between SASS and CSS is that the syntax is sightly different (option a) | One advantage of SASS over CSS is that SASS has more functions than CSS (option a)&#39; | SASS stands for Systematically Arranged Sample Sheets (option a) | Compute is not an example of a SASS directive (option d) | The Mixin director is used to share rules and relationships between selectors (option c) | @__ is called a directive. (option b) | @mixin button-style { background-color: blue; color: white; padding: 10px; border: none; border-radius: 5px; } .button { @include button-style; } //extend button in place .special-button { @extend .button; background-color: red; } . Interpolation . Interpolation is used to put SASS in unquoted strings. | This is ideal for dynamically generating names and other headers | . @mixin inline-animation($duration) { $name: inline-#{unique-id()}; @keyframes #{$name} { @content; } animation-name: $name; animation-duration: $duration; animation-iteration-count: infinite; } .pulse { @include inline-animation(2s) { from { background-color: yellow } to { background-color: red } } } .",
            "url": "https://rohanagr.github.io/RohanRepository/2023/04/29/sass-lesson.html",
            "relUrl": "/2023/04/29/sass-lesson.html",
            "date": " • Apr 29, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;Players&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_position&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_team&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (5, &#39;_number&#39;, &#39;INTEGER&#39;, 0, None, 0) . import sqlite3 def create(): _name = input(&quot;Enter your player here: &quot;) _uid = input(&quot;Enter their profile name: &quot;) _position = input(&quot;What position do they play? &quot;) _team = input(&quot;Which team did they play for? &quot;) _number = input(&quot;What is their jersey number? &quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO Players (_name, _uid, _position, _team, _number) VALUES (?, ?, ?, ?, ?)&quot;, (_name, _uid, _position, _team, _number)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {_uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() create() . A new user record shoheiohtani has been created . def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() results = cursor.execute(&#39;SELECT * FROM Players&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Mookie Betts&#39;, &#39;mookiebetts&#39;, &#39;Right Field&#39;, &#39;Los Angeles Dodgers&#39;, 50) (2, &#39;Shohei Ohtani&#39;, &#39;shoheiohtani&#39;, &#39;Pitcher, Designated Hitter&#39;, &#39;Los Angeles Angels&#39;, 17) . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) position = input(&quot;Enter new position here:&quot;) if len(position) &lt; 2: message = &quot;please re-enter your position.&quot; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE Players SET _position = ? WHERE _uid = ?&quot;, (position, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the new position they play is {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() update() . The row with user id mookiebetts the new position they play is successfully updated . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM Players WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() delete() . The row with uid shoheiohtani was successfully deleted . def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() results = cursor.execute(&#39;SELECT * FROM Players&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Mookie Betts&#39;, &#39;mookiebetts&#39;, &#39;Right Field&#39;, &#39;Los Angeles Dodgers&#39;, 50) .",
            "url": "https://rohanagr.github.io/RohanRepository/2023/04/29/baseballplayer.html",
            "relUrl": "/2023/04/29/baseballplayer.html",
            "date": " • Apr 29, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Title",
            "content": "title: MLB Trivia 2 | categories: [jupyter] | . Welcome to the second MLB quiz. How many can you get right? . Enter the letter which you think is the answer to the question | . q1 = &quot;&quot;&quot;Which team traded Fernando Tatis Jr. to the Padres? a. Boston Red Sox b. Chicago White Sox c. Cincinnati Reds d. Seattle Mariners&quot;&quot;&quot; q2 = &quot;&quot;&quot;Which team won the NL West title in 2021? a. Los Angeles Dodgers b. San Diego Padres c. San Francisco Giants d. Arizona Diamondbacks&quot;&quot;&quot; q3 = &quot;&quot;&quot;Who hit the walk-off home run against the Cardinals which sent the Dodgers in the NLDS? a. Chris Taylor b. Trea Turner c. Mookie Betts d. Justin Turner&quot;&quot;&quot; q4 = &quot;&quot;&quot;Name the two teams in the 2019 World Series. a. New York Yankees, Los Angeles Dodgers b. Houston Astros, San Francisco Giants c. Washington Nationals, Tampa Bay Rays d. Houston Astros, Washington Nationals&quot;&quot;&quot; q5 = &quot;&quot;&quot;When did Manny Machado and Fernando Tatis Jr. make their Padres debut? a. 2018 b. 2019 c. 2020 d. 2021&quot;&quot;&quot; q6 = &quot;&quot;&quot;Name the stadium of the Boston Red Sox. a. Fenway Park b. T-Mobile Park c. Minute-Maid park d. The Great American Ballpark&quot;&quot;&quot; q7 = &quot;&quot;&quot;Who won the 2018 AL Cy Young Award? a. Justin Verlander b. Patrick Corbin c. Clayton Kershaw d. Blake Snell&quot;&quot;&quot; q8 = &quot;&quot;&quot;In 2016, the Chicago Cubs won the World Series after how many years? a. 56 b. 108 c. 119 d. 65&quot;&quot;&quot; q9 = &quot;&quot;&quot;Which league division are the New York Yankees in? a. AL Central b. NL East c. NL West d. AL East&quot;&quot;&quot; q10 = &quot;&quot;&quot;Which team did Brandon Drury play for? a. San Diego Padres b. New York Mets c. Toronto Blue Jays d. Arizona Diamondbacks e. All of the above&quot;&quot;&quot; questions = {q1: &quot;b&quot;, q2: &quot;c&quot;, q3: &quot;a&quot;, q4: &quot;d&quot;, q5: &quot;b&quot;, q6: &quot;a&quot;, q7: &quot;d&quot;, q8: &quot;b&quot;, q9: &quot;d&quot;, q10: &quot;e&quot; } name = input(&quot;Enter your name: &quot;) print(name, &quot;how many can you get right?&quot;) score = 0 for i in questions: print(i) ans = input(&quot;Choose the answer which you think is right.&quot;) if ans == questions[i]: print(&quot;correct!&quot;) score = score+1 else: print(&quot;sorry, that was incorrect.&quot;) print(&quot;Your final score is &quot;,score) . Rohan how many can you get right? Which team traded Fernando Tatis Jr. to the Padres? a. Boston Red Sox b. Chicago White Sox c. Cincinnati Reds d. Seattle Mariners correct! Which team won the NL West title in 2021? a. Los Angeles Dodgers b. San Diego Padres c. San Francisco Giants d. Arizona Diamondbacks sorry, that was incorrect. Who hit the walk-off home run against the Cardinals which sent the Dodgers in the NLDS? a. Chris Taylor b. Trea Turner c. Mookie Betts d. Justin Turner correct! Name the two teams in the 2019 World Series. a. New York Yankees, Los Angeles Dodgers b. Houston Astros, San Francisco Giants c. Washington Nationals, Tampa Bay Rays d. Houston Astros, Washington Nationals sorry, that was incorrect. When did Manny Machado and Fernando Tatis Jr. make their Padres debut? a. 2018 b. 2019 c. 2020 d. 2021 sorry, that was incorrect. Name the stadium of the Boston Red Sox. a. Fenway Park b. T-Mobile Park c. Minute-Maid park d. The Great American Ballpark sorry, that was incorrect. Who won the 2018 AL Cy Young Award? a. Justin Verlander b. Patrick Corbin c. Clayton Kershaw d. Blake Snell sorry, that was incorrect. In 2016, the Chicago Cubs won the World Series after how many years? a. 56 b. 108 c. 119 d. 65 sorry, that was incorrect. Which league division are the New York Yankees in? a. AL Central b. NL East c. NL West d. AL East sorry, that was incorrect. Which team did Brandon Drury play for? a. San Diego Padres b. New York Mets c. Toronto Blue Jays d. Arizona Diamondbacks e. All of the above sorry, that was incorrect. Your final score is 2 .",
            "url": "https://rohanagr.github.io/RohanRepository/2023/04/29/Quiz2.html",
            "relUrl": "/2023/04/29/Quiz2.html",
            "date": " • Apr 29, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Title",
            "content": ". toc: true layout: post . title: Pandas Hacks . In this notebook we will: . Read a file containing data of baseball players | fetch certain players&#39; data | . import pandas as pd . padres = pd.read_json(&#39;files/baseballplayers.json&#39;) print (padres) . Hitter Position Average in 2022 0 Trent Grisham Center Field .184 1 Fernando Tatis Jr. Right Field DNP (.281 Avg in 2021) 2 Juan Soto Left Field .242 3 Manny Machado Third Base .298 4 Xander Bogaerts Shortstop .307 5 Jake Cronenworth First Base .239 6 Nelson Cruz Designated Hitter (DH) .234 7 Matt Carpenter Utility .305 8 Ha-Seong Kim Second Base .251 9 Austin Nola Catcher .251 Home Runs in 2022 RBIs in 2022 Career OPS in 2022 0 17 53 .625 1 DNP (42 home runs in 2021) DNP (97 RBIs in 2021) DNP (.975 OPS in 2021) 2 27 62 .853 3 32 102 .897 4 15 73 .833 5 17 88 .722 6 10 64 651 7 15 37 1.138 8 10 59 .708 9 4 40 .650 . print(padres[[&#39;Position&#39;]]) print() print(padres[[&#39;Hitter&#39;, &#39;Position&#39;]].to_string(index=False)) . Position 0 Center Field 1 Right Field 2 Left Field 3 Third Base 4 Shortstop 5 First Base 6 Designated Hitter (DH) 7 Utility 8 Second Base 9 Catcher Hitter Position Trent Grisham Center Field Fernando Tatis Jr. Right Field Juan Soto Left Field Manny Machado Third Base Xander Bogaerts Shortstop Jake Cronenworth First Base Nelson Cruz Designated Hitter (DH) Matt Carpenter Utility Ha-Seong Kim Second Base Austin Nola Catcher .",
            "url": "https://rohanagr.github.io/RohanRepository/2023/04/29/PandasHacks.html",
            "relUrl": "/2023/04/29/PandasHacks.html",
            "date": " • Apr 29, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Vocab",
            "content": "# A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json from datetime import date # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self.birth = birth self.age = age self.classOf = classOf # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # setting up the graduation class @property def classOf(self): return self._classOf @classOf.setter def classOf(self, classOf): self._classOf = classOf # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;, classOf: &quot;{self.classOf}&quot;, birth: &quot;{self.birth}&quot;, age: &quot;{self.age}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password}, classOf={self._classOf}, birth={self.birth}, age={self.age})&#39; @property def birth(self): return self._birth @birth.setter def birth(self, birth): self._birth = birth @property def age(self): return self._age @age.setter def age(self, age): self._age = age # tester method to print users def tester(users, uid, psw, classOf, birth, age): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result from datetime import date def agecalculator(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Rohan Agarwal&#39;, uid=&#39;RohanAgr&#39;, password=&#39;AirbusA320!&#39;, classOf=2024, born=[2005, 5, 19], age= calculate_age(date(2005, 5, 19))) u2 = User(name=&#39;Vardaan Sangal&#39;, uid=&#39;vardaansangal&#39;, password=&#39;grocerystore&#39;, classOf=2024, born=[2006, 8, 7], age= calculate_age(date(2006, 8, 7))) u3 = User(name=&#39;Sean Yeung&#39;, uid=&#39;syeung&#39;, password=&#39;APCSP!&#39;, classOf=2000, born=[1995, 2, 3], age= calculate_age(date(1995, 2, 3))) u4 = User(name=&#39;Divyani Agarwal&#39;, uid=&#39;divyani006&#39;, password=&#39;kpop21&#39;, classOf=2026, born=[2008, 3, 21], age= calculate_age(date(2008, 3, 21))) # put user objects in list for convenience users = [u1, u2, u3, u4,] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;APCSP!&quot;) # Change user print(&quot;Test 2, change user 3 from Sean Yeung to Rachna Agarwal&quot;) u.name = &quot;Rachna Agarwal&quot; u.uid = &quot;rachna.sdca&quot; u.set_password(&quot;whatisthis23&quot;) u.classOf = 1995 u.birth = [1977, 10, 24] u.age = calculate_age(date(1977, 10, 28)) u = tester(users, u.uid, &quot;whatisthis23&quot;, u.classOf, u.birth, u.age) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . ModuleNotFoundError Traceback (most recent call last) /mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2023-1-16-OOP.ipynb Cell 1 in &lt;cell line: 4&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2023-1-16-OOP.ipynb#W1sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2023-1-16-OOP.ipynb#W1sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; # A gateway in necessary as a web server cannot communicate directly with Python. &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2023-1-16-OOP.ipynb#W1sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; # In this case, imports are focused on generating hash code to protect passwords. -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2023-1-16-OOP.ipynb#W1sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; from werkzeug.security import generate_password_hash, check_password_hash &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2023-1-16-OOP.ipynb#W1sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; import json &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2023-1-16-OOP.ipynb#W1sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; from datetime import date ModuleNotFoundError: No module named &#39;werkzeug&#39; . from datetime import date def agecalculate(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) birth = date(2005, 5, 19) age = calculate_age(date(2005, 5, 19)) print(age) . NameError Traceback (most recent call last) /mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2023-1-16-OOP.ipynb Cell 3 in &lt;cell line: 8&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2023-1-16-OOP.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2023-1-16-OOP.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; birth = date(2005, 5, 19) -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2023-1-16-OOP.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; age = calculate_age(date(2005, 5, 19)) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2023-1-16-OOP.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; print(age) NameError: name &#39;calculate_age&#39; is not defined .",
            "url": "https://rohanagr.github.io/RohanRepository/2023/04/29/OOP.html",
            "relUrl": "/2023/04/29/OOP.html",
            "date": " • Apr 29, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Basic JavaScript Knowledge",
            "content": "Variables . - declare JavaScript variables with var, let or const. - If the value of the variable can change, like a total, use let. If the value is set, like prices, use const. Variables can hold any data type. . var x = 5; var y = 6; var z = x + y; z . 11 . Data types- there are 8 JS data types. . List a few data types that you already knowString Number Object . | . 1. String: a series of characters, written with single or double quotes . let text = &quot;Mort&quot;; text . &#39;Mort&#39; . let text2 = &#39;Yeung&#39;; text2 . &#39;Yeung&#39; . 2. Number: can be integers or decimals. . - You can also have exponential notation for large/small numbers . 3. Bigint: used to store integer values that are too big to be represented by a normal JS number . - JavaScript integers are only accurate up to 15 digits . let number = 1234567890123456789012345n; let Largenum = BigInt(1234567890123456789012345) let typeLargenum = typeof Largenum; typeLargenum . evalmachine.&lt;anonymous&gt;:1 let number = 1234567890123456789012345n; ^^^^^^^^^^^^^^^^^^^^^^^^^ SyntaxError: Invalid or unexpected token at createScript (vm.js:56:10) at Object.runInThisContext (vm.js:97:10) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) at process._tickCallback (internal/process/next_tick.js:104:9) . Largenum . evalmachine.&lt;anonymous&gt;:1 Largenum ^ ReferenceError: Largenum is not defined at evalmachine.&lt;anonymous&gt;:1:1 at ContextifyScript.Script.runInThisContext (vm.js:25:33) at Object.runInThisContext (vm.js:97:38) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) . 4. Boolean: true or false, used in conditional testing . Boolean(10 &gt; 9) . true . Write a boolean statement that outputs true . Boolean(11 &gt; 8) . 5. Undefined: a variable without a value, has the value undefined/empty values . let name; name . grade = undefined; . 6. Null: represents the intentional absence of any object value . - variable is empty at the moment and may have a value later . let result; result = Boolean(undefined); console.log(result); // false result = Boolean(null); console.log(result); // false . false false . 7. Symbol: used to represent unique values that can be used as identifiers/keys in objects. . - They are also used to create private properties and methods in classes. - unique and immutable, so they can be used as unique identifiers in objects and classes. - useful for creating constants that can be shared across different parts of your code. . // Create a Symbol const mySymbol = Symbol(); console.log(mySymbol); // expected output: Symbol() . Symbol() . const myObject = { [mySymbol]: &#39;Hello World&#39; }; console.log(myObject); . { [Symbol()]: &#39;Hello World&#39; } . Edit/add to the code above so that it outputs &quot;Hello World&quot; . 8. Object: an unordered collection of key-value pairs. Each key-value pair is called a property. . - object: written with curly braces {}, name:value pairs - array: written with square brackets, separated by commas . Object . Identify the name/keys in the object below: Name, Breed, Age, Color | Identify the values in the object below: Elly, Rottweiler, 4, Black | . const dogs = {name: &quot;Elly&quot;, breed:&quot;Rottweiler&quot;, age:4, color:&quot;black&quot;} dogs . { name: &#39;Elly&#39;, breed: &#39;Rottweiler&#39;, age: 4, color: &#39;black&#39; } . Array . const songs = [&quot;Love Story&quot;, &quot;Blank Space&quot;, &quot;I Knew You Were Trouble&quot;]; songs . [ &#39;Love Story&#39;, &#39;Blank Space&#39;, &#39;I Knew You Were Trouble&#39; ] . Const . - We use const to declare variables whose value can be initialized only at the time of declaration. - Const means that the identifier cannot be reassigned. . const cost1 = 2; const cost2 = 11; let totalCost = cost1 + cost2; totalCost . 13 . Conditionals: control behavior, decides whether or not pieces of code can run. . - If: if a condition is true it is used to specify execution for a block of code. - Else: if the same condition is false it specifies the execution for a block of code. - Else If: new test if the first condition is false. . if (10 &gt; 5) { var outcome = &quot;True&quot;; } outcome; . &#39;True&#39; . if (&quot;red&quot; === &quot;blue&quot;) { var outcome = &quot;if block&quot;; } else { var outcome = &quot;else block&quot;; } outcome; . &#39;else block&#39; . let temperature = 54 if (temperature &lt; 70) { cast = &quot;Chilly&quot;; } else if (temperature &lt; 60) { cast = &quot;Cold&quot;; } else { cast = &quot;Warm&quot;; } cast . &#39;Chilly&#39; . Create a conditional statement about how you would greet someone based on the time of day. . let today = new Date(); let hourNow = today.getHours(); let greeting; if (hourNow &gt;= 0 &amp;&amp; hourNow &lt; 12) { greeting = &quot;Good morning!&quot;; } else if (hourNow &gt;= 12 &amp;&amp; hourNow &lt; 18) { greeting = &quot;Good afternoon!&quot;; } else if (hourNow &gt;= 18 &amp;&amp; hourNow &lt; 24) { greeting = &quot;Good evening!&quot;; } else { greeting = &quot;Hello!&quot;; } console.log(greeting); . Functions: . - defining: define with function + functionName(parameter) { function code }. It can be unnamed/anonymous can be defined based on a condition. - calling: simply put the function name with a parameter and semicolon, or a function can call itself (recursive) . Iteration: . - for loop: repeats until a specified condition evaluates to false - do...while: repeats until a specified condition evaluates to false - while statement: executes its statements as long as a specified condition evaluates to true - label: provides a statement with an identifier that lets you refer to it later in the code. ex. you can use a label to identify a loop, and then use the break or continue statements to indicate whether a program should interrupt the loop or continue its execution - break: used to terminate a loop, switch, or in conjunction with a labeled statement - continue: can be used to restart a while, do-while, for, or label statement - for...in: iterates a specified variable over all the enumerable properties of an object - for...of statement creates a loop Iterating over iterable objects, invoking a custom iteration hook with statements to be executed for the value of each distinct property . JavaScript in HTML- Questions . Where do you store the JavaScript Code? | How do you import a JS file into HTML? | What is onClick? | What tag do you use to write JavaScript code? | Hacks . Add notes in this notebook | Complete the code portions, questions, and prompts throughout the notebook | Extra Credit: code a small JavaScript game | We store the JavaScript code in a script block | We can use the src = &quot;path/file/files&quot; command to fetch images stored in our directory | OnClick is a function where a certain code segment will run if the corresponding button is clicked. | We use the &quot;script&quot; function to write JS code. | .",
            "url": "https://rohanagr.github.io/RohanRepository/2023/04/29/JSlesson.html",
            "relUrl": "/2023/04/29/JSlesson.html",
            "date": " • Apr 29, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object | SQLAlchemy db object | | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class MLB(db.Model): __tablename__ = &#39;MLB&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _position = db.Column(db.String(255), unique=False, nullable=False) _team = db.Column(db.String(255), unique=False, nullable=False) _number = db.Column(db.Integer, primary_key=False) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, position, team, number): self._name = name # variables with self prefix become part of the object, self._uid = uid self._position = position self._team = team self._number = number # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # a getter method, extracts mascot from object @property def position(self): return self._position # a setter function, allows mascot to be updated after initial object creation @position.setter def mascot(self, position): self._position = position # a getter method, extracts car from object @property def team(self): return self._team # a setter function, allows car to be updated after initial object creation @team.setter def team(self, team): self._team = team # a getter method, extracts mile from object @property def number(self): return self._number # a setter function, allows car to be updated after initial object creation @number.setter def number(self, number): self._number = number # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;position&quot;: self.position, &quot;team&quot;: self.team, &quot;number&quot;: self.number, } # CRUD update: updates user name, car, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, position=&quot;&quot;, team=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(position) &gt; 0: self.position = position if len(team) &gt; 0: self._team = team db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . We first import the flask and then import SQLAlchemy. This will set us up for the other code cells which follow. We define the app, the database, and how we want to configure it. This is seen in the app = Flask(name) command, database = &#39;sqlite:///files/sqlite.db&#39;, and all the app.config commands. . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. class User | db.Model inheritance | init method | @property, @&lt;column&gt;.setter | create, read, update, delete methods | . | . Here we import items for users | Users, ID, Password is all set up here. | We create a class called User, which is then stored in the database | We make more functions for name, user ID, password, and date of birth | We also implement CRUD (Create Read Update Delete) | All user data is stored in the database. | . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object | User Object Constructors | Try / Except | | . def initMLB(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = MLB(name=&#39;Manny Machado&#39;, uid=&quot;machados13&quot;, position=&#39;Third Base&#39;, number=13, team=&#39;San Diego Padres&#39;) u2 = MLB(name=&#39;Mike Trout&#39;, uid=&quot;miketrout&quot;, position=&#39;Center Field&#39;, number=27, team=&#39;Los Angeles Angels&#39;) u3 = MLB(name=&#39;Blake Snell&#39;, uid=&quot;snellzilla4&quot;, position=&#39;Pitcher&#39;, number=4, team=&#39;San Diego Padres&#39;) u4 = MLB(name=&#39;Aaron Judge&#39;, uid=&quot;thejudge44&quot;, position=&#39;Right Field&#39;, number=99, team=&#39;New York Yankees&#39;) u5 = MLB(name=&#39;Julio Rodriguez&#39;, uid=&quot;jrodshow44&quot;, position=&#39;Center Field&#39;, number=44, team=&#39;Seattle Mariners&#39;) u6 = MLB(name=&#39;Justin Verlander&#39;, uid=&quot;justinverlander&quot;, position=&#39;Pitcher&#39;, number=25, team=&#39;New York Mets&#39;) u7 = MLB(name=&#39;Bryce Harper&#39;, uid=&quot;bryceharper3&quot;, position=&#39;Designated Hitter&#39;, number=3, team=&#39;Philadelphia Phillies&#39;) mlb_players = [u1, u2, u3, u4, u5, u6, u7] # Changed variable name to MLB_players4 &quot;&quot;&quot;Builds sample Track/note(s) data&quot;&quot;&quot; for player in mlb_players: # Changed variable name to corresponding MLB player try: &#39;&#39;&#39;add Track to table&#39;&#39;&#39; object = player.create() # Changed variable name to player print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {player.uid}, or error.&quot;) initMLB() . Records exist uid machados13, or error. Records exist uid miketrout, or error. Records exist uid snellzilla4, or error. Records exist uid thejudge44, or error. Records exist uid jrodshow44, or error. Records exist uid justinverlander, or error. Records exist uid bryceharper3, or error. . Here we have a list of users (u1 - u6) with each user having their own name, ID, password, and date of birth. | If all the objects are present, then the user is successfully created. | If one or more of the objects are not there, then the user will be prompted to fill out the other fields, or else the user will not be created. | . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following User.query.filter_by | user.password | | . def find_by_uid(uid): with app.app_context(): user = MLB.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid): # query email and return user record user = find_by_uid(uid) if user == None: return False return True check_credentials(&quot;machados13&quot;) . True . We can runmage through the database to find certain users and their data. | A series of if loops can be run to check to see if the user is there, and if the password is also there. | . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | | . def create(): # optimize user time to see if uid exists uid = input(&quot;Create your own user ID here: &quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Add your player&#39;s name: &quot;) position = input(&quot;Add your player&#39;s position: &quot;) team = input(&quot;What team does your team play for? &quot;) number = input(&quot;What number does your player wear? &quot;) # Initialize User object before date user = MLB(name=name, uid=uid, position=position, team=team, number=number ) # create user.dob, fail with today as dob # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Created {&#39;id&#39;: 9, &#39;name&#39;: &#39;Sandy Alcantara&#39;, &#39;uid&#39;: &#39;sandyalcantara&#39;, &#39;position&#39;: &#39;Pitcher&#39;, &#39;team&#39;: &#39;Miami Marlins&#39;, &#39;number&#39;: 16} . Here we create a user by prompting them to enter their name, ID, a date of birth, and a password. It is then stored in the database, and the user can read whatever output is given. | . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all | json_ready assignment, google List Comprehension | | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = MLB.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Manny Machado&#39;, &#39;uid&#39;: &#39;machados13&#39;, &#39;position&#39;: &#39;Third Base&#39;, &#39;team&#39;: &#39;San Diego Padres&#39;, &#39;number&#39;: 13}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Mike Trout&#39;, &#39;uid&#39;: &#39;miketrout&#39;, &#39;position&#39;: &#39;Center Field&#39;, &#39;team&#39;: &#39;Los Angeles Angels&#39;, &#39;number&#39;: 27}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Blake Snell&#39;, &#39;uid&#39;: &#39;snellzilla4&#39;, &#39;position&#39;: &#39;Pitcher&#39;, &#39;team&#39;: &#39;San Diego Padres&#39;, &#39;number&#39;: 4}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Aaron Judge&#39;, &#39;uid&#39;: &#39;thejudge44&#39;, &#39;position&#39;: &#39;Right Field&#39;, &#39;team&#39;: &#39;New York Yankees&#39;, &#39;number&#39;: 99}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Julio Rodriguez&#39;, &#39;uid&#39;: &#39;jrodshow44&#39;, &#39;position&#39;: &#39;Center Field&#39;, &#39;team&#39;: &#39;Seattle Mariners&#39;, &#39;number&#39;: 44}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Justin Verlander&#39;, &#39;uid&#39;: &#39;justinverlander&#39;, &#39;position&#39;: &#39;Pitcher&#39;, &#39;team&#39;: &#39;New York Mets&#39;, &#39;number&#39;: 25}, {&#39;id&#39;: 7, &#39;name&#39;: &#39;Bryce Harper&#39;, &#39;uid&#39;: &#39;bryceharper3&#39;, &#39;position&#39;: &#39;Designated Hitter&#39;, &#39;team&#39;: &#39;Philadelphia Phillies&#39;, &#39;number&#39;: 3}, {&#39;id&#39;: 8, &#39;name&#39;: &#39;Joe Musgrove&#39;, &#39;uid&#39;: &#39;mu59grove&#39;, &#39;position&#39;: &#39;Pitcher&#39;, &#39;team&#39;: &#39;San Diego Padres&#39;, &#39;number&#39;: 44}, {&#39;id&#39;: 9, &#39;name&#39;: &#39;Sandy Alcantara&#39;, &#39;uid&#39;: &#39;sandyalcantara&#39;, &#39;position&#39;: &#39;Pitcher&#39;, &#39;team&#39;: &#39;Miami Marlins&#39;, &#39;number&#39;: 16}] . The user can read the name, user ID, password, and date of birth. . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | . def update(): # optimize user time to see if uid exists uid = input(&quot;Enter the user ID of your new player here: &quot;) user = find_by_uid(uid) if user != None: pass else: print(f&quot;No user id {uid} found&quot;) return name = input(&quot;Add your player&#39;s name: &quot;) position = input(&quot;Add your player&#39;s position: &quot;) team = input(&quot;What team does your team play for? &quot;) number = input(&quot;What number does your player wear? &quot;) # Initialize User object before date user = MLB(name=name, uid=uid, position=position, team=team, number=number, ) # write object to database with app.app_context(): try: object = user.update() print(&quot;Updated n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) update() . Updated {&#39;id&#39;: None, &#39;name&#39;: &#39;Joe Musgrove&#39;, &#39;uid&#39;: &#39;mu59grove&#39;, &#39;position&#39;: &#39;Pitcher&#39;, &#39;team&#39;: &#39;Astros&#39;, &#39;number&#39;: &#39;59&#39;} . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def delete(): id = input(&quot;Which player (user ID) do you want to remove? &quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM MLB WHERE id = ?&quot;, (id)) if cursor.rowcount == 0: # The id was not found in the table print(f&quot;No id {id} was not found in the table&quot;) else: # The id was found in the table and the row was deleted print(f&quot;The row with id {id} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) finally: conn.commit() conn.close() delete() . The row with id 9 was successfully deleted .",
            "url": "https://rohanagr.github.io/RohanRepository/2023/04/29/.4a.html",
            "relUrl": "/2023/04/29/.4a.html",
            "date": " • Apr 29, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Frontend and Backend Development Lesson Notes",
            "content": "Introduction . Frontend and backend are two essential components of a web application. The frontend is the part of the application that interacts with the user, whereas the backend is the part that handles the logic and data processing behind the scenes. . The frontend, also known as the client-side, typically consists of HTML, CSS, and JavaScript code that runs in the user&#39;s web browser. The frontend handles the user interface, page layout, and overall look of the application. It also handles user interactions, such as submitting forms, clicking buttons, and navigating between pages. . On the other hand, the backend, also known as the server-side, typically consists of a server, a database, and, in our case, APIs. The backend handles the processing and storage of data, manages user authentication and authorization, and handles business logic and rules. The backend also communicates with the frontend, providing the necessary data to render the user interface and processing user inputs. . Backend . In our class we mainly use Python and SQL/JSON to create APIs and databases. Here is a simple example of creating a SQL database and using CRUD as well. . What is CRUD . C: The &#39;C&#39; stands for create, meaning to create a new entry in a database. In this case, creating a new entry about a certain movie or TV show. . | R: Read, or to retrieve data from the database. In this case it is selecting the movie/TV shwo that you choose to display. . | U: Update, or changing an existing entry in the database. In this case it is selecting the preexisting movie/TV show and changing the values to match what you want. . | D: Delete, or removing data from the database. In this case it is selecting the preexisting movie/TV show and removing the entry from the database. . | . Films API . This API is intended to be used as a list of movies and TV shows that a person has watched. It includes attributes for the Film name(key), the year released, the language, the number of episodes, A list of the number of episodes(using pickletype), and a youtube url for the trailer. The CRUD works as follows: Create: Enter the above mentioned attributes Read: Returns all of the films and their attributes Update: Takes in new episodes watched, and a list of their names, and adds them to their respective attibutes Delete: Option for deleting every film, also takes in a name to delete that film if it exists . from flask import Flask import sqlite3 app = Flask(__name__) # Connect to the SQLite database using SQLite3 conn = sqlite3.connect(&#39;films.db&#39;) # Create a cursor object to execute SQL commands cursor = conn.cursor() # Create a table in the database cursor.execute(&#39;&#39;&#39;CREATE TABLE movies (id INTEGER PRIMARY KEY, title TEXT, year INTEGER, epcount INTEGER, language TEXT, trailer TEXT, eplist TEXT)&#39;&#39;&#39;) # Commit the changes to the database and close the connection conn.commit() conn.close() . import sqlite3 def create(): # Ask the user for movie details title = input(&quot;Enter the movie/tv show title: &quot;) year = input(&quot;Enter the movie/tv show release year: &quot;) epcount = input(&quot;Enter the movie/tv show epcount: &quot;) language = input(&quot;Enter the movie/tv show language: &quot;) eplist = input(&quot;Enter the movie/tv show episode names: &quot;) trailer = input(&quot;Enter the link movie/tv show trailer: &quot;) # Connect to the database and create a cursor to execute SQL commands database = &#39;films.db&#39; connection = sqlite3.connect(database) cursor = connection.cursor() try: # Execute SQL to insert record into db cursor.execute(&quot;INSERT INTO movies (title, year, epcount, language, eplist, trailer) VALUES (?, ?, ?, ?, ?, ?)&quot;, (title, year, epcount, language, eplist, trailer)) # Commit the changes connection.commit() print(f&quot;{title} has been added to the list of movies.&quot;) except sqlite3.Error as error: print(&quot;Error while inserting record:&quot;, error) # Close cursor and connection cursor.close() connection.close() create() . Better Call Saul has been added to the list of movies. . def read(id): # Connect to the database and create a cursor to execute SQL commands database = &#39;films.db&#39; connection = sqlite3.connect(database) cursor = connection.cursor() # Execute SQL to select a record from db by id cursor.execute(&quot;SELECT * FROM movies WHERE id=?&quot;, (id,)) # Fetch the record from the cursor movie = cursor.fetchone() # If movie exists, print its details, else print message if movie: print(f&quot;{movie[0]}. {movie[1]}, {movie[2]}, {movie[3]}, {movie[4]}, {movie[5]}, {movie[6]}&quot;) else: print(&quot;Movie not found.&quot;) # Close cursor and connection cursor.close() connection.close() read(id=1) . 1. Breaking Bad, 1594, 3, English, https://ricekrispies.com, Snap, Crackle, Pop . def update(id): # Connect to the database and create a cursor to execute SQL commands database = &#39;films.db&#39; connection = sqlite3.connect(database) cursor = connection.cursor() # Ask the user for movie details to update title = input(&quot;Enter the updated movie/tv show title: &quot;) year = input(&quot;Enter the updated movie/tv show release year: &quot;) epcount = input(&quot;Enter the updated movie/tv show epcount: &quot;) language = input(&quot;Enter the updated movie/tv show language: &quot;) eplist = input(&quot;Enter the updated movie/tv show episode names: &quot;) trailer = input(&quot;Enter the updated link movie/tv show trailer: &quot;) try: # Execute SQL to update the record in db cursor.execute(&quot;UPDATE movies SET title=?, year=?, epcount=?, language=?, eplist=?, trailer=? WHERE id=?&quot;, (title, year, epcount, language, eplist, trailer, id)) # Commit the changes connection.commit() print(&quot;Movie updated successfully.&quot;) except sqlite3.Error as error: print(&quot;Error while updating record:&quot;, error) # Close cursor and connection cursor.close() connection.close() update(id=1) . Movie updated successfully. . def delete(id): # Connect to the database and create a cursor to execute SQL commands database = &#39;films.db&#39; connection = sqlite3.connect(database) cursor = connection.cursor() try: # Execute SQL to delete the record from db by id cursor.execute(&quot;DELETE FROM movies WHERE id=?&quot;, (id,)) # Commit the changes connection.commit() print(&quot;Movie deleted successfully.&quot;) except sqlite3.Error as error: print(&quot;Error while deleting record:&quot;, error) # Close cursor and connection cursor.close() connection.close() delete(id=2) . Movie deleted successfully. . Fetching . Overview . Involves retrieving data from a server or database | Can use different HTTP methods, such as GET, POST, PUT, and DELETE, to perform different types of operations on the server. | Fetching can be done through a variety of ways including AJAX, XHR, and Axios | In APCSP we tend to use the Fetch API over anything else | Fetching involves sending a request to a server using a URL (Uniform Resource Locator), which identifies the location of the resource being requested. | Can receive data in various formats, including JSON | JSON data can be parsed into objects and arrays in JavaScript, making it easy to work with and manipulate in the frontend | . Python Fetch Using Request . import requests url = &quot;https://moviesdatabase.p.rapidapi.com/titles&quot; headers = { &quot;content-type&quot;: &quot;application/octet-stream&quot;, &quot;X-RapidAPI-Key&quot;: &quot;8401db6433msh3a46dd5bf23ad2ep19a280jsn48536a994246&quot;, &quot;X-RapidAPI-Host&quot;: &quot;moviesdatabase.p.rapidapi.com&quot; } response = requests.get(url, headers=headers) print(response.json()) . {&#39;page&#39;: 1, &#39;next&#39;: &#39;/titles?page=2&#39;, &#39;entries&#39;: 10, &#39;results&#39;: [{&#39;id&#39;: &#39;tt0001922&#39;, &#39;primaryImage&#39;: {&#39;id&#39;: &#39;rm736959488&#39;, &#39;width&#39;: 800, &#39;height&#39;: 563, &#39;url&#39;: &#39;https://m.media-amazon.com/images/M/MV5BZDI4MmJiMmMtMzQ3Mi00N2Y0LTlkYmUtYmQ0ZTQ1NzVlZmVjXkEyXkFqcGdeQXVyMDUyOTUyNQ@@._V1_.jpg&#39;, &#39;caption&#39;: {&#39;plainText&#39;: &#39;Darwin Karr and Gertrude McCoy in That Winsome Winnie Smile (1911)&#39;, &#39;__typename&#39;: &#39;Markdown&#39;}, &#39;__typename&#39;: &#39;Image&#39;}, &#39;titleType&#39;: {&#39;text&#39;: &#39;Short&#39;, &#39;id&#39;: &#39;short&#39;, &#39;isSeries&#39;: False, &#39;isEpisode&#39;: False, &#39;__typename&#39;: &#39;TitleType&#39;}, &#39;titleText&#39;: {&#39;text&#39;: &#39;That Winsome Winnie Smile&#39;, &#39;__typename&#39;: &#39;TitleText&#39;}, &#39;releaseYear&#39;: {&#39;year&#39;: 1911, &#39;endYear&#39;: None, &#39;__typename&#39;: &#39;YearRange&#39;}, &#39;releaseDate&#39;: {&#39;day&#39;: 9, &#39;month&#39;: 9, &#39;year&#39;: 1911, &#39;__typename&#39;: &#39;ReleaseDate&#39;}}, {&#39;id&#39;: &#39;tt0001539&#39;, &#39;primaryImage&#39;: {&#39;id&#39;: &#39;rm1311052544&#39;, &#39;width&#39;: 800, &#39;height&#39;: 582, &#39;url&#39;: &#39;https://m.media-amazon.com/images/M/MV5BZGY5NzI0MzQtM2EwYi00NzY2LThiYjYtYTM5YmViZDEwMzkzXkEyXkFqcGdeQXVyMDUyOTUyNQ@@._V1_.jpg&#39;, &#39;caption&#39;: {&#39;plainText&#39;: &#39;Caïn et Abel (1911)&#39;, &#39;__typename&#39;: &#39;Markdown&#39;}, &#39;__typename&#39;: &#39;Image&#39;}, &#39;titleType&#39;: {&#39;text&#39;: &#39;Short&#39;, &#39;id&#39;: &#39;short&#39;, &#39;isSeries&#39;: False, &#39;isEpisode&#39;: False, &#39;__typename&#39;: &#39;TitleType&#39;}, &#39;titleText&#39;: {&#39;text&#39;: &#39;Caïn et Abel&#39;, &#39;__typename&#39;: &#39;TitleText&#39;}, &#39;releaseYear&#39;: {&#39;year&#39;: 1911, &#39;endYear&#39;: None, &#39;__typename&#39;: &#39;YearRange&#39;}, &#39;releaseDate&#39;: {&#39;day&#39;: None, &#39;month&#39;: None, &#39;year&#39;: 1911, &#39;__typename&#39;: &#39;ReleaseDate&#39;}}, {&#39;id&#39;: &#39;tt0001636&#39;, &#39;primaryImage&#39;: None, &#39;titleType&#39;: {&#39;text&#39;: &#39;Short&#39;, &#39;id&#39;: &#39;short&#39;, &#39;isSeries&#39;: False, &#39;isEpisode&#39;: False, &#39;__typename&#39;: &#39;TitleType&#39;}, &#39;titleText&#39;: {&#39;text&#39;: &#39;Galileo&#39;, &#39;__typename&#39;: &#39;TitleText&#39;}, &#39;releaseYear&#39;: {&#39;year&#39;: 1911, &#39;endYear&#39;: None, &#39;__typename&#39;: &#39;YearRange&#39;}, &#39;releaseDate&#39;: {&#39;day&#39;: None, &#39;month&#39;: 7, &#39;year&#39;: 1911, &#39;__typename&#39;: &#39;ReleaseDate&#39;}}, {&#39;id&#39;: &#39;tt0002148&#39;, &#39;primaryImage&#39;: {&#39;id&#39;: &#39;rm1303852544&#39;, &#39;width&#39;: 700, &#39;height&#39;: 526, &#39;url&#39;: &#39;https://m.media-amazon.com/images/M/MV5BMWY2ODg0YWEtZDVmYy00OTEwLTkxN2YtYzY5ZmRmNjVlZWYyXkEyXkFqcGdeQXVyMDUyOTUyNQ@@._V1_.jpg&#39;, &#39;caption&#39;: {&#39;plainText&#39;: &#34;Fred Mace and Mabel Normand in The Drummer&#39;s Vacation (1912)&#34;, &#39;__typename&#39;: &#39;Markdown&#39;}, &#39;__typename&#39;: &#39;Image&#39;}, &#39;titleType&#39;: {&#39;text&#39;: &#39;Short&#39;, &#39;id&#39;: &#39;short&#39;, &#39;isSeries&#39;: False, &#39;isEpisode&#39;: False, &#39;__typename&#39;: &#39;TitleType&#39;}, &#39;titleText&#39;: {&#39;text&#39;: &#34;The Drummer&#39;s Vacation&#34;, &#39;__typename&#39;: &#39;TitleText&#39;}, &#39;releaseYear&#39;: {&#39;year&#39;: 1912, &#39;endYear&#39;: None, &#39;__typename&#39;: &#39;YearRange&#39;}, &#39;releaseDate&#39;: {&#39;day&#39;: 23, &#39;month&#39;: 12, &#39;year&#39;: 1912, &#39;__typename&#39;: &#39;ReleaseDate&#39;}}, {&#39;id&#39;: &#39;tt0001702&#39;, &#39;primaryImage&#39;: None, &#39;titleType&#39;: {&#39;text&#39;: &#39;Short&#39;, &#39;id&#39;: &#39;short&#39;, &#39;isSeries&#39;: False, &#39;isEpisode&#39;: False, &#39;__typename&#39;: &#39;TitleType&#39;}, &#39;titleText&#39;: {&#39;text&#39;: &#34;The Indian Maiden&#39;s Lesson&#34;, &#39;__typename&#39;: &#39;TitleText&#39;}, &#39;releaseYear&#39;: {&#39;year&#39;: 1911, &#39;endYear&#39;: None, &#39;__typename&#39;: &#39;YearRange&#39;}, &#39;releaseDate&#39;: {&#39;day&#39;: 22, &#39;month&#39;: 4, &#39;year&#39;: 1911, &#39;__typename&#39;: &#39;ReleaseDate&#39;}}, {&#39;id&#39;: &#39;tt0001856&#39;, &#39;primaryImage&#39;: {&#39;id&#39;: &#39;rm970923264&#39;, &#39;width&#39;: 800, &#39;height&#39;: 597, &#39;url&#39;: &#39;https://m.media-amazon.com/images/M/MV5BYmVhNGZlZTEtNjFmMS00MjEyLThkZmMtMTIwZjRjNzFkYjU3XkEyXkFqcGdeQXVyMDUyOTUyNQ@@._V1_.jpg&#39;, &#39;caption&#39;: {&#39;plainText&#39;: &#39;Edwin August and Dorothy West in The Revenue Man and the Girl (1911)&#39;, &#39;__typename&#39;: &#39;Markdown&#39;}, &#39;__typename&#39;: &#39;Image&#39;}, &#39;titleType&#39;: {&#39;text&#39;: &#39;Short&#39;, &#39;id&#39;: &#39;short&#39;, &#39;isSeries&#39;: False, &#39;isEpisode&#39;: False, &#39;__typename&#39;: &#39;TitleType&#39;}, &#39;titleText&#39;: {&#39;text&#39;: &#39;The Revenue Man and the Girl&#39;, &#39;__typename&#39;: &#39;TitleText&#39;}, &#39;releaseYear&#39;: {&#39;year&#39;: 1911, &#39;endYear&#39;: None, &#39;__typename&#39;: &#39;YearRange&#39;}, &#39;releaseDate&#39;: {&#39;day&#39;: 25, &#39;month&#39;: 9, &#39;year&#39;: 1911, &#39;__typename&#39;: &#39;ReleaseDate&#39;}}, {&#39;id&#39;: &#39;tt0001790&#39;, &#39;primaryImage&#39;: {&#39;id&#39;: &#39;rm635370240&#39;, &#39;width&#39;: 1748, &#39;height&#39;: 1340, &#39;url&#39;: &#39;https://m.media-amazon.com/images/M/MV5BMjAzMzQ3MjQxOV5BMl5BanBnXkFtZTgwMDQzNzExMzE@._V1_.jpg&#39;, &#39;caption&#39;: {&#39;plainText&#39;: &#39;Eugénie Nau in Les misérables - Époque 1: Jean Valjean (1913)&#39;, &#39;__typename&#39;: &#39;Markdown&#39;}, &#39;__typename&#39;: &#39;Image&#39;}, &#39;titleType&#39;: {&#39;text&#39;: &#39;Movie&#39;, &#39;id&#39;: &#39;movie&#39;, &#39;isSeries&#39;: False, &#39;isEpisode&#39;: False, &#39;__typename&#39;: &#39;TitleType&#39;}, &#39;titleText&#39;: {&#39;text&#39;: &#39;Les misérables - Époque 1: Jean Valjean&#39;, &#39;__typename&#39;: &#39;TitleText&#39;}, &#39;releaseYear&#39;: {&#39;year&#39;: 1913, &#39;endYear&#39;: None, &#39;__typename&#39;: &#39;YearRange&#39;}, &#39;releaseDate&#39;: {&#39;day&#39;: 3, &#39;month&#39;: 1, &#39;year&#39;: 1913, &#39;__typename&#39;: &#39;ReleaseDate&#39;}}, {&#39;id&#39;: &#39;tt0000543&#39;, &#39;primaryImage&#39;: None, &#39;titleType&#39;: {&#39;text&#39;: &#39;Short&#39;, &#39;id&#39;: &#39;short&#39;, &#39;isSeries&#39;: False, &#39;isEpisode&#39;: False, &#39;__typename&#39;: &#39;TitleType&#39;}, &#39;titleText&#39;: {&#39;text&#39;: &#39;Christian IXS bisættelse&#39;, &#39;__typename&#39;: &#39;TitleText&#39;}, &#39;releaseYear&#39;: {&#39;year&#39;: 1906, &#39;endYear&#39;: None, &#39;__typename&#39;: &#39;YearRange&#39;}, &#39;releaseDate&#39;: {&#39;day&#39;: 19, &#39;month&#39;: 2, &#39;year&#39;: 1906, &#39;__typename&#39;: &#39;ReleaseDate&#39;}}, {&#39;id&#39;: &#39;tt0002089&#39;, &#39;primaryImage&#39;: None, &#39;titleType&#39;: {&#39;text&#39;: &#39;Movie&#39;, &#39;id&#39;: &#39;movie&#39;, &#39;isSeries&#39;: False, &#39;isEpisode&#39;: False, &#39;__typename&#39;: &#39;TitleType&#39;}, &#39;titleText&#39;: {&#39;text&#39;: &#39;Carmen&#39;, &#39;__typename&#39;: &#39;TitleText&#39;}, &#39;releaseYear&#39;: {&#39;year&#39;: 1912, &#39;endYear&#39;: None, &#39;__typename&#39;: &#39;YearRange&#39;}, &#39;releaseDate&#39;: None}, {&#39;id&#39;: &#39;tt0000548&#39;, &#39;primaryImage&#39;: None, &#39;titleType&#39;: {&#39;text&#39;: &#39;Short&#39;, &#39;id&#39;: &#39;short&#39;, &#39;isSeries&#39;: False, &#39;isEpisode&#39;: False, &#39;__typename&#39;: &#39;TitleType&#39;}, &#39;titleText&#39;: {&#39;text&#39;: &#39;Fiskerliv i Norden&#39;, &#39;__typename&#39;: &#39;TitleText&#39;}, &#39;releaseYear&#39;: {&#39;year&#39;: 1906, &#39;endYear&#39;: None, &#39;__typename&#39;: &#39;YearRange&#39;}, &#39;releaseDate&#39;: {&#39;day&#39;: 15, &#39;month&#39;: 9, &#39;year&#39;: 1906, &#39;__typename&#39;: &#39;ReleaseDate&#39;}}]} . This is a functional fetch of a movies API from Rapid API, but the data isn&#39;t very readable. Below is an example of using Pandas to format the key values as a dataframe. . import requests import pandas as pd url = &quot;https://moviesdatabase.p.rapidapi.com/titles&quot; headers = { &quot;content-type&quot;: &quot;application/octet-stream&quot;, &quot;X-RapidAPI-Key&quot;: &quot;8401db6433msh3a46dd5bf23ad2ep19a280jsn48536a994246&quot;, &quot;X-RapidAPI-Host&quot;: &quot;moviesdatabase.p.rapidapi.com&quot; } response = requests.get(url, headers=headers) data = response.json() # Create an empty DataFrame df = pd.DataFrame() # Extract the required information and store it in a list of dictionaries results = data[&quot;results&quot;] entries = [] for result in results: entry = { &quot;id&quot;: result[&quot;id&quot;], &quot;title&quot;: result[&quot;titleText&quot;][&quot;text&quot;], &quot;release_year&quot;: result[&quot;releaseYear&quot;][&quot;year&quot;], } entries.append(entry) # Convert the list of dictionaries into a DataFrame df = pd.DataFrame(entries) print(df) # ADD YOUR OWN COLUMN TO THE DATAFRAME . id title release_year 0 tt0001922 That Winsome Winnie Smile 1911 1 tt0001539 Caïn et Abel 1911 2 tt0001636 Galileo 1911 3 tt0002148 The Drummer&#39;s Vacation 1912 4 tt0001702 The Indian Maiden&#39;s Lesson 1911 5 tt0001856 The Revenue Man and the Girl 1911 6 tt0001790 Les misérables - Époque 1: Jean Valjean 1913 7 tt0000543 Christian IXS bisættelse 1906 8 tt0002089 Carmen 1912 9 tt0000548 Fiskerliv i Norden 1906 . Using Pandas to format a request obtained from a 3rd Party API makes it much easier to read and you can select what you want to display as well. Pandas makes it easy to access data that you feel is important. . Backend and Frontend Example . Write notes below . Hacks . Create a completely unique API with all 4 CRUD features (Create, Read, Update, Delete) | Create a Fetch API request for your corresponding API | Attempt a complete website on GitHub Pages including HTML |",
            "url": "https://rohanagr.github.io/RohanRepository/2023/04/28/frontendBackend.html",
            "relUrl": "/2023/04/28/frontendBackend.html",
            "date": " • Apr 28, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Notebook - Data Related to User Guide",
            "content": "NOTE . As you follow along, make sure to fill in the blanks and complete the coding exercises! . Introduction . When building an application that requires users to create accounts or sign in, handling data related to users is crucial. This data can include things like user profiles, preferences, and activity logs, which can be used to personalize the user experience and improve the application&#39;s performance. . For example, by storing a user&#39;s name and profile picture, the application can address the user by name and display their picture, creating a more personal experience. Activity logs can also be used to track user behavior and help the application recommend new features or improvements. . By learning how to handle data related to users effectively and responsibly, you&#39;ll be equipped with the skills and knowledge needed to build robust and user-friendly applications that meet the needs of your users. . For simplicity purposes, we will be lecturing on how one can store and manipulate user data for future utilization. . Here we go! . Establishing Class/User Data and making a new user . In Python, classes are templates used to create objects, which are instances of those classes. Classes define the data elements (_) and methods that describe the behavior of the objects. Let&#39;s explore how to define a class and create objects in Python. . Example: Defining a User class . class User: def __init__(self, username, email): self.username = username self.email = email def display_info(self): print(f&quot;Username: {self.username}, Email: {self.email}&quot;) . In this example, we define a User class with a constructor method init that takes username and email as arguments. The display_info method is used to print the user information. . In the context of backend functionality, this class can be used to create, update, and delete user data. For example, when a new user signs up for an account, you could create a new User object with their username and email. This object can then be used to perform various operations, such as validating the user&#39;s input, storing the user&#39;s data in a database, or SQL File. . Creating a new user: . new_user = User(&quot;john_doe&quot;, &quot;john@example.com&quot;) new_user.display_info() . Lecture Topics: . Establishing Class/User Data and making a new user . In Python, classes are templates used to create objects, which are instances of those classes. Classes define the data elements (attributes) and methods that describe the behavior of the objects. Let&#39;s explore how to define a class and create objects in Python. . Example: Defining a User class . class User: def init(self, username, email): self.username = username self.email = email . def display_info(self): print(f&quot;Username: {self.username}, Email: {self.email}&quot;) . In this example, we define a User class with a constructor method init that takes username and email as arguments. The display_info method is used to print the user information. . Creating a new user: . python . new_user = User(&quot;john_doe&quot;, &quot;john@example.com&quot;) new_user.display_info() . Here, we create a new User object, new_user, with a specified username and email. We then call the display_info method to display the user&#39;s information. . Using property decorators (getter and setter) . Property decorators allow developers to access and modify instance data more concisely. The @property decorator creates a getter method, while the @attribute.setter decorator creates a setter method. . Example: . class Employee: def __init__(self, employee_id, name): self._employee_id = employee_id self._name = name @property def name(self): return self._name @name.setter def name(self, new_name): self._name = new_name . In this example, the Employee class has a name attribute, which is accessed and modified through the name property getter and setter methods. The _name attribute uses an underscore prefix, which is a convention to indicate it should not be accessed directly. . In the context of backend functionality, this Employee class can be used to model employees within an application. You can create instances of this class to store and manage employee data, and the getter and setter methods can be used to access and modify employee information in a controlled way. . Usage: . employee = Employee(1001, &quot;John Doe&quot;) print(employee.name) # Get the name using the getter method employee.name = &quot;Jane Doe&quot; # Set the name using the setter method print(employee.name) . employee = Employee(1001, &quot;John Doe&quot;) print(employee.name) # Get the name using the getter method . employee.name = &quot;Jane Doe&quot; # Set the name using the setter method print(employee.name) . In the context of backend functionality, the getter and setter methods provide a clean and controlled way to access and modify the attributes of an object. This can be particularly useful when interacting with databases, APIs, or other parts of a web application that require the management and manipulation of object attributes. . CHECK: Explain the function of getters and setters in your own words. . class Car: def __init__(self, make, model, year): self._make = make self._model = model self._year = year @property def make(self): return self._make @make.setter def make(self, new_make): self._make = new_make @property def model(self): return self._model @model.setter def model(self, new_model): self._model = new_model @property def year(self): return self._year @year.setter def year(self, new_year): self._year = new_year . Take notes here on property decorators and the purpose they serve: . Students can then practice creating instances of their Car class and using the getter and setter methods to access and modify the car attributes. . In the context of functionality, this Car class can be used to model cars within an application. You can create instances of this class to store and manage car data, and the getter and setter methods can be used to access and modify car information in a controlled way. . Overview . WE COVERED: In conclusion, we have covered essential concepts in object-oriented programming using Python, including: . Defining classes and creating objects Property decorators (getter and setter) Class methods and static methods Inheritance and method overriding Working with multiple objects and class attributes . These concepts provide a solid foundation for understanding how to model real-world entities using classes and objects in Python. By learning to work with classes, objects, and their methods, students can develop more efficient and modular code. . As students become more comfortable with these concepts, they can explore more advanced topics, such as multiple inheritance, abstract classes, encapsulation, and polymorphism. Additionally, they can apply these principles to practical projects like web development with Flask and SQLite, as discussed earlier. . Overall, mastering object-oriented programming will greatly enhance students&#39; ability to develop complex and maintainable software systems. . Databases and SQlite . SQLite is a software library that provides a relational database management system. Unlike other databases, such as MySQL or PostgreSQL, SQLite is embedded within an application, which means it does not require a separate server process to operate. This makes SQLite a great choice for small-scale applications or for use in situations where you don&#39;t want to set up a full database server. . In this lesson, we will be demonstrating how to set up a SQLite database in Flask, which provides an easy-to-use interface for interacting with SQLite databases, and we&#39;ll walk through the process of setting up a new database, creating tables, and adding data. We&#39;ll also cover some basic SQL commands that you can use to interact with your database, including CREATE TABLE, INSERT, SELECT, UPDATE, and DELETE. By the end of this lesson, you&#39;ll have a good understanding of how to work with SQLite databases in Flask and be ready to start building your own __. . Setting up a SQLite database in Flask . One of the key features of flask is its ability to work seamlessly with databases, including SQLite. A database is a collection of data stored in an organized manner that can be easily accessed, managed, and updated. . SQlite databse in Flask . from flask import Flask import sqlite3 # Create a Flask application app = Flask(__name__) # Connect to the SQLite database using SQLite3 conn = sqlite3.connect(&#39;example.db&#39;) # Create a cursor object to execute SQL commands cursor = conn.cursor() # Create a table in the database using SQL commands cursor.execute(&#39;&#39;&#39;CREATE TABLE example_table (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)&#39;&#39;&#39;) # Commit the changes to the database conn.commit() # Close the connection conn.close() . Basic SQL commands (create, read, update, delete) . SQL is really useful because it helps people do a bunch of things with the data stored in databases. For example, they can use it to create new tables to organize data, add new data to a table, update data that&#39;s already there, or delete data that&#39;s no longer needed. . CRUD is an acronym that stands for the fundamental operations that can be performed on a database, which are Create, Read, Update, and Delete. A widely-used lightweight database management system is SQLite, which can be easily integrated with different programming languages. . C: To create a new record in a database, you must first define the table structure that will store the data. This can be accomplished using SQL commands such as CREATE. Once the table is created, data can be added to it using the INSERT INTO command. . | R: To retrieve data from the database, you can use the READ command. You can specify which fields you want to retrieve and the conditions you want to apply using the WHERE clause. There are also several functions available to aggregate and manipulate data. . | U: To modify existing data in the database, you can use the UPDATE command. You will need to specify which table and fields you want to update, and the conditions you want to apply using the WHERE clause. . | D: To remove data from the database, you can use the DELETE command . | . Take notes here on the basic components of SQL: . import sqlite3 def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . This block of code is a menu function that helps with create, read, update, and delete (CRUD) tasks and displays the schema. The menu function acts as a control point that directs the program to call different functions based on what the user wants to do. When users enter their preferred action, the input is checked to see which function to use. The menu function is created with no arguments and is called repeatedly, displaying the menu options until the user decides to leave. . Creating a Database . import sqlite3 def create_database(): # Connect to the database (will create it if it doesn&#39;t exist) connection = sqlite3.connect(&#39;instance/professors.db&#39;) cursor = connection.cursor() # Create the professors table if it doesn&#39;t already exist cursor.execute(&#39;&#39;&#39;CREATE TABLE IF NOT EXISTS professors ( name TEXT, field TEXT, rating REAL, reviews TEXT )&#39;&#39;&#39;) # Commit changes and close the connection connection.commit() connection.close() # Call the function to create the database create_database() . Create Function: . import sqlite3 def create(): database = &#39;instance/professors.db&#39; name = input(&quot;Enter the professor&#39;s name: &quot;) field = input(&quot;Enter the professor&#39;s field of expertise: &quot;) rating = input(&quot;Enter the professor&#39;s rating (out of 10): &quot;) reviews = input(&quot;Enter any reviews or comments about the professor: &quot;) # Connect to the database and create a cursor to execute SQL commands connection = sqlite3.connect(database) cursor = connection.cursor() try: # Execute SQL to insert record into db cursor.execute(&quot;INSERT INTO professors (name, field, rating, reviews) VALUES (?, ?, ?, ?)&quot;, (name, field, rating, reviews)) # Commit the changes connection.commit() print(f&quot;{name} has been added to the list of coding professors.&quot;) except sqlite3.Error as error: print(&quot;Error while inserting record&quot;, error) # Close cursor and connection cursor.close() connection.close() create() . The create function allows users to input information about a coding professor and store it in a SQLite database named &#39;professors.db&#39;. This script prompts the user for the professor&#39;s name, field of expertise, rating out of 10, and any reviews or comments about the professor. It then establishes a connection to the SQLite database and creates a cursor object for executing SQL commands. . Read Function . import sqlite3 def read(): try: # Open a connection to the database and create a cursor connection = sqlite3.connect(&#39;instance/professors.db&#39;) cursor = connection.cursor() # Fetch all records from the professors table cursor.execute(&quot;SELECT * FROM professors&quot;) rows = cursor.fetchall() # If there are any records, print them if len(rows) &gt; 0: print(&quot;List of coding professors:&quot;) for row in rows: print(f&quot;Name: {row[0]} nField of expertise: {row[1]} nRating: {row[2]} nReviews: {row[3]} n&quot;) else: print(&quot;There are no coding professors in the list.&quot;) except sqlite3.Error as error: print(&quot;Error while connecting to the database:&quot;, error) finally: # Close the cursor and the connection to the database cursor.close() connection.close() read() . This code demonstrates how to read data from a SQLite database using Python and the API. The first step is to establish a connection to the database and create a cursor object to execute SQL commands. Then, a SELECT query is executed to fetch all records from the &quot;professors&quot; table. If there are any records, the code iterates through each record and prints out the name, field of expertise, rating, and reviews for each coding professor. If there are no records in the table, a message indicating so is printed. . Update Function . import sqlite3 def update(): database = &#39;instance/professors.db&#39; connection = sqlite3.connect(database) cursor = connection.cursor() try: # Get the professor&#39;s name to update name = input(&quot;Enter the name of the professor to update: &quot;) # Retrieve the current record from the database cursor.execute(&quot;SELECT * FROM professors WHERE name=?&quot;, (name,)) record = cursor.fetchone() # If the professor is found, update the record if record: print(&quot;Enter the new information for the professor:&quot;) field = input(f&quot;Current field: {record[1]} nNew field: &quot;) rating = input(f&quot;Current rating: {record[2]} nNew rating: &quot;) reviews = input(f&quot;Current reviews: {record[3]} nNew reviews: &quot;) # Execute SQL to update the record cursor.execute(&quot;UPDATE professors SET field=?, rating=?, reviews=? WHERE name=?&quot;, (field, rating, reviews, name)) connection.commit() print(f&quot;{name}&#39;s record has been updated.&quot;) # If the professor is not found, notify the user else: print(f&quot;No record found for {name}.&quot;) except sqlite3.Error as error: print(&quot;Error while updating record&quot;, error) # Close cursor and connection cursor.close() connection.close() update () . This is an implementation of an update function for the professors database using the sqlite3 module in Python. The function first establishes a connection to the database file &#39;instance/professors.db&#39; and creates a cursor object to execute multiple commands. It prompts the user to enter the name of the professor to update and retrieves the corresponding record from the database using a SELECT statement with a WHERE clause to match the professor&#39;s name. If the professor is found in the database, the user is prompted to enter new information for the professor&#39;s field of expertise, rating, and reviews. The function then executes an if / else statement with the new information to update the record in the database. . Delete Function . import sqlite3 def delete(): # Connect to the database and create a cursor connection = sqlite3.connect(&#39;instance/professors.db&#39;) cursor = connection.cursor() # Prompt the user for the name of the professor to delete name = input(&quot;Enter the name of the professor you want to delete: &quot;) # Use a SQL query to find the professor with the given name cursor.execute(&quot;SELECT * FROM professors WHERE name=?&quot;, (name,)) row = cursor.fetchone() # If the professor exists, confirm deletion and delete the record if row: confirm = input(f&quot;Are you sure you want to delete {name}? (y/n): &quot;) if confirm.lower() == &#39;y&#39;: cursor.execute(&quot;DELETE FROM professors WHERE name=?&quot;, (name,)) connection.commit() print(f&quot;{name} has been deleted from the list of coding professors.&quot;) else: print(f&quot;{name} not found in the list of coding professors.&quot;) # Close the cursor and the connection to the database cursor.close() connection.close() delete() . This code is a Python function for deleting a record from a SQLite database. The function prompts the user to input the name of the professor they want to delete. It then uses a SQL query to search for the professor in the database. If the professor is found, the user is prompted to confirm the deletion. If the user confirms, the function executes a SQL command to delete the record from the database. The function also prints a message confirming that the professor has been deleted from the list of coding professors. If the professor is not found in the database, the function prints a message indicating that the professor is not in the list. . Our Project ... in the works . SAM Messaging System . Get started with your own! . import sqlite3 # specify the name of the database file db_file = &quot;&lt;fill in the name of the database file here&gt;.db&quot; # create a connection to the database conn = sqlite3.connect(db_file) # create a cursor object cursor = conn.cursor() # add code here to create tables and insert data into the database # commit the changes and close the connection conn.commit() conn.close() . HACKS . Make sure to fill in all blanks, take notes when prompted, and at least attempt each of the interactive coding exercises. (0.45) . | Create your own database and create an algorithm that can insert, update, and delete data ralted to user. Points will be awarded based on effort and success. (0.45) . Extra Credit: Connect your backend to a visible frontend! | . | . *I have posted my fill in the blanks here, refer to the second and third links to get the notebook and the SQLite file* .",
            "url": "https://rohanagr.github.io/RohanRepository/2023/04/27/P5Y-Team-SAME-Now.html",
            "relUrl": "/2023/04/27/P5Y-Team-SAME-Now.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Big Idea 3, Simulations and SQLite Lesson Notes",
            "content": "Review Topics . All of the topics below are things that have been heavily covered and used throughout the class. We will mostly be focusing on more complicated uses and mechanics of these topics. . Lists . What are Lists? Lists are an ordered sequence of elements, where each element is a variable | Unlike dictionaries, lists&#39; keys are all integers that describe the order of the list | . | . Some examples of lists: . Playlist of songs | names of students in a class | contacts on your phone . | Each element of a string is referenced by an index (which is a number) and they generally start 0 but for the AP Exam it starts at 1. . AP Exam: 1,2,3,4 etc. | Python: 0,1,2,3 etc. | . | . How do lists Manage Complexity of a program? . We may not need as many variables. For example: One Variable that holds all students would be better than having a variable for EACH student | There can also be a list of test scores so if they need to be curved then the same calculation can be applied to the list (that has all the students) instead of doing the calculations one at a time | . | . Answer the following questions about the code block below: . Why do you think lists are helpful? What word does College Board like to use to describe the function of lists? | . Lists are good ways to organize data into categories. It makes it easier to read, sort, and interpret data. . # variable of type string name = &quot;Sri Kotturi&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 16 print(&quot;age&quot;, age, type(age)) # variable of type float score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;, &quot;html&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[2]&quot;, langs[2], type(langs[2])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Sri Kotturi &lt;class &#39;str&#39;&gt; age 16 &lt;class &#39;int&#39;&gt; score 90.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;html&#39;] &lt;class &#39;list&#39;&gt; - langs[2] Java &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Sri Kotturi&#39;, &#39;age&#39;: 16, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;html&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Sri Kotturi &lt;class &#39;str&#39;&gt; . Mathematical Expressions . What is the output of the cell below? What Mathematical Expressions do you see being used? (List them below.) . 10 | Floor division | . grade1 = 10 grade2 = grade1 average_grade = (grade1 + grade2) // 2 #what are these two slashes? The two slashes is floor division. print(average_grade) . 10 . What is the value of num1, num2, and num3? Explain how each number ended up what it was. . 4096 | 455 | 1 Num1 is the result of num2 raised to the num3 power Num3 is the modulus of 5 Num2 is the sum of nums 1 and 3, and then we do floor division. | . num1 = 2 num2 = 4 num3 = 6 num1 = num2 ** num3 num3 = num1 % 5 num2 = (num1 + num3) // 9 print(num1) print(num2) print(num3) . 4096 455 1 . Selection . Selection refers to the process of making decisions in a program based on certain conditions. It is normally done with conditional statements. . Conditionals . What is a conditional?: . Statement that allows code to execute different instructions if a certain condition is true or false | Allows program to make decisions based on data and input | . What are the main types of conditional statements?: . if | elif | else | . If statements . The if statement is used to check if a certain condition is true. The condition can be any expression that evaulates to a boolean value, True or False. If the condition is True, then it executes a code block. | If (condition) then (consequence) | Example: | . x = int(input(&quot;Enter a number&quot;)) if x &gt; 0: # if condition, check if this is true of false print(&quot;x is positive&quot;) # code that will execute if condition is met . x is positive . Else . The else statemnt executes a code block when the if condition is False. | If (condition) then (consequence A), else (consequence B) | . Elif . The elif statement can check multiple conditions in a sequence, and execute a certain block of code if any of the conditions are true. | If (condition) then (consequence A), elif (condition) then (consequence B), else (consequence C) . | Example adding onto the code from before to take negative numbers and 0 into account . | . x = int(input(&quot;Enter a number, x:&quot;)) if x &gt; 0: # if condition, check if this is true of false print(&quot;x is positive&quot;) # code that will execute if condition is met elif x &lt; 0: # if previous condition not true... elif condition, check if this is true of false print(&quot;x is negative&quot;)# code that will execute if condition is met else: # everything else, in this case it is if x == 0 print(&quot;x is zero&quot;) # only executes if all previous conditions are not met . x is positive . Nested Conditionals . What is a nested conditional?: . Conditional statement inside another conditional statement | Allows to check for more complex condition where one condition depends on another | . Nested Conditional Statements . Example | . x = int(input(&quot;Enter a number, x:&quot;)) if x % 2 == 0: print(&quot;x is even divisible by 2&quot;) # only ever checks is x is divisble by 3 if x is even. nested conditional if x % 3 == 0: print(&quot;x is divisible by 3&quot;) else: print(&quot;x is not divisible by 3&quot;) else: print(&quot;x is odd&quot;) . x is even divisible by 2 x is divisible by 3 . Indentation . When using conditionals and nested conditionals in Python, it is important to pay attention to the level of indentation in the code. The code inside the if, elif, and else blocks must be indented so they are nested wihtin the outer statements. This way, Python knows which code belongs to which block. . Binary Search . What is binary search and what is it used for?: . Searching algorithm | Find and select a specific element in a sorted list of elements | . How does binary search work?: . Repeatedly divides the search interval in half to find the middle element and compares the middle value to the target value, if not the same then it continues on to either the lower or upper half | Eliminate half of the remaining search interval elements each time | Efficient way to search for element in large dataset | . What is the time complexity and why?: . O(log(N)) | The maximum number of iterations is the amount of times the list can be divided in half until it reaches 1 number | Dividing by 2, so it is log2(N), logarigthm of n base 2 . | You may recognize the example below from the binary lesson last Friday . | . import random def binary_search_game(): low = 1 high = 100 target = random.randint(low, high) while True: guess = (low + high) // 2 print(f&quot;Is your number {guess}?&quot;) response = input(&quot;Enter &#39;higher&#39;, &#39;lower&#39;, or &#39;yes&#39;: &quot;) # conditional statements to check target number and guess if response == &#39;yes&#39;: print(f&quot;I guessed your number {guess}!&quot;) break elif response == &#39;higher&#39;: low = guess + 1 elif response == &#39;lower&#39;: high = guess - 1 else: print(&quot;Invalid input, please enter &#39;higher&#39;, &#39;lower&#39;, or &#39;yes&#39;.&quot;) binary_search_game() . Is your number 50? I guessed your number 50! . Quick Hack . Write a program using conditionals and nested conditionals . Ideas: Quiz, game (rock paper scissors, guess number), etc | . import random def rockpaperscissors(): options = [&#39;rock&#39;, &#39;paper&#39;, &#39;scissors&#39;] computer_choice = random.choice(options) player_choice = input(&quot;Choose rock, paper, or scissors: &quot;).lower() print(f&quot;Computer chose {computer_choice}.&quot;) if computer_choice == player_choice: print(&quot;It&#39;s a tie!&quot;) else: if computer_choice == &#39;rock&#39;: if player_choice == &#39;paper&#39;: print(&quot;You won!&quot;) elif player_choice == &#39;scissors&#39;: print(&quot;You lost!&quot;) elif computer_choice == &#39;paper&#39;: if player_choice == &#39;rock&#39;: print(&quot;You lost!&quot;) elif player_choice == &#39;scissors&#39;: print(&quot;You won!&quot;) elif computer_choice == &#39;scissors&#39;: if player_choice == &#39;rock&#39;: print(&quot;You won!&quot;) elif player_choice == &#39;paper&#39;: print(&quot;You lost!&quot;) rockpaperscissors() . Introduction to Algorithms . an algorithm is a set of instructions that describes how to solve a problem or perform a specific task using a computer program. | It is a precise sequence of computational steps that take an input and produce an output | . How do Algorithms relate to data structures? . Algorithms often rely on specific data structures to solve problems efficiently. | Sorting algorithms require a data structure such as an array or a linked list to store and manipulate data. | Searching algorithms such as binary search require data structures like arrays or trees to organize and search through data. | . Important Terms . What is an algorithm? . it is a finite set of instructions that accomplishes a specific task | . Sequencing . means that there is an order in which to do things | . Selection . Helps to choose two different outcomes based off of a decision that the programmer wants to make | . Iteration . Repeat something until the condition is met. (also referred to as repetition) | . Calling and Developing Procedures . A procedure is a sequence of instructions that performs a specific task. | To call a procedure, you need to know its name and any arguments it requires. | When a procedure is called, the program jumps to its instruction and starts executing it. | The arguments passed to a procedure can be used within the procedure to perform tasks or calculations. | After the procedure has completed its task, it returns control back to the calling program. | . def add_numbers(a, b): sum = a + b print(&quot;The sum of&quot;, a, &quot;and&quot;, b, &quot;is&quot;, sum) # Call the procedure with arguments 5 and 7 add_numbers(5, 7) . The result of the procedure can be stored in a variable, printed to the screen, or used in any other way that is required by the program. | Procedures can be defined within the same program in external files, and can be reused across multiple parts of the program. | To avoid errors and improve code readability, it&#39;s important to define and call procedures with proper syntax and conventions that are appropriate for the programming language you&#39;re using. | . def calculate_average(numbers): total = sum(numbers) count = len(numbers) average = total / count return average # Call the procedure with a list of numbers numbers_list = [10, 20, 30, 40, 50] result = calculate_average(numbers_list) # Display the result print(&quot;The average of&quot;, numbers_list, &quot;is&quot;, result) . Algorithmic Efficiency . Algorithmic efficiency refers to the amount of time and resources needed to execute an algorithm. | The efficiency of an algorithm can be measured in terms of its time complexity and space comlpexity. Time complexity refers to the amount of time required by an algorithm to complete its task as a function of its input size. | Space complexity refers to the amount of memory required by an algorithm to complete its task as a function of its input size. | can be analyzed using Big O notation, which provides an upper bound on the worst-case time and space complexity of the algorithm. | . | . What is the time complexity of the following code: . - O(N) - O(N*log(N)) - O(N * Sqrt(N)) - O(N*N) . a = 0 for i in range(N): for j in reversed(range(i, N)): a = a + i + j . What will be the time complexity of the following code? . n O(n) | (n+1) (O (n+1)) | n(n-1) (O (n-1)) | n(n+1) (O (n^2)) | . value = 0 for i in range(n): #iterates &quot;n&quot; times, with &quot;i&quot; taking on values from 0 to n-1. for j in range(i): # iterates &quot;i&quot; times, with &quot;j&quot; taking on values from 0 to i-1. value=value+1 . Efficiency can be improved by optimizing algorithms or by using more efficient data structures and algorithms. Some common techniques for improving efficiency include reducing the size of input data, caching results, and parallelizing tasks. | Understanding algorithmic efficiency is important in software development, as it can impact the performance of applications and their ability to scale with larger data sets. | . | . Iteration and Simulations . Simulations are real-world phenomema or systems that use mathematical algorithms and computer programs simulate the real behavior and aspects of the subject being modeled. . Simulations are most often used to model complex or time consuming things that would be difficult to test in real life, such as modeling the spread of diseases in certain ecosystems or testing the functionality of a potential product before it is made. . In this lesson, we will be looking at lists, iteration, and random values through the lens of simulations. . PLEASE RUN THE CODE BELOW BEFORE INTERACTING WITH THE CODE SEGMENTS IN THIS SECTION! . class Card: def __init__(self, suit, val): self.suit = suit self.val = val if val == 11: self.kind = &quot;Ace&quot; elif val == 12: self.kind = &quot;Jack&quot; elif val == 13: self.kind = &quot;Queen&quot; elif val == 14: self.kind = &quot;King&quot; else: self.kind = str(self.val) #return a formatted string version of a card def show(self): return f&quot;{self.kind} of {self.suit}&quot; #adjust aces to prevent breaking def ace_adj(self): if self.kind == &quot;Ace&quot;: self.val = 1 . Review: Lists and Iteration . Lists and iteration work hand-in-hand to efficiently process and/or modify multiple values at once. In a card game, for example, lists and iteration are used together frequently to make the game work correctly. . For Loops . For loops are probably the most well-known type of iterative loop used in code. Most of us know about the for variable in list format. . One helpful tool not a lot of people know about is the enumerate() function. When used in conjunction with a for loop, you can always have access to the index and value of each selected list entry. . numlist = [3, 5, 68, 203] for key, num in enumerate(numlist): print(f&quot;This entry&#39;s index is {str(key)}, but its value is {str(num)}.&quot;) print(f&quot;The difference between the value and the index is {num - key}.&quot;) . QUESTION: How is the key, num in enumerate(list) format similar to the format used when applying a for loop to a dictionary? . Answer: it gives a number to each one, and the number of iterations is equal to the number of values in the dataset . List Comprehension . You may also see for loops used within a list like below. We went over this in class fairly recently. In this case, it is used to show the cards in the hand of a player. . player_hand = [] # the player&#39;s hand is represented as a list # because lists are mutable (can change), they can be added to, like drawing a card # assume the deck below is a a deck of shuffled cards deck = [Card(&quot;Hearts&quot;, 3), Card(&quot;Spades&quot;, 12), Card(&quot;Diamonds&quot;, 11)] def draw_card(hand, deck): hand.append(deck.pop()) #try it out draw_card(player_hand, deck) print([card.show() for card in player_hand]) . Recursive Loops . Recursive loops have you calling one function inside of another. If a function must make some change to a certain value multiple times, it is oftem most efficient to have a function call itself with slightly different arguments like the fibonacci sequence below. . def fibonacci(terms): if terms &lt;= 1: return terms return fibonacci(terms-1) + fibonacci(terms-2) fibonacci(5) . Nesting Loops . Nesting loops increases the time complexity of the program, but it can be used to do things like make a card deck (see below). . def build(deck): for suit in [&quot;Spades&quot;, &quot;Clubs&quot;, &quot;Diamonds&quot;, &quot;Hearts&quot;]: for val in range(2, 15): #HINT: try replacing this function deck.append(Card(suit, val)) . While Loops . While loops aren&#39;t used in the program, but they offer a different way to repeat a set of instructions in a program. The procedure below the while [condition] line will occur until the condition is made not true. . Student Interaction: How could this build function be altered to function with a while loop within it? . def build(deck): for suit in [&quot;Spades&quot;, &quot;Clubs&quot;, &quot;Diamonds&quot;, &quot;Hearts&quot;]: for val in range(2, 15): deck.append(Card(suit, val)) #HINT: you may want to make an incrementing i variable . While loops also alter an alternative way to loop a set of instructions forever, until a precise thing occurs to break the loop. See the code below. . import random i = 0 while True: i += 1 ch = random.randint(1, 11) if ch == 10: print(f&quot;It took {str(i)} random generations to get 10.&quot;) break . 49 random generations is a lot more than it would normally take, but it&#39;s important for code to be able to model unlikely, yet possible scenarios. Speaking of random values... . Random Values . Because unpredictable randomness occurs in the real world, it&#39;s important to have a way to represent it. Simulations are able to use randomization, which could be in the form of random number generation or other methods like shuffle. . Card decks are a great example of how random values can be used to represent real-world scenarios. In the card simulation, the random module&#39;s shuffle function is used to quite literally shuffle the deck, seen below. . def shuffle(deck): random.shuffle(deck) . Often, random selection methods use functions like randint or randrange as ways to select certain indexes in lists, or might use the random numbers in some other way. . QUESTION: Without shuffling the card order of the deck, can you think of a way that the aforementioned random module functions could be used to get a random card from the deck? Do so in the code cell below. . import random #find another random function that could pull a random card from a deck of UNSORTED cards random_card = random.choice(deck) . Simulation Homework . Now that you&#39;ve learned about simulations and how they&#39;re used, it&#39;s time to apply that knowledge by creating a (basic) simulation of a real-world scenario. It can be something in nature, like the changes in the wildlife population of a certain area; it can be a game, like Uno (no blackjack though, that&#39;s taken); or it can be something completely random and unique. . The simulation must include... . Use of at least one random value | At least one list or similar data type (dictionary, set, etc.) | Efficient use of iteration (must support the purpose of the simualtion) | Selection (use of conditionals) | . Do this in your student copy in the cell provided. This is worth 0.9 (or more with extra credit) out of the 3 possible points. . # (Concert attendance? Wind speeds? Interactions between subjects in large environments?) # Think about the sort of things that could be saved in lists, dictionaries, etc. # (Even better if you can take advantage of the specific features of multiple types of data sets!) # What kind of iteration happens in the real world? # What occurs repeatedly, even over a long period of time? # You could model the results of a disease spreading through a population without it taking IRL years. import random def rockpaperscissors(): options = [&#39;rock&#39;, &#39;paper&#39;, &#39;scissors&#39;] computer_choice = random.choice(options) player_choice = input(&quot;Choose rock, paper, or scissors: &quot;).lower() print(f&quot;Computer chose {computer_choice}.&quot;) if computer_choice == player_choice: print(&quot;It&#39;s a tie!&quot;) elif computer_choice == &#39;rock&#39; and player_choice == &#39;paper&#39;: print(&quot;You won!&quot;) elif computer_choice == &#39;rock&#39; and player_choice == &#39;scissors&#39;: print(&quot;You lost!&quot;) elif computer_choice == &#39;paper&#39; and player_choice == &#39;rock&#39;: print(&quot;You lost!&quot;) elif computer_choice == &#39;paper&#39; and player_choice == &#39;scissors&#39;: print(&quot;You won!&quot;) elif computer_choice == &#39;scissors&#39; and player_choice == &#39;rock&#39;: print(&quot;You won!&quot;) elif computer_choice == &#39;scissors&#39; and player_choice == &#39;paper&#39;: print(&quot;You lost!&quot;) else: print(&quot;Invalid choice. Please choose rock, paper, or scissors.&quot;) rockpaperscissors() . Databases . We have already gone over databases in this class, but here is a refresher. A database contains data that&#39;s stored in columns and rows. The information in this database can then be pulled from the database and can be used in a program. . Setting Up the Database . Run the code cell below to prepare SQLite to create the database. If your system is struggling with the flask functions, verify that you&#39;re in the correct Python environment. REMEMBER: You should only db.init_app(app) ONCE during the process! . from flask import Flask from flask_sqlalchemy import SQLAlchemy # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . The Model File . The model file plays a crucial role in the formation of the database. . The model helps to create new databases | It provides a standardized method for formating the database entries across different systems | Objects used within the database are created | . import os, base64 import json from sqlalchemy.exc import IntegrityError # Define the User class to manage actions in the &#39;users&#39; table class User(db.Model): __tablename__ = &#39;players&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _username = db.Column(db.String(255), unique=False, nullable=False) _streak = db.Column(db.Integer, unique=True, nullable=False) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, username, streak): self._username = username self._streak = streak # a username getter method, extracts username from object @property def username(self): return self._username # a setter function, allows username to be updated after initial object creation @username.setter def username(self, username): self._username = username # a getter method, extracts streak from object @property def streak(self): return self._streak # a setter function, allows streak to be updated after initial object creation @streak.setter def streak(self, streak): self._streak = streak # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;username&quot;: self.username, &quot;streak&quot;: self.streak } # CRUD update: updates user name, password, phone # returns self def update(self, username, streak): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(username) &gt; 0: self.username = username if streak &gt; 0: self.streak = streak db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(username=&quot;Mr. Cards&quot;, streak=5) u2 = User(username=&quot;Kard Kowntre&quot;, streak=10) u3 = User(username=&quot;Un Bea Table&quot;, streak=15) users = [u1, u2, u3] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: user.create() print(f&#39;Created user with username &quot;{user.username}&quot;.&#39;) except IntegrityError: &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; db.session.remove() print(f&quot;Records exist, duplicate email, or error: {user.username}&quot;) . The init Fuction . The init method has one purpose which is to initialize the object&#39;s attributes. This is what is known as the constructor. In our project, the init method initalizes the username and streak as variables. . def __init__(self, username, streak): self._username = username self._score = streak . Setters and Getters . Setters and Getters are important methods used when writing code for databases. . Setter: a method that allows us to set or change the value of an attribute in a class. | Getter: a method that allows us to access an attribute in a given class. | . Setter Example . @streak.setter def streak(self, streak): self._streak = streak . Input In [10] self._streak = streak ^ IndentationError: expected an indented block . Getter Example . @property def streak(self): return self._streak . Input In [7] return self._streak ^ IndentationError: expected an indented block . The Api File . An API is an important part of having a functional database. . it acts as a messenger that allows programs to access data from the others | it connects all information | for a database, an api retrieves the data requested in code for the user | . import json from flask import Blueprint, request, jsonify from flask_restful import Api, Resource # used for REST API building user_api = Blueprint(&#39;user_api&#39;, __name__, url_prefix=&#39;/api/users&#39;) api = Api(user_api) class UserAPI: class _CRUD(Resource): # User API operation for Create, Read. THe Update, Delete methods need to be implemeented def post(self): # Create method &#39;&#39;&#39; Read data for json body &#39;&#39;&#39; body = request.get_json() &#39;&#39;&#39; Avoid garbage in, error checking &#39;&#39;&#39; # validate name username = body.get(&#39;username&#39;) if username is None or len(username) &lt; 1: return {&#39;message&#39;: f&#39;Username is missing, or is less than a character&#39;}, 400 # validate uid streak = body.get(&#39;streak&#39;) if streak is None or streak &lt; 1: return {&#39;message&#39;: f&#39;Streak is missing, or is less than 1&#39;}, 400 &#39;&#39;&#39; #1: Key code block, setup USER OBJECT &#39;&#39;&#39; uo = User(username=username, streak=streak) &#39;&#39;&#39; #2: Key Code block to add user to database &#39;&#39;&#39; # create user in database user = uo.create() # success returns json of user if user: return jsonify(user.read()) # failure returns error return {&#39;message&#39;: f&#39;Processed {username}, either a format error or a duplicate&#39;}, 400 def get(self): # Read Method users = User.query.all() # read/extract all users from database json_ready = [user.read() for user in users] # prepare output in json return jsonify(json_ready) # jsonify creates Flask response object, more specific to APIs than json.dumps def put(self): body = request.get_json() # get the body of the request id = body.get(&#39;id&#39;) username = body.get(&#39;username&#39;) streak = body.get(&#39;streak&#39;) # get the UID (Know what to reference) user = User.query.get(id) # get the player (using the uid in this case) user.update(username=username, streak=streak) return f&quot;{user.read()} Updated&quot; def delete(self): body = request.get_json() id = body.get(&#39;id&#39;) player = User.query.get(id) player.delete() return f&quot;{player.read()} Has been deleted&quot; # building RESTapi endpoint api.add_resource(_CRUD, &#39;/&#39;) . This is important particularly in a full flask respository context, but in this case, you&#39;ll just need to run the initUsers() function. . initUsers() . NameError Traceback (most recent call last) /mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2023-04-25-studenttemplate.ipynb Cell 63 in &lt;cell line: 1&gt;() -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2023-04-25-studenttemplate.ipynb#Y116sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; initUsers() NameError: name &#39;initUsers&#39; is not defined . An Alternative Method of Making SQLite Databases . In a previous lesson, we went over using the cursor object in SQLite3. Rather than go over all of that here, this lesson goes over it thoroughly. (You may use this method for the homework below.) . Database Homework . For this assignment, we&#39;d like you to make your own database file as instructed above. Remember, the API file isn&#39;t necessary in this case; you&#39;ll be focusing on making the model and the init function. . Your database must include these things: . A class with at least four attributes (if not the cursor method) | Setters and getters for this class (if not the cursor method) | Each of the CRUD functions | An init function with at least four entries | A screenshot showing proof that your SQLite file has been created correctly | . Feel free to base your database on the model provided above! Ask our group if you have any questions or concerns. . # If you&#39;ve already run the db.init_app(app) function while in this notebook, # don&#39;t do it again until you&#39;ve closed it! from random import randrange from datetime import date import os, base64 import json from __init__ import app, db from sqlalchemy.exc import IntegrityError class Charges(db.Model): __tablename__ = &#39;Charges&#39; id = db.Column(db.Integer, primary_key=True) _car = db.Column(db.String(255), unique=False, nullable=False) _chargetime = db.Column(db.String(255), unique=False, nullable=False) def __init__(self, car, chargetime): self._chargetime = chargetime self._car = car @property def chargetime(self): return self._chargetime @chargetime.setter def chargetime(self, chargetime): self._chargetime = chargetime @property def car(self): return self._car @car.setter def car(self, car): self._car = car def __str__(self): return json.dumps(self.read()) def create(self): try: db.session.add(self) db.session.commit() return self except IntegrityError: db.session.remove() return None def read(self): return { &quot;id&quot;: self.id, &quot;chargetime&quot;: self.chargetime, &quot;car&quot;: self.car, } def update(self, chargetime=&quot;&quot;, car=&quot;&quot;): if len(chargetime) &gt; 0: self.chargetime = chargetime if len(car) &gt; 0: self.car = car db.session.commit() return self def delete(self): db.session.delete(self) db.session.commit() return None def initCharges(): with app.app_context(): db.create_all() u1 = Charges( chargetime=&#39;Around 10 Hours&#39;, car=&#39;Lucid Air&#39; ) u2 = Charges( chargetime=&#39;Around 7 Hours&#39;, car=&#39;Tesla Model X&#39; ) u3 = Charges( chargetime=&#39;Around 7 Hours&#39;, car=&#39;Tesla Model S&#39; ) u4 = Charges( chargetime=&#39;Around 18 Hours&#39;, car=&#39;Rivian R1T&#39; ) u5 = Charges( chargetime=&#39;Around 11 Hours&#39;, car=&#39;NIO ET5&#39; ) charges = [u1, u2, u3, u4, u5] for charge in charges: try: charge.create() except IntegrityError: db.session.remove() print(f&quot;Records exist, duplicate email, or error:&quot;) . ModuleNotFoundError Traceback (most recent call last) /mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2023-04-25-studenttemplate.ipynb Cell 66 in &lt;cell line: 10&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2023-04-25-studenttemplate.ipynb#Y122sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; import os, base64 &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2023-04-25-studenttemplate.ipynb#Y122sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; import json &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2023-04-25-studenttemplate.ipynb#Y122sdnNjb2RlLXJlbW90ZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; from __init__ import app, db &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2023-04-25-studenttemplate.ipynb#Y122sdnNjb2RlLXJlbW90ZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; from sqlalchemy.exc import IntegrityError &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2023-04-25-studenttemplate.ipynb#Y122sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; class Charges(db.Model): ModuleNotFoundError: No module named &#39;__init__&#39; . Grading . Your submission will be graded based on the following criteria: . Filling in the blank throughout the lesson and providing code in the given cells when applicable (0.9) | Simulation homework (0.9) | Database homework (0.9) | . Here are some ideas for ways to increase your score above a 2.7: . Make a frontend version of your simulation that can be interacted with on your blog | Connect your simulation to the database you create | Create a menu that allows a user to make an entry in your database (CRUD functions within it) | You can establish a relationship between two classes/tables in your database (see the relationship between the User and Note classes in the Nighthawk Coders flask repository) | .",
            "url": "https://rohanagr.github.io/RohanRepository/bigidea3simsqlite/",
            "relUrl": "/bigidea3simsqlite/",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "2018 Practice Exam",
            "content": "Score: 60/66 . . programs A and B have the same number of values, but the values differ. Both programs display 10 values. | . . the procedure that the robot moved according to the code segment is incorrect, as it moves the robot in an undesired fashion. | . . the flowchart that I chose did not have the right algorithm to satisfy the requirements | . . It is impossible to create an algorithm to solve undecidable problems. | . . private keys cannot be used to decrypt the message | . . Cloud computing has enhanced collaboration. | .",
            "url": "https://rohanagr.github.io/RohanRepository/posts/2023/04/18/practiceexam.html",
            "relUrl": "/posts/2023/04/18/practiceexam.html",
            "date": " • Apr 18, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Developing with Frontend & Backend",
            "content": "Setting up Machines with Conda Scripts . GitHub . What is GitHub? | Why do we use GitHub? Why not Google Drive or messages? | What&#39;s the difference between Git and GitHub? | Name as many Git commands as you can: | . Two Main Machines . Which is better, MacOS or Windows? | Give some differences between MacOS and Windows in terms of the development we use in APCSP: | If you are on Windows, you want to skip the MacOS Setup instructions. | . Our Tools: . What is the first tool you remember installing? | Why was installations so hard the first time? | Without looking back at previous notes, name three tools you remember installing. This can be kernels, extensions, any installation for APCSP, and also write why it is needed. | . Actual Installations: . Tool setup is a week 0 thing. You should already have the knowledge to set up your machine. There is also a high chance you had to remove your environments and set up your machine again due to errors. If, for some reason, these don&#39;t apply to you, go here to set up your machine, here to check everything working with Bash, and here for Docker setup, which are the main tools on our machine needed to develop in APCSP. . MacOS Conda Scripts . After installing Homebrew, VSCode, and Python2, you&#39;ll need to run these Homebrew commands: . brew list # list packages brew update # update package list brew upgrade # upgrade packages brew install git # install latest git brew install python # install python3 for development python --version # version of python3 installed brew install java # openjdk install . Windows Conda Scripts . To get set up, run these commands: . wsl --install wsl --list wsl --install -d Ubuntu-20.04 # restart machine wsl cd ~ mkdir vscode ls cd ~/vscode # changes the directory to path for vscode files git clone https://github.com/nighthawkcoders/APCSP.git # clone repo cd APCSP # changes the directory to path for APCSP repos assets code . # opens APCSP in VSCode cd .. # changes the directory to the previous/parent directory git config --global user.email mygmail@gmail.com # tell git your email git config --global user.name mygithub # tell git your github id shay@MSI:/mnt/c/Users/ShayM$ git config --global user.email your@email.here shay@MSI:/mnt/c/Users/ShayM$ git config --global user.name yourusernamehere # restart machine PS C: Users UserName&gt; wsl # Windows prompt to WSL command cd /tmp wget https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh chmod +x Anaconda3-2022.05-Linux-x86_64.sh # Answer yes to all the prompts ./Anaconda3-2022.05-Linux-x86_64.sh # run apt package commands now sudo apt list # list packages sudo apt update # update package list sudo apt upgrade # upgrade packages sudo apt install python2 # install python2 for package dependencies sudo apt install python3 python3-pip # install python3 and pip3 for development python --version # version of python3 should be shown sudo apt install default-jdk default-jre # java install java --version # java runtime version javac --version # java compiler version sudo apt install unzip # unzip utility . Setting Up Kernels . Now that you have everything installed on MacOS/Windows, we need to get kernels installed so that we can develop inside Fastpages notebooks. To do that, run these commands on both MacOS and Windows: . (base) id:~$ conda --version (base) id:~$ conda install jupyter # install jupyter (base) id:~$ jupyter kernelspec list # list installed kernels Available kernels: python3 /home/shay/.local/share/jupyter/kernels/python3 (base) id:~$ # start in home directory (base) id:~$ pip install bash_kernel # download bash kernel Collecting bash_kernel Downloading bash_kernel-0.7.2-py2.py3-none-any.whl (15 kB) Requirement already satisfied: pexpect&gt;=4.0 in ./anaconda3/lib/python3.9/site-packages (from bash_kernel) (4.8.0) Requirement already satisfied: ptyprocess&gt;=0.5 in ./anaconda3/lib/python3.9/site-packages (from pexpect&gt;=4.0-&gt;bash_kernel) (0.7.0) Installing collected packages: bash-kernel Successfully installed bash-kernel-0.7.2 (base) id:~$ python -m bash_kernel.install # install kernel Installing IPython kernel spec (base) id:~$ jupyter kernelspec list # list kernels Available kernels: bash /home/shay/.local/share/jupyter/kernels/bash python3 /home/shay/.local/share/jupyter/kernels/python3 (base) id:~$ conda install nodejs # node is framework for JavaScript kernel (base) id:~$ npm -version # node package manager comes with nodejs (base) id:~$ npm install -g ijavascript # get the kernel (base) id:~$ ijsinstall # install javascript kernel (base) id:~$ jupyter kernelspec list # list kernels Available kernels: bash /home/shay/.local/share/jupyter/kernels/bash javascript /home/shay/.local/share/jupyter/kernels/javascript python3 /home/shay/.local/share/jupyter/kernels/python3 . By now, you should already know how to clone Git repositories into your VSCode directory. Once you do that, you&#39;re all set for developing with GitHub Pages and Fastpages! . Before We Set Up Pages, A Guide to Git . As we&#39;ve discussed, Git is different from GitHub. Because GitHub is merely the place where we store Git repos, we use Git&#39;s commands to help us get, open, and configure these repositories. Here are some of the Git commands you should be using a lot (In the comments, tell what each Git command does): . git clone {repos-name-here.git} # what does it do? git checkout [branch] # what does it do? git fork {repos-name-here.git} # what does it do? git commit -m {&quot;commit-msg&quot;} # what does it do? git pull # what does it do? git push # what does it do? # After this line, name other commands that you can use and what they do. This should be easy, as you&#39;ve already answered the qeue . Setting Up GitHub Pages . Some of you may have come to know that GitHub Pages is starting to become outdated. So why do we still use it? The answer is that we are in a class, and following a curriculum with something like GitHub Pages is much easier than creating portfolio content from scratch, which becomes quite unecessary. Therefore, we can use GitHub Pages to create this content instead. On the topic of unecessary vs necessary coding, we don&#39;t need to make GitHub Pages from scratch as opposed to using a template that our very own Mr. Mortensen created for us. To do that, we can go to the Leuck Reunion repository and use the template to make our own GitHub Pages. Then, in Ubuntu, we can git clone our repository and open it in VSCode. After we have it open, the last thing we want to do is set up local hosting for this website, so that we can preview it and make changes in real time. To do that, head here to install Jekyll for Ubuntu, here to install Ruby next, and here to finalize the process by installing Bundler. . Setting Up FastPages . In Setting Up Github Pages, we talked about how it is easier to use a template to create portfolio content. It is also easier to use a template when creating the portfolio itself. To do that, we can use Fastpages, which is what we have been using to show our blogs, code, and projects. However, Fastpages has been deprecated for some time now, so the instructions in Week 0 won&#39;t be effective. So, we need to fork the APCSP Fastpages. To do that, follow this video to get started developing with Fastpages. . Hacks . Show how you incorporate three tools that we have installed into your project. 0.1 points for each feature. (0.3). This can include code, but definitely blog about it. | frontend hack goes here | backend hack goes here | .",
            "url": "https://rohanagr.github.io/RohanRepository/quintinpartone",
            "relUrl": "/quintinpartone",
            "date": " • Apr 18, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Computers and Networks (Unit 4)",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieives and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio . Processor GHz: | Memory in GB: | Storage in GB: | OS: | . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . Input devices | Output devices | Program File | Program Code | Processes | Ports | Data File | Inspect Running Code | Inspect Variables | . . The Internet . Watch/review College Board Daily Video for 4.1.1 . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. Path | Route | Computer System | Computer Device | Bandwidth | Computer Network | . | . Watch/review College Board Daily Video 4.1.2 . Complete True of False Questions . | Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprierary) communication protocols. | Access to the internet depends on the ability to connect a computing device to an internet connected device. | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highligh vocabulary by illustration. The below illustration have some ideas | . . Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is trasported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packetizing data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . Fault Tolerance . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. | . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily vidoe 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . What is naturally Distributed in Frontend/Backend archeticture? . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there is options are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article . | . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. | . Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) .",
            "url": "https://rohanagr.github.io/RohanRepository/2023/04/05/AP_computers_networks.html",
            "relUrl": "/2023/04/05/AP_computers_networks.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a ___. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is ___. | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # It printed numbers in increasing order but did not include all of them. # Duplicates were not included in the output # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # This is so that unique values in the data set are shown, and it removes duplicates. # Dictionaries also cannot have duplicates. . {1, 2, 3} . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # Strings, integers, dictionaries, lists # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}} . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . The Man The Man . lover_album[&quot;producer&quot;] = [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;] # What can you change to make sure there are no duplicate producers? # We can print &quot;producers&quot; to make sure there are no duplicates. # We can use set to ensure that the output does not produce any duplicates. # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}, &#39;producer&#39;: [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]} . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # How would add an additional genre to the dictionary, like electropop? lover_album[&quot;genre&quot;].append(&quot;Mainstream&quot;) # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;, &#39;Mainstream&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;}, &#39;producer&#39;: [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]} . for k,v in lover_album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format for k,v in lover_album[&quot;tracks&quot;].items(): print(str(k) + &quot; : &quot; + str(v)) # . title: Lover artist: Taylor Swift year: 2019 genre: [&#39;Pop&#39;, &#39;Synth-pop&#39;, &#39;Mainstream&#39;] tracks: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;} producer: [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;] 1 : I Forgot That You Existed 2 : Cruel Summer 3 : Lover 4 : The Man 5 : The Archer 6 : I Think He Knows 7 : Miss Americana &amp; The Heartbreak Prince 8 : Paper Rings 9 : Cornelia Street 10 : Death By A Thousand Cuts 11 : London Boy 12 : Soon You&#39;ll Get Better (feat. Dixie Chicks) 13 : False God 14 : You Need To Calm Down 15 : Afterglow 16 : Me! (feat. Brendon Urie of Panic! At The Disco) 17 : It&#39;s Nice To Have A Friend 18 : Daylight 19 : All Of The Girls You Loved Before . def search(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # # . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed . | . deathrace = { &quot;title&quot;: &quot;Death Race For Love&quot;, &quot;artist&quot;: &quot;Juice WRLD&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Rap&quot;], &quot;tracks&quot;: { 1: &quot;Empty&quot;, 2: &quot;Rider&quot;, 3: &quot;10 Feet&quot;, 4: &quot;Big&quot;, 5: &quot;Flaws and Sins&quot;, 6: &quot;Fast&quot;, 7: &quot;ON GOD (ft. Young Thug)&quot;, 8: &quot;She&#39;s The One&quot;, 9: &quot;The Bees Knees&quot;, 10: &quot;Syphilis&quot;, 11: &quot;Maze&quot;, 12: &quot;HeMotions&quot;, 13: &quot;Robbery&quot;, 14: &quot;Hear Me Calling&quot;, 15: &quot;Won&#39;t Let Go&quot;, 16: &quot;Feeling&quot;, 17: &quot;Ring Ring (ft. Clever)&quot;, 18: &quot;Desire&quot;, 19: &quot;Out My Way&quot;, 20: &quot;Who Shot Cupid?&quot;, 21: &quot;Make Believe&quot;, } } print(deathrace) . {&#39;title&#39;: &#39;Death Race For Love&#39;, &#39;artist&#39;: &#39;Juice WRLD&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Rap&#39;], &#39;tracks&#39;: {1: &#39;Empty&#39;, 2: &#39;Rider&#39;, 3: &#39;10 Feet&#39;, 4: &#39;Big&#39;, 5: &#39;Flaws and Sins&#39;, 6: &#39;Fast&#39;, 7: &#39;ON GOD (ft. Young Thug)&#39;, 8: &#34;She&#39;s The One&#34;, 9: &#39;The Bees Knees&#39;, 10: &#39;Syphilis&#39;, 11: &#39;Maze&#39;, 12: &#39;HeMotions&#39;, 13: &#39;Robbery&#39;, 14: &#39;Hear Me Calling&#39;, 15: &#34;Won&#39;t Let Go&#34;, 16: &#39;Feeling&#39;, 17: &#39;Ring Ring (ft. Clever)&#39;, 18: &#39;Desire&#39;, 19: &#39;Out My Way&#39;, 20: &#39;Who Shot Cupid?&#39;, 21: &#39;Make Believe&#39;}} . print(deathrace.get(&#39;artist&#39;)) # or print(deathrace[&#39;tracks&#39;]) . Juice WRLD {1: &#39;Empty&#39;, 2: &#39;Rider&#39;, 3: &#39;10 Feet&#39;, 4: &#39;Big&#39;, 5: &#39;Flaws and Sins&#39;, 6: &#39;Fast&#39;, 7: &#39;ON GOD (ft. Young Thug)&#39;, 8: &#34;She&#39;s The One&#34;, 9: &#39;The Bees Knees&#39;, 10: &#39;Syphilis&#39;, 11: &#39;Maze&#39;, 12: &#39;HeMotions&#39;, 13: &#39;Robbery&#39;, 14: &#39;Hear Me Calling&#39;, 15: &#34;Won&#39;t Let Go&#34;, 16: &#39;Feeling&#39;, 17: &#39;Ring Ring (ft. Clever)&#39;, 18: &#39;Desire&#39;, 19: &#39;Out My Way&#39;, 20: &#39;Who Shot Cupid?&#39;, 21: &#39;Make Believe&#39;} . Favorite Taylor Swift Song . My favorite Taylor Swift song is &quot;Would&#39;ve, Could&#39;ve, Should&#39;ve.&quot; This song is on her most recent album, Midnights. She released three more songs at 3 AM called Midnights (3 AM Edition), and that song was one of her bonus tracks. I thought the flow of the song was very good, and it maintained a consistent beat. It really did feel like a song that one would play at 3 AM in the morning when in deep thought. Since Swift&#39;s album was supposed to resemble her inner thoughts at midnight, and how she used to think deeply, the song &quot;Would&#39;ve, Could&#39;ve, Should&#39;ve&quot; is the perfect embodiment of the message and theme that she wants to get across in this album. In addition, this song is a sequel to &quot;Dear John,&quot; which was about Taylor not liking the forced relationship that she had with a grown man, even though she was really young and felt that she was not ready for a relationship. . Here is an except of the chorus: . &quot;And now that I&#39;m grown I&#39;m scared of ghosts Memories feel like weapons&quot; . This is reminiscent of her memories of her not-so-good relationship with John. The compatibility of those two songs is quite commendable. . Also the song sounds very good, and who does not like listening to Taylor Swift? Right? .",
            "url": "https://rohanagr.github.io/RohanRepository/2023/03/29/DS-hashmaps.html",
            "relUrl": "/2023/03/29/DS-hashmaps.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 4.3a Parallel Computing",
            "content": "Analyzing Parallel Computing . Once again we will use image lab, this time to review Parallel Computing. . Change baseWidth in this line in code to increase computation requirements:def process_image(image, baseWidth=512): For instance 320, 512, 1024, 2048, 4096.- Compare Sequential and Parallel computing code and time to achieve outputs | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as PIL Image is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Scale to baseWidth def scale_image(img, baseWidth): scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Convert pixels to Grey Scale def grey_pixel(pixel): average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: return( (average, average, average, pixel[3]) ) # PNG format else: return( (average, average, average) ) # Convert pixels to Red Scale def red_pixel(pixel): if len(pixel) &gt; 3: return( (pixel[0], 0, 0, pixel[3]) ) # PNG format else: return( (pixel[0], 0, 0) ) # Convert pixels to Red Scale def green_pixel(pixel): if len(pixel) &gt; 3: return( (0, pixel[1], 0, pixel[3]) ) # PNG format else: return( (0, pixel[1], 0) ) # Convert pixels to Red Scale def blue_pixel(pixel): if len(pixel) &gt; 3: return( (0, 0, pixel[2], pixel[3]) ) # PNG format else: return( (0, 0, pixel[2]) ) # Set Properties of Image, Scale, and convert to Base64 def image_management(image, baseWidth): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img, baseWidth) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size image[&#39;numpy&#39;] = np.array(img.getdata()) # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Grey HTML # each pixel in numpy array is turned to grey # then resulting list, using List Comprehension, is put back into img img.putdata([grey_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Red HTML img.putdata([red_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_red&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Green HTML img.putdata([green_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_green&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Blue HTML img.putdata([blue_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_blue&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) def process_image(image, baseWidth=320): image_management(image, baseWidth) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- images --&quot;) display(HTML(image[&#39;html&#39;])) display(HTML(image[&#39;html_grey&#39;])) display(HTML(image[&#39;html_red&#39;])) display(HTML(image[&#39;html_green&#39;])) display(HTML(image[&#39;html_blue&#39;])) . Sequential Processing . The for loop iterates over the list of images and processes them one at a time, in order. . if __name__ == &quot;__main__&quot;: # setup default images images = image_data() # Sequential Processing for image in images: process_image(image) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- images -- . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- images -- . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- images -- . . Parallel Computing . In parallel or concurrent mode, the ThreadPoolExecutor is used to submit each image to a separate worker thread, allowing multiple images to be processed simultaneously. Multithreading allows multiple concurrent tasks of a process at the same time. The executor.map() method is used to apply the process_image function to each image in the images list. . The order in which the images are processed is not guaranteed, as threads are performed simultaneously. | . import concurrent.futures # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # setup default images images = image_data() # Parallel Processsing # executor allocates threads, it considers core execution capability of machine with concurrent.futures.ThreadPoolExecutor() as executor: executor.map(process_image, images) # order is not predictable print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- images -- . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- images -- . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- images -- . . Observing Parallel Computing and Threads . You can observe Processes, CPU Percentage, and Threads with Tools on your machine. Common tools to monitor performance are Activity Monitor on MacOS or Task Manager on Windows. . This example is using top launched in VSCode Terminal. (mac) | Try top -H for linux. PID is Process ID. | COMMAND is task running on machine. Python is activated when running this Jupyter notebook. | #TH is number of threads. This increases from 15/1 to 18/1 on my machine when running python parallel computing example. | . | . Hacks . AP Classroom. Provide answers and thoughts on theoritical question form college board Video in section 4.3. They start at about the 9 minute mark. . Example 1 | Example 2 | . Data Structures. Build a List Comprehension example . list = [calc(item) for item in items] | . AP Classroom . Example 1: The minimum amount of time for all three processes to run would be 50 seconds. The longest process does take 50 seconds, and we can assign that task to one processor, while the other processor does the lesser tasks (ones that take 10 and 30 seconds). | Example 2: The time difference for execution should be 25 seconds. When running in parallel, the minimum execution time is 45 seconds. When running the process on an individual processor, the minimum time taken is 70 seconds. 70-45 = 25. | Example 3: In order to get the fastest time to run both processes, it is best to assign A and B to one processor, and assign C and D to another one. Since both process pairs have a total time of 50 seconds, running those in parallel would reduce the time significantly. | . teams = [&quot;Padres&quot;, &quot;Dodgers&quot;, &quot;Yankees&quot;, &quot;Red Sox&quot;, &quot;White Sox&quot;, &quot;Mariners&quot;] newteam = [x for x in teams] teamlist = [x for x in teams if x != &quot;Padres&quot;] newlist = [x for x in teams if teams.index(x) &gt; 2] print(newteam) print(teamlist) print(newlist) . [&#39;Padres&#39;, &#39;Dodgers&#39;, &#39;Yankees&#39;, &#39;Red Sox&#39;, &#39;White Sox&#39;, &#39;Mariners&#39;] [&#39;Dodgers&#39;, &#39;Yankees&#39;, &#39;Red Sox&#39;, &#39;White Sox&#39;, &#39;Mariners&#39;] [&#39;Red Sox&#39;, &#39;White Sox&#39;, &#39;Mariners&#39;] . stats = { &quot;Manny Machado&quot;: .298, &quot;Xander Bogaerts&quot;: .307, &quot;Juan Soto&quot;: .246, &quot;Fernando Tatis Jr.&quot;: .281, &quot;Jake Cronenworth&quot;: .240, &quot;Ha-Seong Kim&quot;: .251, &quot;Trent Grisham&quot;: .182, &quot;Matt Carpenter&quot;: .305 } newstat = [x for x in stats] lists = [x for x in stats if stats [x] &lt; .200] print(newstat) print(lists) . [&#39;Manny Machado&#39;, &#39;Xander Bogaerts&#39;, &#39;Juan Soto&#39;, &#39;Fernando Tatis Jr.&#39;, &#39;Jake Cronenworth&#39;, &#39;Ha-Seong Kim&#39;, &#39;Trent Grisham&#39;, &#39;Matt Carpenter&#39;] [&#39;Trent Grisham&#39;] .",
            "url": "https://rohanagr.github.io/RohanRepository/2023/03/29/AP-unit4-3a-parallel-computing.html",
            "relUrl": "/2023/03/29/AP-unit4-3a-parallel-computing.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "CPT Idea",
            "content": "For the CPT Im thinking about adding some object oriented programming and maybe tweaks to the images. For example, when the user clicks the “find which car best matches your preference” button, I am looking to add more from previous lessons within class. I want to add a filter to images with an onclick function which shows that uses numPY. However I would like to add more to it by cleaning up the frontend and the backend by making it look nicer and adding a cleaner perspective, also I would like to clean junk from the flask such as users.py and other things making it differentiate from other projects. With a backend perspective in order to finish my project I Would like add a OOP function that when something it clicked with booked it updates and changes leaving my project to be better. I will also keep space and time complexity in mind in order to make sure that the least time and space is used in the program while ensuring that the best product is visible for everyone to see. .",
            "url": "https://rohanagr.github.io/RohanRepository/posts/2023/03/27/CPTidea.html",
            "relUrl": "/posts/2023/03/27/CPTidea.html",
            "date": " • Mar 27, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "MCQ 4 Test Corrections",
            "content": "Score: 49/50 . . Top 10 highest GPAs are less important than suggesting other products based on consumer history. | .",
            "url": "https://rohanagr.github.io/RohanRepository/posts/2023/03/26/unit2MC.html",
            "relUrl": "/posts/2023/03/26/unit2MC.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . What is the purpose of identity Column in SQL database? | What is the purpose of a primary key in SQL database? | What are the Data Types in SQL table? | . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_dob&#39;, &#39;DATE&#39;, 0, None, 0) . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? | Same for cursor object? | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? | Is &quot;results&quot; an object? How do you know? | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$U7IMWF8JQwN3SRxd$3f5199462aac241d70e6cca9bd1344e5f6f1ee9c8c9cf6a4ef561a578c416744&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$XQGhe8cVAuQLdcTq$d4fa50e5241cc00ddec40a62b77d58d9b5d9486f591a925734e11a04bddb7b73&#39;, &#39;2023-03-16&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$UDlk1LJlHCEKANkY$6e3295b3433866fd66d292732305e86400e222b19228154fcca91c406394e705&#39;, &#39;2023-03-16&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$SqjBEAvwrTXvUJGb$ea4d852ded9edf600262f66bb1df2115b55461d6cc75c41588e2c840d005dfb2&#39;, &#39;2023-03-16&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$uiLjhq85HINIG1TT$ddfd2c6c61d1e8d3a022218886d48de243fe22fac53439db7bd8755bbb443aa4&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$AS41m0XpcGphD8qz$1dfafcee43f0c640802c3503f426d5c5300482fdd5c5aa6dbaae254a1468c4f4&#39;, &#39;1921-10-21&#39;) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compore create() in both SQL lessons. What is better or worse in the two implementations? | Explain purpose of SQL INSERT. Is this the same as User init? | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? | Explain try/except, when would except occur? | What code seems to be repeated in each of these examples to point, why is it repeated? | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? | In the print statemements, what is the &quot;f&quot; and what does {uid} do? | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? | Could you refactor this menu? Make it work with a List? | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . A new user record RohanAgr01 has been created . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | . Reference... sqlite documentation . def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() results = cursor.execute(&#39;SELECT * FROM MLB&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Manny Machado&#39;, &#39;machados13&#39;, &#39;Third Base&#39;, &#39;San Diego Padres&#39;, 13) (2, &#39;Mike Trout&#39;, &#39;miketrout&#39;, &#39;Center Field&#39;, &#39;Los Angeles Angels&#39;, 27) (3, &#39;Blake Snell&#39;, &#39;snellzilla4&#39;, &#39;Pitcher&#39;, &#39;San Diego Padres&#39;, 4) (4, &#39;Aaron Judge&#39;, &#39;thejudge44&#39;, &#39;Right Field&#39;, &#39;New York Yankees&#39;, 99) (5, &#39;Julio Rodriguez&#39;, &#39;jrodshow44&#39;, &#39;Center Field&#39;, &#39;Seattle Mariners&#39;, 44) (6, &#39;Justin Verlander&#39;, &#39;justinverlander&#39;, &#39;Pitcher&#39;, &#39;New York Mets&#39;, 25) (7, &#39;Bryce Harper&#39;, &#39;bryceharper3&#39;, &#39;Designated Hitter&#39;, &#39;Philadelphia Phillies&#39;, 3) (8, &#39;Joe Musgrove&#39;, &#39;mu59grove&#39;, &#39;Pitcher&#39;, &#39;San Diego Padres&#39;, 44) .",
            "url": "https://rohanagr.github.io/RohanRepository/2023/03/21/AP-unit2-4b.html",
            "relUrl": "/2023/03/21/AP-unit2-4b.html",
            "date": " • Mar 21, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "CB 3rd MCQ",
            "content": "Score: 39/50 . A lot of questions I got wrong were about programming a robot to navigate through a field. This was probably due to the fact that I misinterpreted the code lines and I may need to revisit loops and execute the code segments in my head one by one. .",
            "url": "https://rohanagr.github.io/RohanRepository/2023/03/14/CollegeBoardMCQ.html",
            "relUrl": "/2023/03/14/CollegeBoardMCQ.html",
            "date": " • Mar 14, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-09-AP-unit2-3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . KeyError Traceback (most recent call last) /mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2023-03-09-AP-unit2-3.ipynb Cell 11 in &lt;cell line: 2&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2023-03-09-AP-unit2-3.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; #sort values -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2023-03-09-AP-unit2-3.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; print(df.sort_values(by=[&#39;GPA&#39;])) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2023-03-09-AP-unit2-3.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; print() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2023-03-09-AP-unit2-3.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; #sort the values in reverse order File ~/anaconda3/lib/python3.9/site-packages/pandas/util/_decorators.py:311, in deprecate_nonkeyword_arguments.&lt;locals&gt;.decorate.&lt;locals&gt;.wrapper(*args, **kwargs) 305 if len(args) &gt; num_allow_args: 306 warnings.warn( 307 msg.format(arguments=arguments), 308 FutureWarning, 309 stacklevel=stacklevel, 310 ) --&gt; 311 return func(*args, **kwargs) File ~/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py:6313, in DataFrame.sort_values(self, by, axis, ascending, inplace, kind, na_position, ignore_index, key) 6309 elif len(by): 6310 # len(by) == 1 6312 by = by[0] -&gt; 6313 k = self._get_label_or_level_values(by, axis=axis) 6315 # need to rewrap column in Series to apply key function 6316 if key is not None: 6317 # error: Incompatible types in assignment (expression has type 6318 # &#34;Series&#34;, variable has type &#34;ndarray&#34;) File ~/anaconda3/lib/python3.9/site-packages/pandas/core/generic.py:1840, in NDFrame._get_label_or_level_values(self, key, axis) 1838 values = self.axes[axis].get_level_values(key)._values 1839 else: -&gt; 1840 raise KeyError(key) 1842 # Check for duplicates 1843 if values.ndim &gt; 1: KeyError: &#39;GPA&#39; . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390, 400], &quot;duration&quot;: [50, 40, 45, 60] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;, &quot;day4&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 3 400 60 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 day4 400 60 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3 entries, day1 to day3 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 3 non-null int64 1 duration 3 non-null int64 dtypes: int64(2) memory usage: 180.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . Early Seed award . Add this Blog to you own Blogging site. | Have all lecture files saved to your files directory before Tech Talk starts. Have data.csv open in vscode. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Amazing. . | When choosing a data set, think about the following... . Does it have a good sample size? | Is there bias in the data? | Does the data set need to be cleaned? | What is the purpose of the data set? | ... | . | Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) . | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. . Here are some suggestions... . Titanic Dataset:This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. | Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | . These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset... . Kaggle:The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. | UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Titanic Data Index([&#39;survived&#39;, &#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;embarked&#39;, &#39;class&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;deck&#39;, &#39;embark_town&#39;, &#39;alive&#39;, &#39;alone&#39;], dtype=&#39;object&#39;) survived pclass sex age sibsp parch class fare 0 0 3 male 22.0 1 0 Third 7.2500 1 1 1 female 38.0 1 0 First 71.2833 2 1 3 female 26.0 0 0 Third 7.9250 3 1 1 female 35.0 1 0 First 53.1000 4 0 3 male 35.0 0 0 Third 8.0500 .. ... ... ... ... ... ... ... ... 886 0 2 male 27.0 0 0 Second 13.0000 887 1 1 female 19.0 0 0 First 30.0000 888 0 3 female NaN 1 2 Third 23.4500 889 1 1 male 26.0 0 0 First 30.0000 890 0 3 male 32.0 0 0 Third 7.7500 embark_town 0 Southampton 1 Cherbourg 2 Southampton 3 Southampton 4 Southampton .. ... 886 Southampton 887 Southampton 888 Southampton 889 Cherbourg 890 Queenstown [891 rows x 9 columns] . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . survived pclass sex age sibsp parch fare alone embarked_C 0 0 3 1 22.0 1 0 7.2500 0 0.0 1 1 1 0 38.0 1 0 71.2833 0 1.0 2 1 3 0 26.0 0 0 7.9250 1 0.0 3 1 1 0 35.0 1 0 53.1000 0 0.0 4 0 3 1 35.0 0 0 8.0500 1 0.0 .. ... ... ... ... ... ... ... ... ... 705 0 2 1 39.0 0 0 26.0000 1 0.0 706 1 2 0 45.0 0 0 13.5000 1 0.0 707 1 1 1 42.0 0 0 26.2875 1 0.0 708 1 1 0 22.0 0 0 151.5500 1 0.0 710 1 1 0 24.0 0 0 49.5042 1 1.0 embarked_Q embarked_S 0 0.0 1.0 1 0.0 0.0 2 0.0 1.0 3 0.0 1.0 4 0.0 1.0 .. ... ... 705 0.0 1.0 706 0.0 1.0 707 1.0 0.0 708 0.0 1.0 710 0.0 0.0 [564 rows x 11 columns] . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . survived 0.000000 pclass 2.464072 sex 0.844311 age 31.073353 sibsp 0.562874 parch 0.398204 fare 24.835902 alone 0.616766 embarked_C 0.185629 embarked_Q 0.038922 embarked_S 0.775449 dtype: float64 . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . survived 1.000000 pclass 1.878261 sex 0.326087 age 28.481522 sibsp 0.504348 parch 0.508696 fare 50.188806 alone 0.456522 embarked_C 0.152174 embarked_Q 0.034783 embarked_S 0.813043 dtype: float64 . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . survived 1.0000 pclass 3.0000 sex 1.0000 age 80.0000 sibsp 4.0000 parch 5.0000 fare 512.3292 alone 1.0000 embarked_C 1.0000 embarked_Q 1.0000 embarked_S 1.0000 dtype: float64 survived 1.00 pclass 1.00 sex 0.00 age 0.75 sibsp 0.00 parch 0.00 fare 0.00 alone 0.00 embarked_C 0.00 embarked_Q 0.00 embarked_S 0.00 dtype: float64 . Machine Learning Visit Tutorials Point . Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python. . Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . | Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. . Decision Trees, prediction by a piecewise constant approximation. | Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . DecisionTreeClassifier Accuracy: 0.7705882352941177 LogisticRegression Accuracy: 0.788235294117647 . /Users/johnmortensen/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( .",
            "url": "https://rohanagr.github.io/RohanRepository/2023/03/09/AP-unit2-3.html",
            "relUrl": "/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "Night at the Museum Blog",
            "content": "Presentation Refection . Last trimester, the project was not as me and my group intended. There were many holes due to inexperience and consistent crashes. However, this trimester, my group and I were able to get a very good presentation running and was able to show a much more complete product than last trimester. Although I could have fixed a few things regarding the look and feel of the project, I was able to show exactly what I wanted to show. The connection between the API and the frontend was always shaky, so I had to put some other Javascript into the program in order to make the buttons work as expected. However, I was happy that the other elements of the program worked, and I was definetely happier with this performance than last tri’s performance. . Night At The Museum Overall Experience . Overall this NATM felt more organized and less chaotic than last trimester. The CSP room had fewer people and it was evident that there were certain stations for each group. Even the room across from A101 was not as crowded and chaotic. I had a lot of fun listening to the band and orchestra that was on display, as well as the display of digital and contemporary art in various classrooms. . Evaluation 1 . . I liked the shape of the donuts and the workspace around it. It is reminiscent of an earlier computer animation project that I did in freshman year. It is fairly detailed with foreground and background. I liked the lighting and the overall orientation of every object in the artwork. One thing I would have liked to see was a larger donut… I am very confused as to what the main point of the image is. I would want to see a more prominent foreground, as all elements seem like they are overlapping each other. . Evaluation 2 . . I liked the shape of the teapot. It is very realistic, and considering that it is made from ceramic material, it feels ancient and gives a nice feeling of old. The realism is very prominent in the artwork. I would have liked more color. It may not need to be as ornate as other designs and ceramic artworks, but some color would make it feel all the more real, and perhaps even enhance the ancientness that comes with it. .",
            "url": "https://rohanagr.github.io/RohanRepository/2023/02/23/finalsblog.html",
            "relUrl": "/2023/02/23/finalsblog.html",
            "date": " • Feb 23, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "5.5 and 5.6 blogs",
            "content": "Big Idea 5.5 –&gt; Legal and Ethical Concerns . Patents often issued for people / companies who are innovating copyright claims are given to producers and creators This is often done to protect the originality of the works of creators, and to ensure that others don’t steal them This power should not be abused, as people can often get frustrated when they want to use other people’s music or other products for harmless purposes. some demand royalties for music and other copyrighted things. Each GitHub repo has a certain key, as well as fastpages. Certain digital rights should not be infringed upon. . Big Idea 5.6 –&gt; Safe Computing . It is easy to get into scams and other things which may look enticing, but have very bad consequences. It is important that we stay safe on the internet. Using AdBlockers always help, as scams and viruses often take the form of ads. 2FA (2-Factor Authentication) allows for a more secure login process, and ensures that the user is the real person who created the account. Certain things are encoded and decoded using a key. This is also seen in the Fastpages and GitHub keys. VPNs help keep your IP hidden, and allow for safer browsing on public wifi Senior Citizens and young users are more likely to succumb to scams and stuff since they are not experienced internet users. Using VPNs, incognito, and other IP masking / secure methods would allow for safe computing and less data theft. .",
            "url": "https://rohanagr.github.io/RohanRepository/2023/02/13/thirdset.html",
            "relUrl": "/2023/02/13/thirdset.html",
            "date": " • Feb 13, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "5.3 and 5.4 blogs",
            "content": "## Big Idea 5.3 Computing Bias . We discussed about how most default assistant voices are female instead of male. Some people wondered if it was anything to do with stereotypes, and how females are generally seen as “assistants” for males. However, people agreed with a possible process which included a survey about which voice would be more suitable. People might have preferred the female voice over the male voice, and hence it caught on. . Sometimes, bias can bleed to racism, as we saw in the HP computer. The entire class agreed that the computer camera was modified to scan the white person instead of the black person. We wanted to believe that the original computer camera AI was not edited, but we would never know. . Our code for this project includes electric cars, and information about them. This proves a little advantageous to us, as this information is not only gender-neutral, but does not include race. As our facts and information is as pristine and to the point as possible, bias will most likely be minimal, if not gone completely. . ## Big Idea 5.4: Crowdsourcing . We talked about Wikipedia, blockchains, and certain data which represents a lot of people. We mentioned how crowdsourcing is useful for helping people make informed decisions, and can also give a general idea of certain trends and other things happening in society. However, people would want the least amount of private information (SSN, street address, etc) out on the internet, as it could lead to theft and other negative things Crowdsourcing is generally a good thing, as it shows what is liked and what is disliked among many things. . Our project depends on crowdsourcing, in a sense. Since we want to help people make informed decisions on what electric cars they would want to buy. We need some kind of public opinion about which car is the most / least popular. This is seen in our “likes / dislikes” system in our website. .",
            "url": "https://rohanagr.github.io/RohanRepository/2023/02/02/BiasBlogs.html",
            "relUrl": "/2023/02/02/BiasBlogs.html",
            "date": " • Feb 2, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "CB 2nd MCQ",
            "content": "Overall score: 29/50 . many errors were common, such as algorithm implementation and interpreting code. | Repeat errors | Vocabulary needs to be revisited. | . Some sample questions I missed . . .",
            "url": "https://rohanagr.github.io/RohanRepository/2023/01/31/MCQ.html",
            "relUrl": "/2023/01/31/MCQ.html",
            "date": " • Jan 31, 2023"
        }
        
    
  
    
        ,"post24": {
            "title": "Tuesday Tech Talk Post",
            "content": "Benefits of Computing . Communication: Messages can be sent instantaneously through a phone or laptop, instead of waiting days for mail or wait for a face to face connection. People can send links and use the internet, which may make for more interesting and lasting conversations. | Opportunities: computing and networking allow for easy job searches, such as finding internships or researching which college to go to. Nowadays, a lot of activities and opportunities are posted on the internet, it is just a matter of finding it. | Knowledge: The internet is full of information on any and every topic. One can easily educate themselves through google searches, website articles, and videos posted online. | . Some Harmful Effects of Computing . Hacking: there are hackers out there trying to steal data, information, and other things which are often meant only for that person. Credit card data, SSNs, and other private info is often stolen | Cyberbullying is huge, as people can go online completely anonymous and pick on a person of their choice. They do not get caught often due to them being completely anonymous. | Addiction: Some apps are designed to hook people onto the platform, and sometimes it works. Addiction can make us forgo our responsibilities and have many detrimental effects on productivity and certain performances in the long run. | . Dopamine Effects . When one is on social media or playing a video game, the dopamine effect is real. This is why video games can be seen as a stress reliever at times, but if done too much, it can cause addiction. Video games used to impact my personal studies and projects, but I have largely kept it in check. | . The Digital Divide . One person can empower themselves in the digital world by obtaining a computer or phone. As long as they have internet access and a computer at their disposal, they have the power to leverage the digital world. | Someone who is empowered can donate their devices to people in need, and allow them to access the digital world and leverage it for their gain. | I run a nonprofit with a few friends called the Technology Relief Initiative, which collects old, damaged, and / or other unused devices, refurbish them, and donate them to the underprivileged. We have collected, refurbished, and donated nearly 200 devices to refugees and other underprivileged students in San Diego. We plan on going further and reaching out to other counties and cities in the future. | .",
            "url": "https://rohanagr.github.io/RohanRepository/2023/01/24/TechTalkPost.html",
            "relUrl": "/2023/01/24/TechTalkPost.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post25": {
            "title": "Notes",
            "content": "Rebecca made a google slides showed the purpose of the program and certain procedures which will help them achieve whatever goal they want including a database to store and update data (personal database) There are many tabs for clubs with their reviews The google slides have a flow control –&gt; procedures which will allow the code to be executed there are multiple databases, with permissions as to who can and cannot access it. Frontend includes tables Club search using keywords and database AWS for backend, and github pages for frontend There are modeling relationships and showing the flow from backend to frontend Has a timeline –&gt; each person must have a certain set of tasks, which are completed by certain deadlines scrum boards for organization .",
            "url": "https://rohanagr.github.io/RohanRepository/2023/01/17/notes.html",
            "relUrl": "/2023/01/17/notes.html",
            "date": " • Jan 17, 2023"
        }
        
    
  
    
        ,"post26": {
            "title": "Performance Tasks 3-6 Grading",
            "content": "Performance Task 3 . Category Points Awarded Explanation . Program Purpose and Function | 0 | The video showed a clear demonstration of what was supposed to happen in the code. However, the written explanation left a lot to be desired. I did not see a problem being solved or some creative interest being pursued. | . Data Abstraction | 1 | Two code segments were shown. One had a list and the other had the list in action. | . Managing Complexity | 1 | The student implemented an array to store more than one variable, and explained what would happen if the array was not there. | . Procedural Abstraction | 1 | The student had a set procedure which went over what goes on in the code. Multiple procedures are included. Parameters are also clearly defined. | . Algorithm Implementation | 1 | The student defines the function which is being used, and describes the loops / iterations. | . Testing | 1 | Calls were tested and the student did give one example. | . Performance Task 4 . Category Points Awarded Explanation . Program Purpose and Function | 1 | The program clearly works, the video shows everything the student wanted to show, and the program purpose does involve some creative aspect and interest being pursued. | . Data Abstraction | 1 | The student shows that the user types three things in, and the input is stored as a list. It is then used to generate a poem. | . Managing Complexity | 1 | Explains why the list manages complexity, and states that the student would have to use many variables to account for each item in the list. | . Procedural Abstraction | 1 | The student explicitly states the parameters and how they follow a set procedure. The code segment shows where the calling occurs. | . Algorithm Implementation | 1 | The student thoroughly explains the algorithm used, and specifies the use of selections and iterations. | . Testing | 1 | Both calls are described, including how it works and what the desired result is. | . Performance Task 5 . Category Points Awarded Explanation . Program Purpose and Function | 1 | The student gives the purpose of the program, and it works as per the video. | . Data Abstraction | 1 | There are lists being used in the program, and other code segments are properly showing that list in use. | . Managing Complexity | 1 | The student mentions the effectiveness of the list, and the consequences of not using one. | . Procedural Abstraction | 1 | The student clearly mentions what procedure they are using, and how it contributes to the overall code. | . Algorithm Implementation | 1 | The student uses a series of loops and list optimization in order to produce an effective program. | . Testing | 1 | Two calls are used, and the student explains the result and the intentions of both the calls. | . Performance Task 6 . Category Points Awarded Explanation . Program Purpose and Function | 1 | The student clearly shows the program purpose, and what the creative intent was behind it. | . Data Abstraction | 1 | There is a list called “guesses” and the following code segments show the list in use. | . Managing Complexity | 1 | Mentions how the user might have infinite guesses, and that it can get very complicated when trying to figure out which letter is right or in the right place. | . Procedural Abstraction | 1 | The student does explain the procedure, and lists the parameters which the code fulfills. | . Algorithm Implementation | 1 | There is an algorithm called “check answer” with a series of if / then statements. | . Testing | 1 | There are two calls utilized, and the implementations and desired results are shown. | . Performance Task 7 . Category Points Awarded Explanation . Program Purpose and Function | 1 | The student gives the purpose of the program, and it works as per the video. | . Data Abstraction | 0 | The student met only 2 of the three required criteria for data abstraction. The 2nd code segment does not show the data being accessed from the list. | . Managing Complexity | 0 | The lists and correspondants could have easily been written in another way. | . Procedural Abstraction | 0 | The student does not mention how the procedures contributes to the overall program. | . Algorithm Implementation | 1 | The student uses an algorithm and uses sequencing, iteration, and selection to execute the program. | . Testing | 1 | Two calls are used, and the student explains the result and the intentions of both the calls. | . Performance Task 8 . Category Points Awarded Explanation . Program Purpose and Function | 1 | The student gives the purpose of the program, and it works as per the video. | . Data Abstraction | 1 | There are lists being used in the program, and other code segments are properly showing that list in use. | . Managing Complexity | 1 | The student mentions the effectiveness of the list, and the consequences of not using one. | . Procedural Abstraction | 1 | The student clearly mentions what procedure they are using, and how it contributes to the overall code. | . Algorithm Implementation | 1 | The student uses a series of loops and list optimization in order to produce an effective program. | . Testing | 1 | Two calls are used, and the student explains the result and the intentions of both the calls. | . Performance Task 9 . Category Points Awarded Explanation . Program Purpose and Function | 1 | The student gives the purpose of the program, and it works as per the video. | . Data Abstraction | 0 | There are lists being used in the program, and other code segments are properly showing that list in use. | . Managing Complexity | 0 | The student mentions the effectiveness of the list, and the consequences of not using one. | . Procedural Abstraction | 0 | The student clearly mentions what procedure they are using, and how it contributes to the overall code. | . Algorithm Implementation | 0 | The student uses a series of loops and list optimization in order to produce an effective program. | . Testing | 0 | Two calls are used, and the student explains the result and the intentions of both the calls. | . Performance Task 10 . Category Points Awarded Explanation . Program Purpose and Function | 1 | The student gives the purpose of the program, and it works as per the video. | . Data Abstraction | 1 | The description for the list is inaccurate. | . Managing Complexity | 1 | The student does not mention how the code could be rewritten without the list. | . Procedural Abstraction | 1 | The student clearly mentions what procedure they are using, and how it contributes to the overall code. | . Algorithm Implementation | 1 | The student uses a series of loops and list optimization in order to produce an effective program. | . Testing | 1 | Two calls are used, and the student explains the result and the intentions of both the calls. | .",
            "url": "https://rohanagr.github.io/RohanRepository/2023/01/16/PerformanceTaskGradingTwo.html",
            "relUrl": "/2023/01/16/PerformanceTaskGradingTwo.html",
            "date": " • Jan 16, 2023"
        }
        
    
  
    
        ,"post27": {
            "title": "Performance Task 1 and 2 Grading",
            "content": "Performance Task 1 . Row 1: Program Purpose . The video clearly demonstrates the running of the program (input, functionality, output) | There is no description of a problem being solved or a creative interest being pursued. | POINTS AWARDED: 0 | . Row 2: Data Abstraction . There is a list which stores data in sideIndex. | 2 code segments are given and the if loops are used heavily to execute the program | POINTS AWARDED: 1 | . Row 3: Managing Complexity . The jit explained everything well, however there was this code segment which was not used in the program: “ sideIndex = [‘A: B: C = ‘ + sideRatio, ‘Equilateral’, ‘Isosceles’, ‘Scalene’] | This is an irrelevant piece of code as it does not execute in the argument. | POINTS AWARDED: 0 | . Row 4: Procedural Abstraction . There are two functions shown in the code, one related to the sideIndex list, and the other related to the calculations. | The code looks like it was student developed | I don’t see explicit parameters | POINTS AWARDED: 0 | . Row 5: Algorithm Implementation . There are multiple iterations being conducted through if and for loops in order to determine the ratios for the side lengths. | They select a string and output it | There is sequencing in place, where they use a specific formula to calculate the ratios for each side length relative to another side length. (starts from A, then goes to B, and then C.) | POINTS AWARDED: 1 | . Overall Score: 2/5 . Performance Task 2 . Row 1: Program Purpose . The student clearly states the purpose for the program was for entertainment | The user input was from the mouse cursor, and then you press a key for the simulation to activate | The program functions as intended | POINTS AWARDED: 1 | . Row 2: Data Abstraction . There is a list being used (grids, cells) | data can be stored or overwritten in order to correctly execute the simulation | The code segments which create the data storage and ones that can overwrite / add data are separate. | POINTS AWARDED: 1 | . Row 3: Managing Complexity . The student used a list to consolidate all 10,800 items which will be subject to change in the program. Without the list, it would be extremely hard to manage all those items. | The student does not explain if the code can be rewritten differently, or if the code fails to exist at all. | OVERALL SCORE: 0 | . Row 4: Procedural Abstraction . The procedure looks like it was student developed | There is a clear procedure listed, and it explains how the code is running, step by step | OVERALL SCORE: 1 | . Row 5: Algorithm Implementation . There is an algorithm in place using iterations and sequencing. | Adequate use of nested if-else statements | calling and checking functions | OVERALL SCORE: 1 | . Total Score: 4/5 .",
            "url": "https://rohanagr.github.io/RohanRepository/2023/01/04/PerformanceTaskGrading.html",
            "relUrl": "/2023/01/04/PerformanceTaskGrading.html",
            "date": " • Jan 4, 2023"
        }
        
    
  
    
        ,"post28": {
            "title": "Unit 3 Lesson 16, Student Copy",
            "content": "Hack #1 - Class Notes . Write any extra notes you have here . Simulations - abstractions that mimic more complex realities, problems, or phenomena. ex: school daily routines... . necessary to remove specific details or simplify aspects | allow for formulation of hypothesis | varying set of values to reflect a changing state | . Hack #2 - Functions Classwork . import random def mycloset(): clothes = [&quot;Padres Hoodie&quot; &quot;Jeans&quot; &quot;Shoes&quot; ] newbies = [&quot;Yellowstone Merch&quot; &quot;Track Pants&quot; &quot;FlipFlops&quot;] x = random.randint(2, myclothes) y = random.randint(2, newbies) return mycloset() mycloset() . NameError Traceback (most recent call last) /mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-16-GroupSixteen.ipynb Cell 4 in &lt;cell line: 10&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-16-GroupSixteen.ipynb#X21sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; y = random.randint(2, newbies) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-16-GroupSixteen.ipynb#X21sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; return mycloset() &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-16-GroupSixteen.ipynb#X21sdnNjb2RlLXJlbW90ZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; mycloset() /mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-16-GroupSixteen.ipynb Cell 4 in mycloset() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-16-GroupSixteen.ipynb#X21sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; clothes = [&#34;Padres Hoodie&#34; &#34;Jeans&#34; &#34;Shoes&#34; ] &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-16-GroupSixteen.ipynb#X21sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; newbies = [&#34;Yellowstone Merch&#34; &#34;Track Pants&#34; &#34;FlipFlops&#34;] -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-16-GroupSixteen.ipynb#X21sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; x = random.randint(2, myclothes) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-16-GroupSixteen.ipynb#X21sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; y = random.randint(2, newbies) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-16-GroupSixteen.ipynb#X21sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; return mycloset() NameError: name &#39;myclothes&#39; is not defined . import random def coinflip(): #def function randomflip = random.randint(0, 2 ) if randomflip == 0 or randomflip == 1: print(&quot;Heads&quot;) else: if randomflip == 2: print(&quot;Tails&quot;) t1 = coinflip() t2 = coinflip() t3 = coinflip() t4 = coinflip() t5 = coinflip() . Heads Heads Heads Heads Tails . from random import choice questions = [ (&quot;What is 3+2&quot;, &quot;5&quot;), (&quot;What is 1+1?&quot;, &quot;2&quot;), (&quot;what is 2+1&quot;, &quot;3&quot;), ] def ask_question(): question, answer = choice(questions) print(question) response = input() return response == answer correct = 0 answer = ask_question() Q1 = input() if Q1 == answer: answer = ask_question() Q2 = input() if Q2 == answer: Q3 = input() if Q3 == : Q4 = input() print( &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Input In [6] answer = ask_question() ^ IndentationError: expected an indented block . Hack #3 - Binary Simulation Problem . import random def randomnum(): # function for generating random int generator = random.randint(0, 255) return x def converttobin(n): # function for converting decimal to binary -- def survivors(binary): # function to assign position survivorstatus = [&quot;Jiya&quot;, &quot;Shruthi&quot;, &quot;Noor&quot;, &quot;Ananya&quot; , &quot;Peter Parker&quot;, &quot;Andrew Garfield&quot;, &quot;Tom Holland&quot;, &quot;Tobey Maguire&quot;] for bin in binary: if bin = 0: print (survivorstatus[bin] &quot;is a zombie&quot;) else: print (survivorstatus[num] &quot;is a survivor&quot;) # replace the names above with your choice of people in the house . Hack #4 - Thinking through a problem . create your own simulation involving a dice roll | should include randomization and a function for rolling + multiple trials | . import random def diceroll(): x = random.randint(1,6) return x roll1 = diceroll() roll2 = diceroll() roll3 = diceroll() roll4 = diceroll() roll5 = diceroll() roll6 = diceroll() print(&quot;Roll 1:&quot;, roll1) print(&quot;Roll 2:&quot;, roll2) print(&quot;Roll 3:&quot;, roll3) print(&quot;Roll 4:&quot;, roll4) print(&quot;Roll 5:&quot;, roll5) print(&quot;Roll 6:&quot;, roll6) . Roll 1: 2 Roll 2: 5 Roll 3: 1 Roll 4: 1 Roll 5: 4 Roll 6: 5 . Hack 5 - Applying your knowledge to situation based problems . Using the questions bank below, create a quiz that presents the user a random question and calculates the user&#39;s score. You can use the template below or make your own. Making your own using a loop can give you extra points. . A researcher gathers data about the effect of Advanced Placement®︎ classes on students&#39; success in college and career, and develops a simulation to show how a sequence of AP classes affect a hypothetical student&#39;s pathway.Several school administrators are concerned that the simulation contains bias favoring high-income students, however. answer options: The simulation is an abstraction and therefore cannot contain any bias | The simulation may accidentally contain bias due to the exclusion of details. | If the simulation is found to contain bias, then it is not possible to remove the bias from the simulation. | The only way for the simulation to be biased is if the researcher intentionally used data that favored their desired output. | | . | Jack is trying to plan his financial future using an online tool. The tool starts off by asking him to input details about his current finances and career. It then lets him choose different future scenarios, such as having children. For each scenario chosen, the tool does some calculations and outputs his projected savings at the ages of 35, 45, and 55.Would that be considered a simulation and why? answer options No, it&#39;s not a simulation because it does not include a visualization of the results. | No, it&#39;s not a simulation because it does not include all the details of his life history and the future financial environment. | Yes, it&#39;s a simulation because it runs on a computer and includes both user input and computed output. | Yes, it&#39;s a simulation because it is an abstraction of a real world scenario that enables the drawing of inferences. | | . | Sylvia is an industrial engineer working for a sporting goods company. She is developing a baseball bat that can hit balls with higher accuracy and asks their software engineering team to develop a simulation to verify the design.Which of the following details is most important to include in this simulation? answer options Realistic sound effects based on the material of the baseball bat and the velocity of the hit | A depiction of an audience in the stands with lifelike behavior in response to hit accuracy | Accurate accounting for the effects of wind conditions on the movement of the ball | A baseball field that is textured to differentiate between the grass and the dirt | | . | Ashlynn is an industrial engineer who is trying to design a safer parachute. She creates a computer simulation of the parachute opening at different heights and in different environmental conditions.What are advantages of running the simulation versus an actual experiment? answer options The simulation will not contain any bias that favors one body type over another, while an experiment will be biased. | The simulation can be run more safely than an actual experiment | The simulation will accurately predict the parachute&#39;s safety level, while an experiment may be inaccurate due to faulty experimental design. | The simulation can test the parachute design in a wide range of environmental conditions that may be difficult to reliably reproduce in an experiment. | | this question has 2 correct answers | . | YOUR OWN QUESTION; can be situational, pseudo code based, or vocab/concept based | YOUR OWN QUESTION; can be situational, pseudo code based, or vocab/concept based | from random import choice questions = [ (&quot;What is 3+2&quot;, &quot;5&quot;), (&quot;What is 1+1?&quot;, &quot;2&quot;), (&quot;what is 2+1&quot;, &quot;3&quot;), ] def ask_question(): question, answer = choice(questions) print(question) response = input() return response == answer correct = 0 answer = ask_question() Q1 = input() if Q1 == answer: answer = ask_question() Q2 = input() if Q2 == answer: Q3 = input() if Q3 == : Q4 = input() print( &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hack #6 / Challenge - Taking real life problems and implementing them into code . Create your own simulation based on your experiences/knowledge! Be creative! Think about instances in your own life, science, puzzles that can be made into simulations . Some ideas to get your brain running: A simulation that breeds two plants and tells you phenotypes of offspring, an adventure simulation... . cereals = [&quot;Cheerios&quot;, &quot;Frosted Flakes&quot;, &quot;Cocoa Puffs&quot;, &quot;Lucky Charms&quot;] ## Which cereal am I going to eat for breakfast? def pick_cereal(desired_cereal): if desired_cereal in cereals: return f&quot;{desired_cereal} is a great choice!&quot; else: return &quot;Sorry, that cereal is not available.&quot; print(pick_cereal(&quot;Cheerios&quot;)) # Output: &quot;Cheerios is a great choice!&quot; print(pick_cereal(&quot;Raisin Bran&quot;)) # Output: &quot;Sorry, that cereal is not available.&quot; .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/12/16/GroupSixteen.html",
            "relUrl": "/2022/12/16/GroupSixteen.html",
            "date": " • Dec 16, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Homework 3.17 - 3.18",
            "content": "3.17 Algorithmic Efficiency . Vocabulary . Problem: general description of a task which can / cant be solved using an algorithm Decision Problem: yes / no answer | Organization Problem: problem with multiple aspects | . | Instance: specific input | Efficiency: making a large problem simpler using some method Polynomial Efficiency (Good): more work takes proportional amount of time | Exponential Efficiency (Bad): more work takes exponential amount of time | . | Heuristic Approach: look for am optimal solution | Decidable Problem: problem with a clear decision as the right answer | Undecidable Problem: problem with no solution | . Notes . an efficient program can solve the problem in a short amount of time | polynomial efficiency lot better than exponential efficiency (due to time) | Heuristic approaches used when the problem is really complex | undecidable problems are everywhere and need some thought | . Challenge . Try and fix this ineficcient code! Only change the code between the two commented lines. Fully programmed solution will improve your grade, at a minimum show that you tried. . import time numlist = [1,3,5,7,9,11,13,15,17,19] valuelist = [0,3,6,9,12,15,18,21] def isvalue(value,array): #-- for i in value: if i in array: return True else: return False #-- starttime = time.time() for i in range(100000): for i in range(len(valuelist)): x = isvalue(valuelist[i],numlist) endtime = time.time() print(endtime-starttime,&#39;seconds&#39;) . TypeError Traceback (most recent call last) /mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-14-117-118-homework.ipynb Cell 6 in &lt;cell line: 13&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-14-117-118-homework.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; for i in range(100000): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-14-117-118-homework.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; for i in range(len(valuelist)): &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-14-117-118-homework.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; x = isvalue(valuelist[i],numlist) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-14-117-118-homework.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; endtime = time.time() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-14-117-118-homework.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; print(endtime-starttime,&#39;seconds&#39;) /mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-14-117-118-homework.ipynb Cell 6 in isvalue(value, array) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-14-117-118-homework.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; def isvalue(value,array): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-14-117-118-homework.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; #-- -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-14-117-118-homework.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; for i in value: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-14-117-118-homework.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; if i in array: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-14-117-118-homework.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; return True TypeError: &#39;int&#39; object is not iterable . Homework! . Make an algorithm that finds the fastest route that hits every location once starting and ending at Del Norte. Make sure to show your thinking. If you are strugling, try using a huristic approach. Remember, what matters more than having perfectly functioning code is that you tried your hardest. . dataset = { &#39;DelNorte&#39;:{ &#39;Westview&#39;:15, &#39;MtCarmel&#39;:20, &#39;Poway&#39;:35, &#39;RanchoBernrdo&#39;:50 }, &#39;Westview&#39;:{ &#39;Del Norte&#39;:15, &#39;MtCarmel&#39;:35, &#39;Poway&#39;:25, &#39;RanchoBernrdo&#39;: 45 }, &#39;MtCarmel&#39;:{ &#39;Westview&#39;:35, &#39;Del Norte&#39;:20, &#39;Poway&#39;:40, &#39;RanchoBernrdo&#39;:30 }, &#39;Poway&#39;:{ &#39;Westview&#39;:25, &#39;MtCarmel&#39;:40, &#39;Del Norte&#39;:35, &#39;RanchoBernrdo&#39;:15 }, &#39;RanchoBernardo&#39;:{ &#39;Westview&#39;:45, &#39;MtCarmel&#39;:30, &#39;Poway&#39;:15, &#39;Del Norte&#39;:50 } } . def fastestroute(start,data): drivetime = 0 order = [] order.append(start) while len(order) &lt; 5: return(drivetime,order) distance = 0 for x in data for i in data [x] order.append (start) start = &#39;DelNorte&#39; fastestroute(dataset) # &#39;dataset&#39; is the name of the nested key value pair . Struggles . Could not figure out the correct for, if, then, else loops | Looked at someone else&#39;s code and found some learning opportunities | they used two instances of order.append (start) | evaluated the data set and used if loops to find the smallest value. | . Grading: . Challenge Homework . .15 pts for attempt | .65 for attempt | . .20 pts for complete | .70 for complete | . .25 pts for above and beyond | .75 pts for above and beyond | .",
            "url": "https://rohanagr.github.io/RohanRepository/homework1718",
            "relUrl": "/homework1718",
            "date": " • Dec 16, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Unit 3.14 Libraries Lesson",
            "content": "Purpose: Help students streamline and make their coding experience easier through built in packages and methods from a library Objective: By the end of the lesson, students should be able to fluently use methods from the turtle and math packages, and be able to look up documentation for any python package and us it. . fill in the blanks! . Libraries . Okay, so we&#39;ve learned a lot of code, and all of you now can boast that you can code at least some basic programs in python. But, what about more advanced stuff? What if there&#39;s a more advanced program you don&#39;t know how to make? Do you need to make it yourself? Well, not always. . You&#39;ve already learned about functions that you can write to reuse in your code in previous lessons. But,there are many others who code in python just like you. So why would you do again what someone has already done, and is available for any python user? . packages allow a python user to import methods from a library, and use the methods in their code. Most libraries come with documentation on the different methods they entail and how to use them, and they can be found with a quick google search. methods are used with the following: . Note: a method from a package can only be used after the import statement. . Some libraries are always installed, such as those with the list methods which we have previously discussed. But others require a special python keyword called import. We will learn different ways to import nin Challenge 1. . Sometimes we only need to import a single method from the package. We can do that with the word &quot;from&quot;, followed by the package name, then the word import, then the method. This will alllow you to use the method without mentioning the package&#39;s name, unlike what we did before, however other methods from that package cannot be used. To get the best of both worlds you can use &quot;&quot;. . To import a method as an easier name, just do what we did first, add the word __, and write the name you would like to use that package as. . Challenge 1: Basic Libraries . Find a python package on the internet and import it | Choose a method from the package and import only the method | import the package as a more convenient name. | import matplotlib.pyplot as plt # x axis values x = [1,2,3] # corresponding y axis values y = [2,4,1] # plotting the points plt.plot(x, y) # naming the x axis plt.xlabel(&#39;x - axis&#39;) # naming the y axis plt.ylabel(&#39;y - axis&#39;) # giving a title to my graph plt.title(&#39;Rohan Graph&#39;) # function to show the plot plt.show() . ModuleNotFoundError Traceback (most recent call last) /mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-10-3.14-Libraries.ipynb Cell 4 in &lt;cell line: 1&gt;() -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-10-3.14-Libraries.ipynb#W3sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; import matplotlib.pyplot as plt &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-10-3.14-Libraries.ipynb#W3sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; # x axis values &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-10-3.14-Libraries.ipynb#W3sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; x = [1,2,3] ModuleNotFoundError: No module named &#39;matplotlib&#39; . Challenge 2: Turtle . Turtle is a python library which allows you to draw all kinds of different shapes. It&#39;s ofter used to teach beginning python learners, but is really cool to use anywhere. Turtle employs to display what you&#39;ve done, but unfortunately it&#39;s kind of annoying to make work with vscode. Use: repl.it Click &quot;+ Create&quot;, and for language, select &quot;Python (with Turtle)&quot; Documentation Task: Have fun with turtle! Create something that uses at least 2 lines of different lengths and 2 turns with different angles, and changes at least one setting about either the pen or canvas. Also use one command that isn&#39;t mentioned on the table below(there are a lot). Paste a screenshot of the code and the drawing from repl.it . . Challenge 3: Math . The math package allows for some really cool mathematical methods! . methods Action . ceil(x) | rounded down on each integer (e.g. 10.1 --&gt; 11) | . floor(x) | rounds to lowest integer less than or equal to x (e,g, 10.9 --&gt; 10) | . factorial(x) | multiplies a number x by (x-1) until the new number = 1. | . gcd(x,y) | returns the greatest common denominator of x and y | . lcm(x,y) | returns the leasT common multiple of x and y | . Challenge: Create a program which asks for a user input of two numbers, and returns the following: . each number rounded up | each number rounded down | the lcm of the rounded down numbers | the gcf of the rounded up numbers | the factorial of each number | something else using the math package! Documentation | . import math x = 3 y = 5 print(math.ceil(x)) print(math.ceil(y)) print(math.floor(x)) print(math.floor(y)) print(math.lcd(x,y)) print(math.gcd(x,y)) print(math.factorial(x)) print(math.factorial(y)) . 3 5 3 5 . AttributeError Traceback (most recent call last) /mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-10-3.14-Libraries.ipynb Cell 7 in &lt;cell line: 9&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-10-3.14-Libraries.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; print(math.floor(x)) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-10-3.14-Libraries.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; print(math.floor(y)) -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-10-3.14-Libraries.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; print(math.lcd(x,y)) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-10-3.14-Libraries.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; print(math.gcd(x,y)) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-12-10-3.14-Libraries.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; print(math.factorial(x)) AttributeError: module &#39;math&#39; has no attribute &#39;lcd&#39; . Homework: Putting it all together(complete only after the random values lesson) . Option 1: Create a python program which generates a random number between 1 and 10, and use turtle to draw a regular polygon with that many sides. As a hint, remember that the total sum of all the angles in a polygon is (the number of sides - 2) * 180. Note: a regular polygon has all sides and angles the same size. Paste a screenshot of the code and the drawing from repl.it . Option 2: use the &quot;datetime&quot; package, and looking up documentation, create a program to generate 2 random dates and find the number of days between . Extra ideas: customize the settings, draw a picture, or something else! . .",
            "url": "https://rohanagr.github.io/RohanRepository/week-13/big-idea-3/2022/12/10/FinalGroup.html",
            "relUrl": "/week-13/big-idea-3/2022/12/10/FinalGroup.html",
            "date": " • Dec 10, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Title",
            "content": "searching algorithms can be done in intervals or sequences | sequencial search can take way too long | binary search is most efficient for sorted lists | for algorithms --&gt; important to understand the question or what is asked | we can use if else syntax for that in JS | . sum = 24 counter = 5 for i in range (0, 25): sum = sum + 2 counter = counter + 5 . def squareroot(i): if (i == 0 or i == 1): return(i) for x in range (1, 100): if x*x: return x . def collatz(int): while int &gt; 1: if int % 2 == 0: int = int / 2 print(int) else: int = (int * 3) + 1 print(int) i = 45 print(collatz(i)) . 136 68.0 68.0 34.0 34.0 17.0 17.0 52.0 26.0 26.0 13.0 13.0 40.0 20.0 20.0 10.0 10.0 5.0 5.0 16.0 8.0 8.0 4.0 4.0 2.0 2.0 1.0 1.0 None .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/12/09/NineEleven.html",
            "relUrl": "/2022/12/09/NineEleven.html",
            "date": " • Dec 9, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Note Template",
            "content": "Take some additional notes that you would like here for 3.12 and 3.13. We will be looking for additional notes from the presentation. . What are procedures? . Fill in the blanks please: . Procedure: named group of programming instructions that may have parameters and return values Parameters: input values Arguments: specify the values of parameters Modularity: modules! Procedural Abstraction: name pr a process that allows for an understanding of the procedure What are some other names for procedures?: pseudocode . Why are procedures effective?: can help simplify the code, and we know what to look for and code in the actual program . Challenge 1 below: Add the command that will call the procedure. . def BinaryConvert(number): ## recursive code if number &gt;= 1: BinaryConvert(number // 2) ##based on the power of 2, it will shift the 0 or 1 right print(number % 2, end = &#39;&#39;) ## the end function prevents it from printing a new line --&gt; binary output is only one line. # Driver Code number = 31 BinaryConvert(number) . . Challenge 2 below: Complete the Min and Max procedure in either JavaScript and Python using the instructions from the JavaScript page. (JavaScript will get you a extra 0.1) . const nums = [1, 2, 3, 4, 5, ,6] Math.min(nums) Math.max(nums) . NaN . Homework/Hacks: For the hw, you have two options, easy or hard. The easy hack is for a 2.7 + extra work for the full 3. The easy hack is simply creating your own procedure with your own creativity. Since there is a lot of leeway for this one, you must do additional work to get a 3. For the hard hack, below is the start to a character to binary convertor. This is just a template, but the goal is to translate &quot;APCSP&quot; into binary. You can delete the existing code if you want. The only contraint is that you must use a procedure. Doing this will get you a 3. . function Player(name, position, average) { this.name = name; this.position = position; this.average = average; this.role = &quot;&quot;; } Player.prototype.setRole = function(role) { this.role = role; } Player.prototype.toJSON = function() { const obj = {name: this.name, position: this.position, average: this.average, role: this.role}; const json = JSON.stringify(obj); return json; } var manager = new Player(&quot;Bob Melvin&quot;, &quot;Catcher&quot;, &quot;.233&quot;); LogItType(manager); LogItType(manager.toJSON()); manager.setRole(&quot;Manager&quot;); LogItType(manager); LogItType(manager.toJSON()); . evalmachine.&lt;anonymous&gt;:19 LogItType(manager); ^ ReferenceError: LogItType is not defined at evalmachine.&lt;anonymous&gt;:19:1 at ContextifyScript.Script.runInThisContext (vm.js:25:33) at Object.runInThisContext (vm.js:97:38) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) . var players = [ new Player(&quot;Manny Machado&quot;, &quot;Third Base&quot;, &quot;.299&quot;), new Player(&quot;Trent Grisham&quot;, &quot;Center Field&quot;, &quot;.185&quot;), new Player(&quot;Jake Cronenworth&quot;, &quot;Second Base&quot;, &quot;.238&quot;), new Player(&quot;Jurickson Profar&quot;, &quot;Left Field&quot;, &quot;.240&quot;), new Player(&quot;Ha-Seong Kim&quot;, &quot;Shortstop&quot;, &quot;.252&quot;), new Player(&quot;Brandon Drury&quot;, &quot;First Base&quot;, &quot;.226&quot;), new Player(&quot;Jorge Alfaro&quot;, &quot;Catcher&quot;, &quot;.249&quot;), new Player(&quot;Wil Myers&quot;, &quot;Right Field, First Base&quot;, &quot;.255&quot;), new Player(&quot;Juan Soto&quot;, &quot;Right Field&quot;, &quot;.242&quot;), new Player(&quot;Austin Nola&quot;, &quot;Catcher&quot;, &quot;.248&quot;), new Player(&quot;Josh Bell&quot;, &quot;Designated Hitter, First Base&quot;, &quot;.191&quot;), new Player(&quot;Jose Azocar&quot;, &quot;Outfield&quot;, &quot;.272&quot;), ]; function Padres(manager, players){ manager.setRole(&quot;Manager&quot;); this.manager = manager; this.padres = [manager]; this.players = players; this.players.forEach(player =&gt; { player.setRole(&quot;Player&quot;); this.padres.push(player); }); this.json = []; this.padres.forEach(player =&gt; this.json.push(player.toJSON())); } sd2022 = new Padres(manager, players); LogItType(sd2022.padres); LogItType(sd2022.padres[0].name); LogItType(sd2022.json[0]); LogItType(JSON.parse(sd2022.json[0])); . Padres.prototype._toHtml = function() { var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); var body = &quot;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Position&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Batting Average&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; for (var row of sd2022.padres) { body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.position + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.average + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; } return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; $$.html(sd2022._toHtml()); .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/12/01/homeworktemplate.html",
            "relUrl": "/2022/12/01/homeworktemplate.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Unit 3.15 Random Values Student Copy",
            "content": "Purpose/Objectives: Teach student how to implement randomness into their code to make their code simulate real life situations. . In this lesson students will learn: . How to import random to python | How to use random with a list or number range | How to code randomness in everyday scenarios | . ADD YOUR ADDITIONAL NOTES HERE: . What are Random Values? . Random Values are a number generated using a large set of numbers and a mathematical algorithm which gives equal probability to all number occuring . Each Result from randomization is equally likely to occur Using random number generation in a program means each execution may produce a different result . What are Examples of Random outputs in the world? Add a few you can think of. . Ex: Marbles | . Why do we need Random Values for code? . Random values can be used in coding: . import random random_number = random.randint(1,100) print(random_number) . 29 . def randomlist(): list = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;blueberry&quot;] element = random.choice(list) print(element) randomlist() . Real Life Examples: Dice Roll . import random for i in range(3): roll = random.randint(1,6) print(&quot;Roll &quot; + str(i + 1) + &quot;:&quot; + str(roll)) . Challenge #1 . Write a function that will a simulate a coinflip and print the output . def coinflip(): list = [&quot;heads&quot;, &quot;tails&quot;] element = random.choice(list) print(element) coinflip() . tails . EXTRA: Create a function that will randomly select 5 playing Cards and check if the 5 cards are a Royal Flush . Homework . Given a random decimal number convert it into binary as Extra convert it to hexidecimal as well. .",
            "url": "https://rohanagr.github.io/RohanRepository/week-13/big-idea-3/2022/12/01/StudentCopyRandomValues.html",
            "relUrl": "/week-13/big-idea-3/2022/12/01/StudentCopyRandomValues.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Homework",
            "content": "Vocabulary . greater than: &gt; | less than: &lt; | greater than or equal to: &gt;= | less than or equal to: &lt;= | equal to: == | not equal to: != | . Notes . boolean operators produce booleans after it is used between 2 values | relational operators work between any two values of the same type | they are known as operands | they can work on strings, lists, and other data types | logical operators work on operands to produce boolean results. | we can use them in any order as long as the computer recognizes it. | . Homework/Hacks . our homework we have decided for a decimal number to binary converter. You must use conditional statements within your code and have a input box for where the decimal number will go. This will give you a 2.7 out of 3 and you may add anything else to the code to get above a 2.7. . def BinaryConvert(number): ## recursive code if number &gt;= 1: BinaryConvert(number // 2) ##based on the power of 2, it will shift the 0 or 1 right print(number % 2, end = &#39;&#39;) ## the end function prevents it from printing a new line --&gt; binary output is only one line. # Driver Code number = 31 BinaryConvert(number) . 011111 .",
            "url": "https://rohanagr.github.io/RohanRepository/week%2013/2022/11/30/homework.html",
            "relUrl": "/week%2013/2022/11/30/homework.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Group 2 blog",
            "content": "Group 2 Blog . College Board idea number 3 and 4 | .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/11/29/GroupTwoBlog.html",
            "relUrl": "/2022/11/29/GroupTwoBlog.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Lists and Iteration Homework",
            "content": "Overview and Notes: 3.10 - Lists . Make sure you complete the challenge in the challenges section while we present the lesson! | . Add your OWN Notes for 3.10 here: . lists help organize and collect data in a program | we can locate them through indexing | we can add, remove, or change the location of a certain item in the list | ITERATIONS: repetition of a function | most commonly done through loops (for, while, if...) | Analogy: iterations and loops --&gt; bread and butter | . Fill out the empty boxes: . Pseudocode Operation Python Syntax Description . aList[i] | aList[i] | Accesses the element of aList at index i | . x ← aList[i] | x = aList[i] | Assigns the element of aList at index i to a variable &#39;x&#39; | . aList[i] &lt;- x | aList(i) = x | Assigns the value of a variable &#39;x&#39; to the element of a List at index i | . aList[i] ← aList[j] | aList [i] = aList[j] | Assigns value of aList[j] to aList[i] | . INSERT(aList, value) | aList.insert(i, value) | value is placed at index i in aList. Any element at an index greater than i will shiftone position to the right. | . APPEND(aList, value) | aList.append(value) | adds a new item | . REMOVE(aList, value) | aList.pop(i)ORaList.remove(value) | Removes item at index i and any values at indices greater than i shift to the left. Length of aList decreased by 1. | . Homework Assignment . Instead of us making a quiz for you to take, we would like YOU to make a quiz about the material we reviewed. . We would like you to input questions into a list, and use some sort of iterative system to print the questions, detect an input, and determine if you answered correctly. There should be at least five questions, each with at least three possible answers. . You may use the template below as a framework for this assignment. . q1 = &quot;&quot;&quot;Which team traded Fernando Tatis Jr. to the Padres? a. Boston Red Sox b. Chicago White Sox c. Cincinnati Reds d. Seattle Mariners&quot;&quot;&quot; q2 = &quot;&quot;&quot;Which team won the NL West title in 2021? a. Los Angeles Dodgers b. San Diego Padres c. San Francisco Giants d. Arizona Diamondbacks&quot;&quot;&quot; q3 = &quot;&quot;&quot;Who hit the walk-off home run against the Cardinals which sent the Dodgers in the NLDS? a. Chris Taylor b. Trea Turner c. Mookie Betts d. Justin Turner&quot;&quot;&quot; q4 = &quot;&quot;&quot;Name the two teams in the 2019 World Series. a. New York Yankees, Los Angeles Dodgers b. Houston Astros, San Francisco Giants c. Washington Nationals, Tampa Bay Rays d. Houston Astros, Washington Nationals&quot;&quot;&quot; q5 = &quot;&quot;&quot;When did Manny Machado and Fernando Tatis Jr. make their Padres debut? a. 2018 b. 2019 c. 2020 d. 2021&quot;&quot;&quot; q6 = &quot;&quot;&quot;Name the stadium of the Boston Red Sox. a. Fenway Park b. T-Mobile Park c. Minute-Maid park d. The Great American Ballpark&quot;&quot;&quot; q7 = &quot;&quot;&quot;Who won the 2018 AL Cy Young Award? a. Justin Verlander b. Patrick Corbin c. Clayton Kershaw d. Blake Snell&quot;&quot;&quot; q8 = &quot;&quot;&quot;In 2016, the Chicago Cubs won the World Series after how many years? a. 56 b. 108 c. 119 d. 65&quot;&quot;&quot; q9 = &quot;&quot;&quot;Which league division are the New York Yankees in? a. AL Central b. NL East c. NL West d. AL East&quot;&quot;&quot; q10 = &quot;&quot;&quot;Which team did Brandon Drury play for? a. San Diego Padres b. New York Mets c. Toronto Blue Jays d. Arizona Diamondbacks e. All of the above&quot;&quot;&quot; questions = {q1: &quot;b&quot;, q2: &quot;c&quot;, q3: &quot;a&quot;, q4: &quot;d&quot;, q5: &quot;b&quot;, q6: &quot;a&quot;, q7: &quot;d&quot;, q8: &quot;b&quot;, q9: &quot;d&quot;, q10: &quot;e&quot; } name = input(&quot;Enter your name: &quot;) print(name, &quot;how many can you get right?&quot;) score = 0 for i in questions: print(i) ans = input(&quot;Choose the answer which you think is right.&quot;) if ans == questions[i]: print(&quot;correct!&quot;) score = score+1 else: print(&quot;sorry, that was incorrect.&quot;) print(&quot;Your final score is &quot;,score) . Hacks . Here are some ideas of things you can do to make your program even cooler. Doing these will raise your grade if done correctly. . Add more than five questions with more than three answer choices | Randomize the order in which questions/answers are output | At the end, display the user&#39;s score and determine whether or not they passed | . Challenges . Important! You don&#39;t have to complete these challenges completely perfectly, but you will be marked down if you don&#39;t show evidence of at least having tried these challenges in the time we gave during the lesson. . 3.10 Challenge . Follow the instructions in the code comments. . grocery_list = [&#39;apples&#39;, &#39;milk&#39;, &#39;oranges&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;] print(grocery_list[3]) # Now, assign the fourth item in the list to a variable, x and then print the variable i = 3 x = grocery_list[i] print(x) # Add these two items at the end of the list : umbrellas and artichokes grocery_list.append(&quot;umbrellas&quot;) grocery_list.append(&quot;artichokes&quot;) # Insert the item eggs as the third item of the list grocery_list.insert(2, &#39;eggs&#39;) # Remove milk from the list grocery_list.remove(&#39;milk&#39;) # grocery_list.pop(1) # Assign the element at the end of the list to index 2. Print index 2 to check grocery_list[2] = grocery_list[6] print(grocery_list[2]) # Print the entire list, does it match ours ? print(grocery_list) # Expected output # carrots # carrots # artichokes # [&#39;apples&#39;, &#39;eggs&#39;, &#39;artichokes&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;, &#39;umbrellas&#39;, &#39;artichokes&#39;] . carrots carrots artichokes [&#39;apples&#39;, &#39;eggs&#39;, &#39;artichokes&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;, &#39;umbrellas&#39;, &#39;artichokes&#39;] . 3.8 Challenge . Create a loop that converts 8-bit binary values from the provided list into decimal numbers. Then, after the value is determined, remove all the values greater than 100 from the list using a list-related function you&#39;ve been taught before. Print the new list when done. . Once you&#39;ve done this with one of the types of loops discussed in this lesson, create a function that does the same thing with a different type of loop. . binarylist = [ &quot;01001001&quot;, &quot;10101010&quot;, &quot;10010110&quot;, &quot;00110111&quot;, &quot;11101100&quot;, &quot;11010001&quot;, &quot;10000001&quot; ] decimalist = [] def binary_convert(binary): decimal = 0 i = 5 for num in str(binary): if int(num) == 1: decimal += 2**i i -= 1 continue else: i -= 1 continue decimalist.append(decimal) if (binarylist) &lt; 100: binarylist.pop(i) #when done, print the results . NameError Traceback (most recent call last) /mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-11-26-listanditerationhomework.ipynb Cell 9 in &lt;cell line: 16&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-11-26-listanditerationhomework.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; i -= 1 &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-11-26-listanditerationhomework.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; continue &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-11-26-listanditerationhomework.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; decimalist.append(decimal) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-11-26-listanditerationhomework.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; if (binarylist) &lt; 100: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-11-26-listanditerationhomework.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=18&#39;&gt;19&lt;/a&gt; binarylist.pop(i) NameError: name &#39;decimal&#39; is not defined . Struggles . There were a few problems which I encountered when it came to naming the lists and using them in the right manner | How to properly use for loops | When I looked at other people&#39;s code there was a learning opportunity: | I noticed that there was a new list for the decimal values. I then saw that there was another for loop running for the original list, and that would convert it to a decimal. | if the decimal was over 100, that specific value was thrown out. | .",
            "url": "https://rohanagr.github.io/RohanRepository/homework/",
            "relUrl": "/homework/",
            "date": " • Nov 26, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Binary",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus RGB color . +1 | 00000000 | 0 | 0 | 0 | -1 | 0 | | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | | | | | | | | | | | | | | | | | .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/11/17/PBL-binary.html",
            "relUrl": "/2022/11/17/PBL-binary.html",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Night At The Museum Evaluation",
            "content": "First Piece: Banana Dolphin . . What I Like About This Piece . It is very creative. I like how they thought about the similarities in shape of a dolphin and a banana, and made it into a piece which resembles both. | Really liked the tail of the dolphin as it looks like the inside of a banana peel. Very creative indeed. | . Some Minor Things . It looks a little too perfect for a banana. Most bananas develop black spots as they ripen. Maybe if they wanted for a more realistic interpretation of a banana, they could add a few black spots here and there, and it would not take away from the beauty of the dolphin. . | Overall Rating: 9/10 . | . Second Piece: Setting The Earth On Fire . . What I Like About This Piece . Everything is drawn realistically. The hand is nicely drawn, the lighter is setting the Earth ablaze, and I really like how the artist showed the area in and around Antarctica is on fire as a result of the lighter. There could be many themes which could be derived from this pice. | . Some Minor Things . It was a little hard to tell whether the white on the Earth was ice or clouds. They were painted with the same color. If there was a little contrast between the two, it would probably make the Earth actually look like the Earth with distinct clouds and ice patches. . | Overall Rating: 9.5/10 . | .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/11/07/natm.html",
            "relUrl": "/2022/11/07/natm.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Finals",
            "content": "Final Score: 41/50 . missed some questions which may have required some thinking | In my opinion a decent score | Surpassed the 25/50 threshold | . Question 5 . . Key takeaway: Although info about which restaurants Brandon and Cynthia have visited the past might be useful, they are not needed. | The most important piece of information out of the three is the information about food allergies and dietary restrictions. | . Question 14 . . Key takeaway: 8 is correct, but it would also display a check for 7. Since it displays 9 correctly, the only other option is 6. | The correct answer should have been B and D, not B and C. | . Question 17 . . Key takeaway: Internet protocols standardize transmission, as it is a universal process. | . Question 19 . . Key takeaway: A binary representation of 29 is more than 4 bits, therefore an overflow error will occur as the max in this program is 4. | . Question 20 . . 4 bits can store 16 pieces of information, therefore it should easily store 8 pieces without overflowing. | . Question 35 . . The default parameter should be on top. Therefore option A is correct and not option B. | . Question 36 . . i is initialized at 1. With the answer I chose, the initialization starts at 0. | . Question 39 . . It has to be a positive integer. We cannot use anything else. | . Question 50 . . The assignment of characters is incorrect in the answer choice that I chose. You would only need one more character for LastName. | .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/11/06/TakeHomeTest.html",
            "relUrl": "/2022/11/06/TakeHomeTest.html",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Internet",
            "content": "Video 1 . Computing device –&gt; physical artifact that can hold and run a program. | Examples include tablets, phones, computers, and sensors | Network –&gt; Group of interconnected computer devices which can send and receive data. | Bandwidth measured in bits per second. | Computing system: group of computing devices and programs working together for a joint purpose. | Packet Switching: the file is broken into packets and sent in some random order. | . Video 2 . “Narrow waist” model | Head to toe: Application, transport, internet, network access | . Quiz . 2/3 | .",
            "url": "https://rohanagr.github.io/RohanRepository/posts/2022/10/14/Internet.html",
            "relUrl": "/posts/2022/10/14/Internet.html",
            "date": " • Oct 14, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Git Sociology",
            "content": "Any sociology questions within team need to be answered with a Blog, A Scrum Master working with other Developers should establish the Github administration/sociology policies: . What is the main repository for your project? . Group Repository | . Did you create a .gitignore to avoid committing files that ‘don’t belong in version control? . gitignore | . Do you have a requirements.txt file to manage dependencies introduced to your Code Base? . Requirements for project | . Have you established Issues as part of your Development process? . Group Issue (to do’s) | . Have you considered making Pull Requests to track development? Have you considered forks or branching techniques with pull requests? . Pull Request | We are able to pull and push in the repository in order to stay in touch with the team and make sure that the group repository is updated for everyone. | . Are you managing Issues on a Project Board/Scrum Board like Kanban? . Group Scrum Board | .",
            "url": "https://rohanagr.github.io/RohanRepository/posts/2022/10/11/gitsociology.html",
            "relUrl": "/posts/2022/10/11/gitsociology.html",
            "date": " • Oct 11, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "College Board",
            "content": "Video 1 . Types of Errors: | Logic Error: Mistake in a program which causes it to give the output incorrectly or unexpectedly. | Syntax Error: Mistake in the program which leads to program failure or incorrect output. Usually occurs when coding rules are not followed. | Runtime Error: Mistake in the program when it is executed | Overflow Error: Error that happens when a computer handles a number greater than a set threshold or limit. | . Video 2 . We can correct errors by doing the following: | Test cases, hand tracing | visualizations | debuggers and extra output statements | . Video 3 . testing uses defined inputs to ensure that the program is working as desired. | testing of results are used to revise the program | It should demonstrate the different expected outcomes that are at or beyond the min / max of input data | Requirements essential to defining testing inputs. | . Quiz . 3/3 | .",
            "url": "https://rohanagr.github.io/RohanRepository/posts/2022/10/11/collegeboard.html",
            "relUrl": "/posts/2022/10/11/collegeboard.html",
            "date": " • Oct 11, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;b558955759msh32134753facfdd1p133021jsncf26cd31822e&quot;, &quot;X-RapidAPI-Host&quot;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(response.json()) # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . {&#39;countries_stat&#39;: [{&#39;country_name&#39;: &#39;USA&#39;, &#39;cases&#39;: &#39;82,649,779&#39;, &#39;deaths&#39;: &#39;1,018,316&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;80,434,925&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1,465&#39;, &#39;active_cases&#39;: &#39;1,196,538&#39;, &#39;total_cases_per_1m_population&#39;: &#39;247,080&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,044&#39;, &#39;total_tests&#39;: &#39;1,000,275,726&#39;, &#39;tests_per_1m_population&#39;: &#39;2,990,303&#39;}, {&#39;country_name&#39;: &#39;India&#39;, &#39;cases&#39;: &#39;43,057,545&#39;, &#39;deaths&#39;: &#39;522,193&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;42,519,479&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;698&#39;, &#39;active_cases&#39;: &#39;15,873&#39;, &#39;total_cases_per_1m_population&#39;: &#39;30,657&#39;, &#39;deaths_per_1m_population&#39;: &#39;372&#39;, &#39;total_tests&#39;: &#39;834,717,702&#39;, &#39;tests_per_1m_population&#39;: &#39;594,319&#39;}, {&#39;country_name&#39;: &#39;Brazil&#39;, &#39;cases&#39;: &#39;30,345,654&#39;, &#39;deaths&#39;: &#39;662,663&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;29,364,400&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;8,318&#39;, &#39;active_cases&#39;: &#39;318,591&#39;, &#39;total_cases_per_1m_population&#39;: &#39;140,954&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,078&#39;, &#39;total_tests&#39;: &#39;63,776,166&#39;, &#39;tests_per_1m_population&#39;: &#39;296,238&#39;}, {&#39;country_name&#39;: &#39;France&#39;, &#39;cases&#39;: &#39;28,244,977&#39;, &#39;deaths&#39;: &#39;145,020&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;25,852,832&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1,677&#39;, &#39;active_cases&#39;: &#39;2,247,125&#39;, &#39;total_cases_per_1m_population&#39;: &#39;430,996&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,213&#39;, &#39;total_tests&#39;: &#39;266,484,045&#39;, &#39;tests_per_1m_population&#39;: &#39;4,066,333&#39;}, {&#39;country_name&#39;: &#39;Germany&#39;, &#39;cases&#39;: &#39;24,109,433&#39;, &#39;deaths&#39;: &#39;134,624&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;21,243,000&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1,980&#39;, &#39;active_cases&#39;: &#39;2,731,809&#39;, &#39;total_cases_per_1m_population&#39;: &#39;286,106&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,598&#39;, &#39;total_tests&#39;: &#39;122,332,384&#39;, &#39;tests_per_1m_population&#39;: &#39;1,451,714&#39;}, {&#39;country_name&#39;: &#39;UK&#39;, &#39;cases&#39;: &#39;21,933,206&#39;, &#39;deaths&#39;: &#39;173,352&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;20,782,350&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;339&#39;, &#39;active_cases&#39;: &#39;977,504&#39;, &#39;total_cases_per_1m_population&#39;: &#39;320,054&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,530&#39;, &#39;total_tests&#39;: &#39;514,985,782&#39;, &#39;tests_per_1m_population&#39;: &#39;7,514,777&#39;}, {&#39;country_name&#39;: &#39;Russia&#39;, &#39;cases&#39;: &#39;18,137,137&#39;, &#39;deaths&#39;: &#39;374,902&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;17,474,628&#39;, &#39;new_deaths&#39;: &#39;168&#39;, &#39;new_cases&#39;: &#39;8,446&#39;, &#39;serious_critical&#39;: &#39;2,300&#39;, &#39;active_cases&#39;: &#39;287,607&#39;, &#39;total_cases_per_1m_population&#39;: &#39;124,187&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,567&#39;, &#39;total_tests&#39;: &#39;273,400,000&#39;, &#39;tests_per_1m_population&#39;: &#39;1,871,995&#39;}, {&#39;country_name&#39;: &#39;S. Korea&#39;, &#39;cases&#39;: &#39;16,895,194&#39;, &#39;deaths&#39;: &#39;22,133&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;109&#39;, &#39;new_cases&#39;: &#39;64,725&#39;, &#39;serious_critical&#39;: &#39;726&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;329,028&#39;, &#39;deaths_per_1m_population&#39;: &#39;431&#39;, &#39;total_tests&#39;: &#39;15,804,065&#39;, &#39;tests_per_1m_population&#39;: &#39;307,778&#39;}, {&#39;country_name&#39;: &#39;Italy&#39;, &#39;cases&#39;: &#39;16,079,209&#39;, &#39;deaths&#39;: &#39;162,609&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;14,684,371&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;409&#39;, &#39;active_cases&#39;: &#39;1,232,229&#39;, &#39;total_cases_per_1m_population&#39;: &#39;266,648&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,697&#39;, &#39;total_tests&#39;: &#39;211,365,630&#39;, &#39;tests_per_1m_population&#39;: &#39;3,505,156&#39;}, {&#39;country_name&#39;: &#39;Turkey&#39;, &#39;cases&#39;: &#39;15,016,270&#39;, &#39;deaths&#39;: &#39;98,676&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;14,854,475&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;975&#39;, &#39;active_cases&#39;: &#39;63,119&#39;, &#39;total_cases_per_1m_population&#39;: &#39;174,654&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,148&#39;, &#39;total_tests&#39;: &#39;158,110,923&#39;, &#39;tests_per_1m_population&#39;: &#39;1,838,986&#39;}, {&#39;country_name&#39;: &#39;Spain&#39;, &#39;cases&#39;: &#39;11,786,036&#39;, &#39;deaths&#39;: &#39;103,908&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;11,261,340&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;339&#39;, &#39;active_cases&#39;: &#39;420,788&#39;, &#39;total_cases_per_1m_population&#39;: &#39;251,906&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,221&#39;, &#39;total_tests&#39;: &#39;471,036,328&#39;, &#39;tests_per_1m_population&#39;: &#39;10,067,575&#39;}, {&#39;country_name&#39;: &#39;Vietnam&#39;, &#39;cases&#39;: &#39;10,563,502&#39;, &#39;deaths&#39;: &#39;43,013&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;9,086,075&#39;, &#39;new_deaths&#39;: &#39;9&#39;, &#39;new_cases&#39;: &#39;8,813&#39;, &#39;serious_critical&#39;: &#39;612&#39;, &#39;active_cases&#39;: &#39;1,434,414&#39;, &#39;total_cases_per_1m_population&#39;: &#39;106,789&#39;, &#39;deaths_per_1m_population&#39;: &#39;435&#39;, &#39;total_tests&#39;: &#39;85,789,114&#39;, &#39;tests_per_1m_population&#39;: &#39;867,262&#39;}, {&#39;country_name&#39;: &#39;Argentina&#39;, &#39;cases&#39;: &#39;9,060,923&#39;, &#39;deaths&#39;: &#39;128,344&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;8,895,999&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;412&#39;, &#39;active_cases&#39;: &#39;36,580&#39;, &#39;total_cases_per_1m_population&#39;: &#39;197,215&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,793&#39;, &#39;total_tests&#39;: &#39;35,716,069&#39;, &#39;tests_per_1m_population&#39;: &#39;777,376&#39;}, {&#39;country_name&#39;: &#39;Netherlands&#39;, &#39;cases&#39;: &#39;8,035,603&#39;, &#39;deaths&#39;: &#39;22,206&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7,643,520&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;94&#39;, &#39;active_cases&#39;: &#39;369,877&#39;, &#39;total_cases_per_1m_population&#39;: &#39;467,096&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,291&#39;, &#39;total_tests&#39;: &#39;21,107,399&#39;, &#39;tests_per_1m_population&#39;: &#39;1,226,938&#39;}, {&#39;country_name&#39;: &#39;Japan&#39;, &#39;cases&#39;: &#39;7,621,562&#39;, &#39;deaths&#39;: &#39;29,284&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7,135,403&#39;, &#39;new_deaths&#39;: &#39;27&#39;, &#39;new_cases&#39;: &#39;43,721&#39;, &#39;serious_critical&#39;: &#39;195&#39;, &#39;active_cases&#39;: &#39;456,875&#39;, &#39;total_cases_per_1m_population&#39;: &#39;60,596&#39;, &#39;deaths_per_1m_population&#39;: &#39;233&#39;, &#39;total_tests&#39;: &#39;46,690,473&#39;, &#39;tests_per_1m_population&#39;: &#39;371,215&#39;}, {&#39;country_name&#39;: &#39;Iran&#39;, &#39;cases&#39;: &#39;7,216,040&#39;, &#39;deaths&#39;: &#39;140,975&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;6,966,954&#39;, &#39;new_deaths&#39;: &#39;13&#39;, &#39;new_cases&#39;: &#39;528&#39;, &#39;serious_critical&#39;: &#39;1,046&#39;, &#39;active_cases&#39;: &#39;108,111&#39;, &#39;total_cases_per_1m_population&#39;: &#39;83,972&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,641&#39;, &#39;total_tests&#39;: &#39;50,811,054&#39;, &#39;tests_per_1m_population&#39;: &#39;591,284&#39;}, {&#39;country_name&#39;: &#39;Colombia&#39;, &#39;cases&#39;: &#39;6,091,094&#39;, &#39;deaths&#39;: &#39;139,771&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,924,433&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;342&#39;, &#39;active_cases&#39;: &#39;26,890&#39;, &#39;total_cases_per_1m_population&#39;: &#39;117,448&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,695&#39;, &#39;total_tests&#39;: &#39;34,355,022&#39;, &#39;tests_per_1m_population&#39;: &#39;662,433&#39;}, {&#39;country_name&#39;: &#39;Indonesia&#39;, &#39;cases&#39;: &#39;6,043,768&#39;, &#39;deaths&#39;: &#39;156,067&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,868,251&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;2,771&#39;, &#39;active_cases&#39;: &#39;19,450&#39;, &#39;total_cases_per_1m_population&#39;: &#39;21,682&#39;, &#39;deaths_per_1m_population&#39;: &#39;560&#39;, &#39;total_tests&#39;: &#39;94,877,499&#39;, &#39;tests_per_1m_population&#39;: &#39;340,374&#39;}, {&#39;country_name&#39;: &#39;Poland&#39;, &#39;cases&#39;: &#39;5,991,197&#39;, &#39;deaths&#39;: &#39;115,948&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,334,375&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;344&#39;, &#39;serious_critical&#39;: &#39;1,588&#39;, &#39;active_cases&#39;: &#39;540,874&#39;, &#39;total_cases_per_1m_population&#39;: &#39;158,616&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,070&#39;, &#39;total_tests&#39;: &#39;36,027,053&#39;, &#39;tests_per_1m_population&#39;: &#39;953,808&#39;}, {&#39;country_name&#39;: &#39;Mexico&#39;, &#39;cases&#39;: &#39;5,733,514&#39;, &#39;deaths&#39;: &#39;324,117&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,033,892&#39;, &#39;new_deaths&#39;: &#39;57&#39;, &#39;new_cases&#39;: &#39;802&#39;, &#39;serious_critical&#39;: &#39;4,798&#39;, &#39;active_cases&#39;: &#39;375,505&#39;, &#39;total_cases_per_1m_population&#39;: &#39;43,641&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,467&#39;, &#39;total_tests&#39;: &#39;15,762,889&#39;, &#39;tests_per_1m_population&#39;: &#39;119,981&#39;}, {&#39;country_name&#39;: &#39;Australia&#39;, &#39;cases&#39;: &#39;5,689,377&#39;, &#39;deaths&#39;: &#39;6,991&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,274,197&#39;, &#39;new_deaths&#39;: &#39;21&#39;, &#39;new_cases&#39;: &#39;34,769&#39;, &#39;serious_critical&#39;: &#39;135&#39;, &#39;active_cases&#39;: &#39;408,189&#39;, &#39;total_cases_per_1m_population&#39;: &#39;218,537&#39;, &#39;deaths_per_1m_population&#39;: &#39;269&#39;, &#39;total_tests&#39;: &#39;68,845,476&#39;, &#39;tests_per_1m_population&#39;: &#39;2,644,452&#39;}, {&#39;country_name&#39;: &#39;Ukraine&#39;, &#39;cases&#39;: &#39;4,997,224&#39;, &#39;deaths&#39;: &#39;108,306&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;177&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;115,517&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,504&#39;, &#39;total_tests&#39;: &#39;19,521,252&#39;, &#39;tests_per_1m_population&#39;: &#39;451,259&#39;}, {&#39;country_name&#39;: &#39;Malaysia&#39;, &#39;cases&#39;: &#39;4,427,067&#39;, &#39;deaths&#39;: &#39;35,491&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;4,310,599&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;89&#39;, &#39;active_cases&#39;: &#39;80,977&#39;, &#39;total_cases_per_1m_population&#39;: &#39;133,690&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,072&#39;, &#39;total_tests&#39;: &#39;58,332,799&#39;, &#39;tests_per_1m_population&#39;: &#39;1,761,549&#39;}, {&#39;country_name&#39;: &#39;Thailand&#39;, &#39;cases&#39;: &#39;4,165,874&#39;, &#39;deaths&#39;: &#39;27,778&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,954,945&#39;, &#39;new_deaths&#39;: &#39;126&#39;, &#39;new_cases&#39;: &#39;17,784&#39;, &#39;serious_critical&#39;: &#39;1,496&#39;, &#39;active_cases&#39;: &#39;183,151&#39;, &#39;total_cases_per_1m_population&#39;: &#39;59,414&#39;, &#39;deaths_per_1m_population&#39;: &#39;396&#39;, &#39;total_tests&#39;: &#39;17,270,775&#39;, &#39;tests_per_1m_population&#39;: &#39;246,317&#39;}, {&#39;country_name&#39;: &#39;Austria&#39;, &#39;cases&#39;: &#39;4,104,859&#39;, &#39;deaths&#39;: &#39;18,047&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,989,860&#39;, &#39;new_deaths&#39;: &#39;12&#39;, &#39;new_cases&#39;: &#39;5,810&#39;, &#39;serious_critical&#39;: &#39;121&#39;, &#39;active_cases&#39;: &#39;96,952&#39;, &#39;total_cases_per_1m_population&#39;: &#39;451,125&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,983&#39;, &#39;total_tests&#39;: &#39;181,825,734&#39;, &#39;tests_per_1m_population&#39;: &#39;19,982,688&#39;}, {&#39;country_name&#39;: &#39;Israel&#39;, &#39;cases&#39;: &#39;4,054,342&#39;, &#39;deaths&#39;: &#39;10,658&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;4,009,152&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;220&#39;, &#39;active_cases&#39;: &#39;34,532&#39;, &#39;total_cases_per_1m_population&#39;: &#39;434,735&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,143&#39;, &#39;total_tests&#39;: &#39;41,373,364&#39;, &#39;tests_per_1m_population&#39;: &#39;4,436,346&#39;}, {&#39;country_name&#39;: &#39;Belgium&#39;, &#39;cases&#39;: &#39;4,015,791&#39;, &#39;deaths&#39;: &#39;31,319&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,726,457&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;169&#39;, &#39;active_cases&#39;: &#39;258,015&#39;, &#39;total_cases_per_1m_population&#39;: &#39;343,798&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,681&#39;, &#39;total_tests&#39;: &#39;33,456,470&#39;, &#39;tests_per_1m_population&#39;: &#39;2,864,259&#39;}, {&#39;country_name&#39;: &#39;Czechia&#39;, &#39;cases&#39;: &#39;3,895,544&#39;, &#39;deaths&#39;: &#39;40,081&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,838,099&#39;, &#39;new_deaths&#39;: &#39;5&#39;, &#39;new_cases&#39;: &#39;911&#39;, &#39;serious_critical&#39;: &#39;43&#39;, &#39;active_cases&#39;: &#39;17,364&#39;, &#39;total_cases_per_1m_population&#39;: &#39;362,550&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,730&#39;, &#39;total_tests&#39;: &#39;55,117,064&#39;, &#39;tests_per_1m_population&#39;: &#39;5,129,629&#39;}, {&#39;country_name&#39;: &#39;Portugal&#39;, &#39;cases&#39;: &#39;3,791,744&#39;, &#39;deaths&#39;: &#39;22,162&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;61&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;373,827&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,185&#39;, &#39;total_tests&#39;: &#39;40,748,372&#39;, &#39;tests_per_1m_population&#39;: &#39;4,017,371&#39;}, {&#39;country_name&#39;: &#39;South Africa&#39;, &#39;cases&#39;: &#39;3,759,689&#39;, &#39;deaths&#39;: &#39;100,298&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,632,572&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;175&#39;, &#39;active_cases&#39;: &#39;26,819&#39;, &#39;total_cases_per_1m_population&#39;: &#39;61,981&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,653&#39;, &#39;total_tests&#39;: &#39;24,313,334&#39;, &#39;tests_per_1m_population&#39;: &#39;400,824&#39;}, {&#39;country_name&#39;: &#39;Canada&#39;, &#39;cases&#39;: &#39;3,695,585&#39;, &#39;deaths&#39;: &#39;38,777&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,426,082&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;426&#39;, &#39;active_cases&#39;: &#39;230,726&#39;, &#39;total_cases_per_1m_population&#39;: &#39;96,391&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,011&#39;, &#39;total_tests&#39;: &#39;60,536,359&#39;, &#39;tests_per_1m_population&#39;: &#39;1,578,955&#39;}, {&#39;country_name&#39;: &#39;Philippines&#39;, &#39;cases&#39;: &#39;3,684,500&#39;, &#39;deaths&#39;: &#39;60,182&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,610,658&#39;, &#39;new_deaths&#39;: &#39;3&#39;, &#39;new_cases&#39;: &#39;205&#39;, &#39;serious_critical&#39;: &#39;289&#39;, &#39;active_cases&#39;: &#39;13,660&#39;, &#39;total_cases_per_1m_population&#39;: &#39;32,835&#39;, &#39;deaths_per_1m_population&#39;: &#39;536&#39;, &#39;total_tests&#39;: &#39;29,427,586&#39;, &#39;tests_per_1m_population&#39;: &#39;262,246&#39;}, {&#39;country_name&#39;: &#39;Switzerland&#39;, &#39;cases&#39;: &#39;3,579,867&#39;, &#39;deaths&#39;: &#39;13,816&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,378,507&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;90&#39;, &#39;active_cases&#39;: &#39;187,544&#39;, &#39;total_cases_per_1m_population&#39;: &#39;408,247&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,576&#39;, &#39;total_tests&#39;: &#39;20,666,182&#39;, &#39;tests_per_1m_population&#39;: &#39;2,356,766&#39;}, {&#39;country_name&#39;: &#39;Peru&#39;, &#39;cases&#39;: &#39;3,559,343&#39;, &#39;deaths&#39;: &#39;212,724&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;356&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;105,303&#39;, &#39;deaths_per_1m_population&#39;: &#39;6,293&#39;, &#39;total_tests&#39;: &#39;29,592,270&#39;, &#39;tests_per_1m_population&#39;: &#39;875,489&#39;}, {&#39;country_name&#39;: &#39;Chile&#39;, &#39;cases&#39;: &#39;3,544,463&#39;, &#39;deaths&#39;: &#39;57,375&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,368,772&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;286&#39;, &#39;active_cases&#39;: &#39;118,316&#39;, &#39;total_cases_per_1m_population&#39;: &#39;182,588&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,956&#39;, &#39;total_tests&#39;: &#39;36,711,724&#39;, &#39;tests_per_1m_population&#39;: &#39;1,891,147&#39;}, {&#39;country_name&#39;: &#39;Greece&#39;, &#39;cases&#39;: &#39;3,277,557&#39;, &#39;deaths&#39;: &#39;28,867&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,151,717&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;277&#39;, &#39;active_cases&#39;: &#39;96,973&#39;, &#39;total_cases_per_1m_population&#39;: &#39;317,250&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,794&#39;, &#39;total_tests&#39;: &#39;78,872,546&#39;, &#39;tests_per_1m_population&#39;: &#39;7,634,431&#39;}, {&#39;country_name&#39;: &#39;Denmark&#39;, &#39;cases&#39;: &#39;2,959,040&#39;, &#39;deaths&#39;: &#39;6,072&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,929,091&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;15&#39;, &#39;active_cases&#39;: &#39;23,877&#39;, &#39;total_cases_per_1m_population&#39;: &#39;507,639&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,042&#39;, &#39;total_tests&#39;: &#39;127,141,200&#39;, &#39;tests_per_1m_population&#39;: &#39;21,811,751&#39;}, {&#39;country_name&#39;: &#39;Romania&#39;, &#39;cases&#39;: &#39;2,888,318&#39;, &#39;deaths&#39;: &#39;65,427&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,606,660&#39;, &#39;new_deaths&#39;: &#39;6&#39;, &#39;new_cases&#39;: &#39;494&#39;, &#39;serious_critical&#39;: &#39;216&#39;, &#39;active_cases&#39;: &#39;216,231&#39;, &#39;total_cases_per_1m_population&#39;: &#39;151,968&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,442&#39;, &#39;total_tests&#39;: &#39;22,594,702&#39;, &#39;tests_per_1m_population&#39;: &#39;1,188,815&#39;}, {&#39;country_name&#39;: &#39;Sweden&#39;, &#39;cases&#39;: &#39;2,498,388&#39;, &#39;deaths&#39;: &#39;18,656&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,464,421&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;19&#39;, &#39;active_cases&#39;: &#39;15,311&#39;, &#39;total_cases_per_1m_population&#39;: &#39;244,630&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,827&#39;, &#39;total_tests&#39;: &#39;18,493,218&#39;, &#39;tests_per_1m_population&#39;: &#39;1,810,763&#39;}, {&#39;country_name&#39;: &#39;Iraq&#39;, &#39;cases&#39;: &#39;2,324,141&#39;, &#39;deaths&#39;: &#39;25,204&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,295,947&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;20&#39;, &#39;active_cases&#39;: &#39;2,990&#39;, &#39;total_cases_per_1m_population&#39;: &#39;55,534&#39;, &#39;deaths_per_1m_population&#39;: &#39;602&#39;, &#39;total_tests&#39;: &#39;18,450,939&#39;, &#39;tests_per_1m_population&#39;: &#39;440,871&#39;}, {&#39;country_name&#39;: &#39;Serbia&#39;, &#39;cases&#39;: &#39;2,001,144&#39;, &#39;deaths&#39;: &#39;15,953&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,967,786&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;25&#39;, &#39;active_cases&#39;: &#39;17,405&#39;, &#39;total_cases_per_1m_population&#39;: &#39;230,710&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,839&#39;, &#39;total_tests&#39;: &#39;9,427,662&#39;, &#39;tests_per_1m_population&#39;: &#39;1,086,907&#39;}, {&#39;country_name&#39;: &#39;Bangladesh&#39;, &#39;cases&#39;: &#39;1,952,532&#39;, &#39;deaths&#39;: &#39;29,127&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,893,131&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1,297&#39;, &#39;active_cases&#39;: &#39;30,274&#39;, &#39;total_cases_per_1m_population&#39;: &#39;11,646&#39;, &#39;deaths_per_1m_population&#39;: &#39;174&#39;, &#39;total_tests&#39;: &#39;13,956,056&#39;, &#39;tests_per_1m_population&#39;: &#39;83,245&#39;}, {&#39;country_name&#39;: &#39;Hungary&#39;, &#39;cases&#39;: &#39;1,890,953&#39;, &#39;deaths&#39;: &#39;46,048&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,776,617&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;45&#39;, &#39;active_cases&#39;: &#39;68,288&#39;, &#39;total_cases_per_1m_population&#39;: &#39;196,645&#39;, &#39;deaths_per_1m_population&#39;: &#39;4,789&#39;, &#39;total_tests&#39;: &#39;11,295,119&#39;, &#39;tests_per_1m_population&#39;: &#39;1,174,608&#39;}, {&#39;country_name&#39;: &#39;Slovakia&#39;, &#39;cases&#39;: &#39;1,774,808&#39;, &#39;deaths&#39;: &#39;19,839&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,730,712&#39;, &#39;new_deaths&#39;: &#39;10&#39;, &#39;new_cases&#39;: &#39;1,155&#39;, &#39;serious_critical&#39;: &#39;88&#39;, &#39;active_cases&#39;: &#39;24,257&#39;, &#39;total_cases_per_1m_population&#39;: &#39;324,794&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,631&#39;, &#39;total_tests&#39;: &#39;7,057,901&#39;, &#39;tests_per_1m_population&#39;: &#39;1,291,611&#39;}, {&#39;country_name&#39;: &#39;Jordan&#39;, &#39;cases&#39;: &#39;1,694,216&#39;, &#39;deaths&#39;: &#39;14,048&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,678,941&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;124&#39;, &#39;active_cases&#39;: &#39;1,227&#39;, &#39;total_cases_per_1m_population&#39;: &#39;163,125&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,353&#39;, &#39;total_tests&#39;: &#39;16,670,254&#39;, &#39;tests_per_1m_population&#39;: &#39;1,605,074&#39;}, {&#39;country_name&#39;: &#39;Georgia&#39;, &#39;cases&#39;: &#39;1,654,255&#39;, &#39;deaths&#39;: &#39;16,800&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,635,791&#39;, &#39;new_deaths&#39;: &#39;3&#39;, &#39;new_cases&#39;: &#39;92&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1,664&#39;, &#39;total_cases_per_1m_population&#39;: &#39;416,129&#39;, &#39;deaths_per_1m_population&#39;: &#39;4,226&#39;, &#39;total_tests&#39;: &#39;16,807,205&#39;, &#39;tests_per_1m_population&#39;: &#39;4,227,861&#39;}, {&#39;country_name&#39;: &#39;Pakistan&#39;, &#39;cases&#39;: &#39;1,527,856&#39;, &#39;deaths&#39;: &#39;30,369&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,493,998&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;105&#39;, &#39;serious_critical&#39;: &#39;186&#39;, &#39;active_cases&#39;: &#39;3,489&#39;, &#39;total_cases_per_1m_population&#39;: &#39;6,683&#39;, &#39;deaths_per_1m_population&#39;: &#39;133&#39;, &#39;total_tests&#39;: &#39;28,048,307&#39;, &#39;tests_per_1m_population&#39;: &#39;122,679&#39;}, {&#39;country_name&#39;: &#39;Ireland&#39;, &#39;cases&#39;: &#39;1,509,536&#39;, &#39;deaths&#39;: &#39;6,996&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,415,949&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;41&#39;, &#39;active_cases&#39;: &#39;86,591&#39;, &#39;total_cases_per_1m_population&#39;: &#39;299,669&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,389&#39;, &#39;total_tests&#39;: &#39;12,016,948&#39;, &#39;tests_per_1m_population&#39;: &#39;2,385,571&#39;}, {&#39;country_name&#39;: &#39;Norway&#39;, &#39;cases&#39;: &#39;1,423,509&#39;, &#39;deaths&#39;: &#39;2,871&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;20&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;258,925&#39;, &#39;deaths_per_1m_population&#39;: &#39;522&#39;, &#39;total_tests&#39;: &#39;11,002,430&#39;, &#39;tests_per_1m_population&#39;: &#39;2,001,256&#39;}, {&#39;country_name&#39;: &#39;Kazakhstan&#39;, &#39;cases&#39;: &#39;1,305,457&#39;, &#39;deaths&#39;: &#39;13,660&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,290,988&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;10&#39;, &#39;serious_critical&#39;: &#39;24&#39;, &#39;active_cases&#39;: &#39;809&#39;, &#39;total_cases_per_1m_population&#39;: &#39;68,056&#39;, &#39;deaths_per_1m_population&#39;: &#39;712&#39;, &#39;total_tests&#39;: &#39;11,575,012&#39;, &#39;tests_per_1m_population&#39;: &#39;603,428&#39;}, {&#39;country_name&#39;: &#39;Hong Kong&#39;, &#39;cases&#39;: &#39;1,201,431&#39;, &#39;deaths&#39;: &#39;9,236&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;115&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;157,942&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,214&#39;, &#39;total_tests&#39;: &#39;44,972,952&#39;, &#39;tests_per_1m_population&#39;: &#39;5,912,223&#39;}, {&#39;country_name&#39;: &#39;Singapore&#39;, &#39;cases&#39;: &#39;1,180,124&#39;, &#39;deaths&#39;: &#39;1,325&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,109,387&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;9&#39;, &#39;active_cases&#39;: &#39;69,412&#39;, &#39;total_cases_per_1m_population&#39;: &#39;198,895&#39;, &#39;deaths_per_1m_population&#39;: &#39;223&#39;, &#39;total_tests&#39;: &#39;23,712,995&#39;, &#39;tests_per_1m_population&#39;: &#39;3,996,529&#39;}, {&#39;country_name&#39;: &#39;Morocco&#39;, &#39;cases&#39;: &#39;1,164,670&#39;, &#39;deaths&#39;: &#39;16,065&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,148,154&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;293&#39;, &#39;active_cases&#39;: &#39;451&#39;, &#39;total_cases_per_1m_population&#39;: &#39;30,893&#39;, &#39;deaths_per_1m_population&#39;: &#39;426&#39;, &#39;total_tests&#39;: &#39;11,237,010&#39;, &#39;tests_per_1m_population&#39;: &#39;298,062&#39;}, {&#39;country_name&#39;: &#39;Bulgaria&#39;, &#39;cases&#39;: &#39;1,152,892&#39;, &#39;deaths&#39;: &#39;36,849&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;959,542&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;105&#39;, &#39;active_cases&#39;: &#39;156,501&#39;, &#39;total_cases_per_1m_population&#39;: &#39;168,206&#39;, &#39;deaths_per_1m_population&#39;: &#39;5,376&#39;, &#39;total_tests&#39;: &#39;9,797,011&#39;, &#39;tests_per_1m_population&#39;: &#39;1,429,377&#39;}, {&#39;country_name&#39;: &#39;Croatia&#39;, &#39;cases&#39;: &#39;1,117,175&#39;, &#39;deaths&#39;: &#39;15,778&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,096,829&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;22&#39;, &#39;active_cases&#39;: &#39;4,568&#39;, &#39;total_cases_per_1m_population&#39;: &#39;275,195&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,887&#39;, &#39;total_tests&#39;: &#39;4,762,146&#39;, &#39;tests_per_1m_population&#39;: &#39;1,173,065&#39;}, {&#39;country_name&#39;: &#39;Cuba&#39;, &#39;cases&#39;: &#39;1,101,486&#39;, &#39;deaths&#39;: &#39;8,523&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,091,603&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;23&#39;, &#39;active_cases&#39;: &#39;1,360&#39;, &#39;total_cases_per_1m_population&#39;: &#39;97,355&#39;, &#39;deaths_per_1m_population&#39;: &#39;753&#39;, &#39;total_tests&#39;: &#39;12,920,253&#39;, &#39;tests_per_1m_population&#39;: &#39;1,141,957&#39;}, {&#39;country_name&#39;: &#39;Lebanon&#39;, &#39;cases&#39;: &#39;1,096,320&#39;, &#39;deaths&#39;: &#39;10,374&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,079,455&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;186&#39;, &#39;active_cases&#39;: &#39;6,491&#39;, &#39;total_cases_per_1m_population&#39;: &#39;161,931&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,532&#39;, &#39;total_tests&#39;: &#39;4,795,578&#39;, &#39;tests_per_1m_population&#39;: &#39;708,328&#39;}, {&#39;country_name&#39;: &#39;Lithuania&#39;, &#39;cases&#39;: &#39;1,054,618&#39;, &#39;deaths&#39;: &#39;9,063&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,016,510&#39;, &#39;new_deaths&#39;: &#39;9&#39;, &#39;new_cases&#39;: &#39;427&#39;, &#39;serious_critical&#39;: &#39;31&#39;, &#39;active_cases&#39;: &#39;29,045&#39;, &#39;total_cases_per_1m_population&#39;: &#39;397,407&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,415&#39;, &#39;total_tests&#39;: &#39;8,217,113&#39;, &#39;tests_per_1m_population&#39;: &#39;3,096,414&#39;}, {&#39;country_name&#39;: &#39;Tunisia&#39;, &#39;cases&#39;: &#39;1,039,532&#39;, &#39;deaths&#39;: &#39;28,533&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;29&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;86,327&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,369&#39;, &#39;total_tests&#39;: &#39;4,563,397&#39;, &#39;tests_per_1m_population&#39;: &#39;378,962&#39;}, {&#39;country_name&#39;: &#39;Slovenia&#39;, &#39;cases&#39;: &#39;1,003,970&#39;, &#39;deaths&#39;: &#39;6,576&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;980,501&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;30&#39;, &#39;active_cases&#39;: &#39;16,893&#39;, &#39;total_cases_per_1m_population&#39;: &#39;482,805&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,162&#39;, &#39;total_tests&#39;: &#39;2,640,107&#39;, &#39;tests_per_1m_population&#39;: &#39;1,269,615&#39;}, {&#39;country_name&#39;: &#39;Finland&#39;, &#39;cases&#39;: &#39;1,000,472&#39;, &#39;deaths&#39;: &#39;3,638&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;46,000&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;31&#39;, &#39;active_cases&#39;: &#39;950,834&#39;, &#39;total_cases_per_1m_population&#39;: &#39;180,062&#39;, &#39;deaths_per_1m_population&#39;: &#39;655&#39;, &#39;total_tests&#39;: &#39;10,644,579&#39;, &#39;tests_per_1m_population&#39;: &#39;1,915,782&#39;}, {&#39;country_name&#39;: &#39;Nepal&#39;, &#39;cases&#39;: &#39;978,743&#39;, &#39;deaths&#39;: &#39;11,951&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;966,523&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;11&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;269&#39;, &#39;total_cases_per_1m_population&#39;: &#39;32,535&#39;, &#39;deaths_per_1m_population&#39;: &#39;397&#39;, &#39;total_tests&#39;: &#39;5,616,752&#39;, &#39;tests_per_1m_population&#39;: &#39;186,711&#39;}, {&#39;country_name&#39;: &#39;Belarus&#39;, &#39;cases&#39;: &#39;977,434&#39;, &#39;deaths&#39;: &#39;6,922&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;928,536&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;41,976&#39;, &#39;total_cases_per_1m_population&#39;: &#39;103,501&#39;, &#39;deaths_per_1m_population&#39;: &#39;733&#39;, &#39;total_tests&#39;: &#39;13,092,771&#39;, &#39;tests_per_1m_population&#39;: &#39;1,386,401&#39;}, {&#39;country_name&#39;: &#39;Bolivia&#39;, &#39;cases&#39;: &#39;904,377&#39;, &#39;deaths&#39;: &#39;21,908&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;855,123&#39;, &#39;new_deaths&#39;: &#39;1&#39;, &#39;new_cases&#39;: &#39;83&#39;, &#39;serious_critical&#39;: &#39;220&#39;, &#39;active_cases&#39;: &#39;27,346&#39;, &#39;total_cases_per_1m_population&#39;: &#39;75,614&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,832&#39;, &#39;total_tests&#39;: &#39;2,693,845&#39;, &#39;tests_per_1m_population&#39;: &#39;225,230&#39;}, {&#39;country_name&#39;: &#39;UAE&#39;, &#39;cases&#39;: &#39;897,136&#39;, &#39;deaths&#39;: &#39;2,302&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;879,787&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;244&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;15,047&#39;, &#39;total_cases_per_1m_population&#39;: &#39;88,772&#39;, &#39;deaths_per_1m_population&#39;: &#39;228&#39;, &#39;total_tests&#39;: &#39;154,420,740&#39;, &#39;tests_per_1m_population&#39;: &#39;15,279,961&#39;}, {&#39;country_name&#39;: &#39;Uruguay&#39;, &#39;cases&#39;: &#39;895,775&#39;, &#39;deaths&#39;: &#39;7,197&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;886,654&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;18&#39;, &#39;active_cases&#39;: &#39;1,924&#39;, &#39;total_cases_per_1m_population&#39;: &#39;256,268&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,059&#39;, &#39;total_tests&#39;: &#39;6,091,188&#39;, &#39;tests_per_1m_population&#39;: &#39;1,742,599&#39;}, {&#39;country_name&#39;: &#39;New Zealand&#39;, &#39;cases&#39;: &#39;884,289&#39;, &#39;deaths&#39;: &#39;636&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;824,272&#39;, &#39;new_deaths&#39;: &#39;9&#39;, &#39;new_cases&#39;: &#39;5,714&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;59,381&#39;, &#39;total_cases_per_1m_population&#39;: &#39;176,784&#39;, &#39;deaths_per_1m_population&#39;: &#39;127&#39;, &#39;total_tests&#39;: &#39;6,983,031&#39;, &#39;tests_per_1m_population&#39;: &#39;1,396,020&#39;}, {&#39;country_name&#39;: &#39;Ecuador&#39;, &#39;cases&#39;: &#39;868,053&#39;, &#39;deaths&#39;: &#39;35,581&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;759&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;47,888&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,963&#39;, &#39;total_tests&#39;: &#39;2,470,170&#39;, &#39;tests_per_1m_population&#39;: &#39;136,273&#39;}, {&#39;country_name&#39;: &#39;Costa Rica&#39;, &#39;cases&#39;: &#39;847,784&#39;, &#39;deaths&#39;: &#39;8,383&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;829,515&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;43&#39;, &#39;active_cases&#39;: &#39;9,886&#39;, &#39;total_cases_per_1m_population&#39;: &#39;163,725&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,619&#39;, &#39;total_tests&#39;: &#39;4,240,743&#39;, &#39;tests_per_1m_population&#39;: &#39;818,979&#39;}, {&#39;country_name&#39;: &#39;Guatemala&#39;, &#39;cases&#39;: &#39;841,341&#39;, &#39;deaths&#39;: &#39;17,496&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;821,185&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;5&#39;, &#39;active_cases&#39;: &#39;2,660&#39;, &#39;total_cases_per_1m_population&#39;: &#39;45,444&#39;, &#39;deaths_per_1m_population&#39;: &#39;945&#39;, &#39;total_tests&#39;: &#39;4,402,305&#39;, &#39;tests_per_1m_population&#39;: &#39;237,787&#39;}, {&#39;country_name&#39;: &#39;Latvia&#39;, &#39;cases&#39;: &#39;817,316&#39;, &#39;deaths&#39;: &#39;5,743&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;803,135&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;322&#39;, &#39;serious_critical&#39;: &#39;9&#39;, &#39;active_cases&#39;: &#39;8,438&#39;, &#39;total_cases_per_1m_population&#39;: &#39;442,135&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,107&#39;, &#39;total_tests&#39;: &#39;7,154,016&#39;, &#39;tests_per_1m_population&#39;: &#39;3,870,035&#39;}, {&#39;country_name&#39;: &#39;Azerbaijan&#39;, &#39;cases&#39;: &#39;792,476&#39;, &#39;deaths&#39;: &#39;9,707&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;782,634&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;135&#39;, &#39;total_cases_per_1m_population&#39;: &#39;76,908&#39;, &#39;deaths_per_1m_population&#39;: &#39;942&#39;, &#39;total_tests&#39;: &#39;6,792,132&#39;, &#39;tests_per_1m_population&#39;: &#39;659,165&#39;}, {&#39;country_name&#39;: &#39;Panama&#39;, &#39;cases&#39;: &#39;771,486&#39;, &#39;deaths&#39;: &#39;8,182&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;759,832&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;8&#39;, &#39;active_cases&#39;: &#39;3,472&#39;, &#39;total_cases_per_1m_population&#39;: &#39;173,862&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,844&#39;, &#39;total_tests&#39;: &#39;5,820,472&#39;, &#39;tests_per_1m_population&#39;: &#39;1,311,699&#39;}, {&#39;country_name&#39;: &#39;Saudi Arabia&#39;, &#39;cases&#39;: &#39;753,332&#39;, &#39;deaths&#39;: &#39;9,076&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;740,467&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;45&#39;, &#39;active_cases&#39;: &#39;3,789&#39;, &#39;total_cases_per_1m_population&#39;: &#39;21,047&#39;, &#39;deaths_per_1m_population&#39;: &#39;254&#39;, &#39;total_tests&#39;: &#39;41,817,866&#39;, &#39;tests_per_1m_population&#39;: &#39;1,168,345&#39;}, {&#39;country_name&#39;: &#39;Sri Lanka&#39;, &#39;cases&#39;: &#39;663,131&#39;, &#39;deaths&#39;: &#39;16,502&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;642,574&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;4,055&#39;, &#39;total_cases_per_1m_population&#39;: &#39;30,736&#39;, &#39;deaths_per_1m_population&#39;: &#39;765&#39;, &#39;total_tests&#39;: &#39;6,486,117&#39;, &#39;tests_per_1m_population&#39;: &#39;300,627&#39;}, {&#39;country_name&#39;: &#39;Paraguay&#39;, &#39;cases&#39;: &#39;649,034&#39;, &#39;deaths&#39;: &#39;18,795&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;624,673&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;5&#39;, &#39;active_cases&#39;: &#39;5,566&#39;, &#39;total_cases_per_1m_population&#39;: &#39;89,022&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,578&#39;, &#39;total_tests&#39;: &#39;2,623,300&#39;, &#39;tests_per_1m_population&#39;: &#39;359,816&#39;}, {&#39;country_name&#39;: &#39;Kuwait&#39;, &#39;cases&#39;: &#39;631,294&#39;, &#39;deaths&#39;: &#39;2,555&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;627,899&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;8&#39;, &#39;active_cases&#39;: &#39;840&#39;, &#39;total_cases_per_1m_population&#39;: &#39;143,981&#39;, &#39;deaths_per_1m_population&#39;: &#39;583&#39;, &#39;total_tests&#39;: &#39;7,999,656&#39;, &#39;tests_per_1m_population&#39;: &#39;1,824,506&#39;}, {&#39;country_name&#39;: &#39;Myanmar&#39;, &#39;cases&#39;: &#39;612,733&#39;, &#39;deaths&#39;: &#39;19,434&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;591,609&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1,690&#39;, &#39;total_cases_per_1m_population&#39;: &#39;11,127&#39;, &#39;deaths_per_1m_population&#39;: &#39;353&#39;, &#39;total_tests&#39;: &#39;7,891,077&#39;, &#39;tests_per_1m_population&#39;: &#39;143,296&#39;}, {&#39;country_name&#39;: &#39;Palestine&#39;, &#39;cases&#39;: &#39;581,816&#39;, &#39;deaths&#39;: &#39;5,353&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;575,899&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;17&#39;, &#39;active_cases&#39;: &#39;564&#39;, &#39;total_cases_per_1m_population&#39;: &#39;109,459&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,007&#39;, &#39;total_tests&#39;: &#39;3,078,533&#39;, &#39;tests_per_1m_population&#39;: &#39;579,175&#39;}, {&#39;country_name&#39;: &#39;Dominican Republic&#39;, &#39;cases&#39;: &#39;578,954&#39;, &#39;deaths&#39;: &#39;4,376&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;574,297&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;16&#39;, &#39;active_cases&#39;: &#39;281&#39;, &#39;total_cases_per_1m_population&#39;: &#39;52,421&#39;, &#39;deaths_per_1m_population&#39;: &#39;396&#39;, &#39;total_tests&#39;: &#39;3,261,060&#39;, &#39;tests_per_1m_population&#39;: &#39;295,272&#39;}, {&#39;country_name&#39;: &#39;Estonia&#39;, &#39;cases&#39;: &#39;570,257&#39;, &#39;deaths&#39;: &#39;2,531&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;507,474&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;181&#39;, &#39;serious_critical&#39;: &#39;7&#39;, &#39;active_cases&#39;: &#39;60,252&#39;, &#39;total_cases_per_1m_population&#39;: &#39;429,364&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,906&#39;, &#39;total_tests&#39;: &#39;3,311,935&#39;, &#39;tests_per_1m_population&#39;: &#39;2,493,655&#39;}, {&#39;country_name&#39;: &#39;Bahrain&#39;, &#39;cases&#39;: &#39;565,830&#39;, &#39;deaths&#39;: &#39;1,475&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;560,795&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;3&#39;, &#39;active_cases&#39;: &#39;3,560&#39;, &#39;total_cases_per_1m_population&#39;: &#39;312,916&#39;, &#39;deaths_per_1m_population&#39;: &#39;816&#39;, &#39;total_tests&#39;: &#39;9,695,962&#39;, &#39;tests_per_1m_population&#39;: &#39;5,362,081&#39;}, {&#39;country_name&#39;: &#39;Venezuela&#39;, &#39;cases&#39;: &#39;522,121&#39;, &#39;deaths&#39;: &#39;5,705&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;515,305&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;230&#39;, &#39;active_cases&#39;: &#39;1,111&#39;, &#39;total_cases_per_1m_population&#39;: &#39;18,456&#39;, &#39;deaths_per_1m_population&#39;: &#39;202&#39;, &#39;total_tests&#39;: &#39;3,359,014&#39;, &#39;tests_per_1m_population&#39;: &#39;118,733&#39;}, {&#39;country_name&#39;: &#39;Moldova&#39;, &#39;cases&#39;: &#39;516,986&#39;, &#39;deaths&#39;: &#39;11,489&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;504,142&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;49&#39;, &#39;active_cases&#39;: &#39;1,355&#39;, &#39;total_cases_per_1m_population&#39;: &#39;128,698&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,860&#39;, &#39;total_tests&#39;: &#39;3,216,305&#39;, &#39;tests_per_1m_population&#39;: &#39;800,665&#39;}, {&#39;country_name&#39;: &#39;Egypt&#39;, &#39;cases&#39;: &#39;515,645&#39;, &#39;deaths&#39;: &#39;24,613&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;442,182&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;122&#39;, &#39;active_cases&#39;: &#39;48,850&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,873&#39;, &#39;deaths_per_1m_population&#39;: &#39;233&#39;, &#39;total_tests&#39;: &#39;3,693,367&#39;, &#39;tests_per_1m_population&#39;: &#39;34,903&#39;}, {&#39;country_name&#39;: &#39;Libya&#39;, &#39;cases&#39;: &#39;501,862&#39;, &#39;deaths&#39;: &#39;6,429&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;490,900&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;101&#39;, &#39;active_cases&#39;: &#39;4,533&#39;, &#39;total_cases_per_1m_population&#39;: &#39;71,288&#39;, &#39;deaths_per_1m_population&#39;: &#39;913&#39;, &#39;total_tests&#39;: &#39;2,476,960&#39;, &#39;tests_per_1m_population&#39;: &#39;351,844&#39;}, {&#39;country_name&#39;: &#39;Cyprus&#39;, &#39;cases&#39;: &#39;470,481&#39;, &#39;deaths&#39;: &#39;1,011&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;124,370&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;60&#39;, &#39;active_cases&#39;: &#39;345,100&#39;, &#39;total_cases_per_1m_population&#39;: &#39;384,623&#39;, &#39;deaths_per_1m_population&#39;: &#39;827&#39;, &#39;total_tests&#39;: &#39;9,477,138&#39;, &#39;tests_per_1m_population&#39;: &#39;7,747,665&#39;}, {&#39;country_name&#39;: &#39;Ethiopia&#39;, &#39;cases&#39;: &#39;470,417&#39;, &#39;deaths&#39;: &#39;7,510&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;454,967&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;15&#39;, &#39;active_cases&#39;: &#39;7,940&#39;, &#39;total_cases_per_1m_population&#39;: &#39;3,917&#39;, &#39;deaths_per_1m_population&#39;: &#39;63&#39;, &#39;total_tests&#39;: &#39;4,763,756&#39;, &#39;tests_per_1m_population&#39;: &#39;39,665&#39;}, {&#39;country_name&#39;: &#39;Mongolia&#39;, &#39;cases&#39;: &#39;469,580&#39;, &#39;deaths&#39;: &#39;2,177&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;313,256&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;30&#39;, &#39;serious_critical&#39;: &#39;192&#39;, &#39;active_cases&#39;: &#39;154,147&#39;, &#39;total_cases_per_1m_population&#39;: &#39;139,194&#39;, &#39;deaths_per_1m_population&#39;: &#39;645&#39;, &#39;total_tests&#39;: &#39;4,030,048&#39;, &#39;tests_per_1m_population&#39;: &#39;1,194,595&#39;}, {&#39;country_name&#39;: &#39;Armenia&#39;, &#39;cases&#39;: &#39;422,825&#39;, &#39;deaths&#39;: &#39;8,622&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;410,558&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;3&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;3,645&#39;, &#39;total_cases_per_1m_population&#39;: &#39;142,210&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,900&#39;, &#39;total_tests&#39;: &#39;3,035,104&#39;, &#39;tests_per_1m_population&#39;: &#39;1,020,807&#39;}, {&#39;country_name&#39;: &#39;Honduras&#39;, &#39;cases&#39;: &#39;422,275&#39;, &#39;deaths&#39;: &#39;10,892&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;131,100&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;105&#39;, &#39;active_cases&#39;: &#39;280,283&#39;, &#39;total_cases_per_1m_population&#39;: &#39;41,445&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,069&#39;, &#39;total_tests&#39;: &#39;1,263,329&#39;, &#39;tests_per_1m_population&#39;: &#39;123,991&#39;}, {&#39;country_name&#39;: &#39;Oman&#39;, &#39;cases&#39;: &#39;388,995&#39;, &#39;deaths&#39;: &#39;4,257&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;384,055&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;2&#39;, &#39;active_cases&#39;: &#39;683&#39;, &#39;total_cases_per_1m_population&#39;: &#39;72,833&#39;, &#39;deaths_per_1m_population&#39;: &#39;797&#39;, &#39;total_tests&#39;: &#39;25,000,000&#39;, &#39;tests_per_1m_population&#39;: &#39;4,680,828&#39;}, {&#39;country_name&#39;: &#39;Bosnia and Herzegovina&#39;, &#39;cases&#39;: &#39;376,699&#39;, &#39;deaths&#39;: &#39;15,756&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;192,218&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;168,725&#39;, &#39;total_cases_per_1m_population&#39;: &#39;116,122&#39;, &#39;deaths_per_1m_population&#39;: &#39;4,857&#39;, &#39;total_tests&#39;: &#39;1,752,716&#39;, &#39;tests_per_1m_population&#39;: &#39;540,297&#39;}, {&#39;country_name&#39;: &#39;Réunion&#39;, &#39;cases&#39;: &#39;374,295&#39;, &#39;deaths&#39;: &#39;742&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;355,605&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;10&#39;, &#39;active_cases&#39;: &#39;17,948&#39;, &#39;total_cases_per_1m_population&#39;: &#39;412,744&#39;, &#39;deaths_per_1m_population&#39;: &#39;818&#39;, &#39;total_tests&#39;: &#39;1,603,660&#39;, &#39;tests_per_1m_population&#39;: &#39;1,768,393&#39;}, {&#39;country_name&#39;: &#39;Qatar&#39;, &#39;cases&#39;: &#39;364,089&#39;, &#39;deaths&#39;: &#39;677&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;362,568&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;844&#39;, &#39;total_cases_per_1m_population&#39;: &#39;129,670&#39;, &#39;deaths_per_1m_population&#39;: &#39;241&#39;, &#39;total_tests&#39;: &#39;3,425,362&#39;, &#39;tests_per_1m_population&#39;: &#39;1,219,943&#39;}, {&#39;country_name&#39;: &#39;Kenya&#39;, &#39;cases&#39;: &#39;323,696&#39;, &#39;deaths&#39;: &#39;5,649&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;317,909&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;138&#39;, &#39;total_cases_per_1m_population&#39;: &#39;5,790&#39;, &#39;deaths_per_1m_population&#39;: &#39;101&#39;, &#39;total_tests&#39;: &#39;3,581,506&#39;, &#39;tests_per_1m_population&#39;: &#39;64,060&#39;}, {&#39;country_name&#39;: &#39;Zambia&#39;, &#39;cases&#39;: &#39;318,984&#39;, &#39;deaths&#39;: &#39;3,974&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;314,075&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;935&#39;, &#39;total_cases_per_1m_population&#39;: &#39;16,517&#39;, &#39;deaths_per_1m_population&#39;: &#39;206&#39;, &#39;total_tests&#39;: &#39;3,408,441&#39;, &#39;tests_per_1m_population&#39;: &#39;176,487&#39;}, {&#39;country_name&#39;: &#39;North Macedonia&#39;, &#39;cases&#39;: &#39;309,062&#39;, &#39;deaths&#39;: &#39;9,271&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;299,064&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;727&#39;, &#39;total_cases_per_1m_population&#39;: &#39;148,358&#39;, &#39;deaths_per_1m_population&#39;: &#39;4,450&#39;, &#39;total_tests&#39;: &#39;2,007,553&#39;, &#39;tests_per_1m_population&#39;: &#39;963,678&#39;}, {&#39;country_name&#39;: &#39;Botswana&#39;, &#39;cases&#39;: &#39;305,859&#39;, &#39;deaths&#39;: &#39;2,688&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;303,026&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;145&#39;, &#39;total_cases_per_1m_population&#39;: &#39;125,491&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,103&#39;, &#39;total_tests&#39;: &#39;2,026,898&#39;, &#39;tests_per_1m_population&#39;: &#39;831,613&#39;}, {&#39;country_name&#39;: &#39;Albania&#39;, &#39;cases&#39;: &#39;274,791&#39;, &#39;deaths&#39;: &#39;3,496&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;270,869&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;2&#39;, &#39;active_cases&#39;: &#39;426&#39;, &#39;total_cases_per_1m_population&#39;: &#39;95,675&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,217&#39;, &#39;total_tests&#39;: &#39;1,799,730&#39;, &#39;tests_per_1m_population&#39;: &#39;626,620&#39;}, {&#39;country_name&#39;: &#39;Algeria&#39;, &#39;cases&#39;: &#39;265,761&#39;, &#39;deaths&#39;: &#39;6,874&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;178,344&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;6&#39;, &#39;active_cases&#39;: &#39;80,543&#39;, &#39;total_cases_per_1m_population&#39;: &#39;5,869&#39;, &#39;deaths_per_1m_population&#39;: &#39;152&#39;, &#39;total_tests&#39;: &#39;230,861&#39;, &#39;tests_per_1m_population&#39;: &#39;5,099&#39;}, {&#39;country_name&#39;: &#39;Nigeria&#39;, &#39;cases&#39;: &#39;255,685&#39;, &#39;deaths&#39;: &#39;3,143&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;249,890&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;11&#39;, &#39;active_cases&#39;: &#39;2,652&#39;, &#39;total_cases_per_1m_population&#39;: &#39;1,187&#39;, &#39;deaths_per_1m_population&#39;: &#39;15&#39;, &#39;total_tests&#39;: &#39;5,036,813&#39;, &#39;tests_per_1m_population&#39;: &#39;23,388&#39;}, {&#39;country_name&#39;: &#39;Zimbabwe&#39;, &#39;cases&#39;: &#39;247,524&#39;, &#39;deaths&#39;: &#39;5,468&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;241,362&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;12&#39;, &#39;active_cases&#39;: &#39;694&#39;, &#39;total_cases_per_1m_population&#39;: &#39;16,227&#39;, &#39;deaths_per_1m_population&#39;: &#39;358&#39;, &#39;total_tests&#39;: &#39;2,240,305&#39;, &#39;tests_per_1m_population&#39;: &#39;146,872&#39;}, {&#39;country_name&#39;: &#39;Uzbekistan&#39;, &#39;cases&#39;: &#39;238,469&#39;, &#39;deaths&#39;: &#39;1,637&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;236,483&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;27&#39;, &#39;serious_critical&#39;: &#39;23&#39;, &#39;active_cases&#39;: &#39;349&#39;, &#39;total_cases_per_1m_population&#39;: &#39;6,943&#39;, &#39;deaths_per_1m_population&#39;: &#39;48&#39;, &#39;total_tests&#39;: &#39;1,377,915&#39;, &#39;tests_per_1m_population&#39;: &#39;40,120&#39;}, {&#39;country_name&#39;: &#39;Montenegro&#39;, &#39;cases&#39;: &#39;234,619&#39;, &#39;deaths&#39;: &#39;2,713&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;231,297&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;6&#39;, &#39;active_cases&#39;: &#39;609&#39;, &#39;total_cases_per_1m_population&#39;: &#39;373,473&#39;, &#39;deaths_per_1m_population&#39;: &#39;4,319&#39;, &#39;total_tests&#39;: &#39;2,444,820&#39;, &#39;tests_per_1m_population&#39;: &#39;3,891,730&#39;}, {&#39;country_name&#39;: &#39;Luxembourg&#39;, &#39;cases&#39;: &#39;233,966&#39;, &#39;deaths&#39;: &#39;1,058&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;221,501&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;11,407&#39;, &#39;total_cases_per_1m_population&#39;: &#39;363,099&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,642&#39;, &#39;total_tests&#39;: &#39;4,213,886&#39;, &#39;tests_per_1m_population&#39;: &#39;6,539,666&#39;}, {&#39;country_name&#39;: &#39;Mozambique&#39;, &#39;cases&#39;: &#39;225,358&#39;, &#39;deaths&#39;: &#39;2,201&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;223,104&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;13&#39;, &#39;active_cases&#39;: &#39;53&#39;, &#39;total_cases_per_1m_population&#39;: &#39;6,863&#39;, &#39;deaths_per_1m_population&#39;: &#39;67&#39;, &#39;total_tests&#39;: &#39;1,308,458&#39;, &#39;tests_per_1m_population&#39;: &#39;39,849&#39;}, {&#39;country_name&#39;: &#39;Laos&#39;, &#39;cases&#39;: &#39;205,975&#39;, &#39;deaths&#39;: &#39;732&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7,660&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;1,082&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;197,583&#39;, &#39;total_cases_per_1m_population&#39;: &#39;27,588&#39;, &#39;deaths_per_1m_population&#39;: &#39;98&#39;, &#39;total_tests&#39;: &#39;1,232,128&#39;, &#39;tests_per_1m_population&#39;: &#39;165,029&#39;}, {&#39;country_name&#39;: &#39;Kyrgyzstan&#39;, &#39;cases&#39;: &#39;200,983&#39;, &#39;deaths&#39;: &#39;2,991&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;196,386&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;131&#39;, &#39;active_cases&#39;: &#39;1,606&#39;, &#39;total_cases_per_1m_population&#39;: &#39;29,915&#39;, &#39;deaths_per_1m_population&#39;: &#39;445&#39;, &#39;total_tests&#39;: &#39;1,907,195&#39;, &#39;tests_per_1m_population&#39;: &#39;283,874&#39;}, {&#39;country_name&#39;: &#39;China&#39;, &#39;cases&#39;: &#39;200,654&#39;, &#39;deaths&#39;: &#39;4,725&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;166,398&#39;, &#39;new_deaths&#39;: &#39;39&#39;, &#39;new_cases&#39;: &#39;1,580&#39;, &#39;serious_critical&#39;: &#39;236&#39;, &#39;active_cases&#39;: &#39;29,531&#39;, &#39;total_cases_per_1m_population&#39;: &#39;139&#39;, &#39;deaths_per_1m_population&#39;: &#39;3&#39;, &#39;total_tests&#39;: &#39;160,000,000&#39;, &#39;tests_per_1m_population&#39;: &#39;111,163&#39;}, {&#39;country_name&#39;: &#39;Iceland&#39;, &#39;cases&#39;: &#39;183,974&#39;, &#39;deaths&#39;: &#39;112&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;75,685&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;108,177&#39;, &#39;total_cases_per_1m_population&#39;: &#39;532,886&#39;, &#39;deaths_per_1m_population&#39;: &#39;324&#39;, &#39;total_tests&#39;: &#39;1,953,616&#39;, &#39;tests_per_1m_population&#39;: &#39;5,658,702&#39;}, {&#39;country_name&#39;: &#39;Maldives&#39;, &#39;cases&#39;: &#39;178,883&#39;, &#39;deaths&#39;: &#39;298&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;163,687&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;25&#39;, &#39;active_cases&#39;: &#39;14,898&#39;, &#39;total_cases_per_1m_population&#39;: &#39;320,737&#39;, &#39;deaths_per_1m_population&#39;: &#39;534&#39;, &#39;total_tests&#39;: &#39;2,213,831&#39;, &#39;tests_per_1m_population&#39;: &#39;3,969,395&#39;}, {&#39;country_name&#39;: &#39;Afghanistan&#39;, &#39;cases&#39;: &#39;178,689&#39;, &#39;deaths&#39;: &#39;7,682&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;161,748&#39;, &#39;new_deaths&#39;: &#39;1&#39;, &#39;new_cases&#39;: &#39;39&#39;, &#39;serious_critical&#39;: &#39;1,124&#39;, &#39;active_cases&#39;: &#39;9,259&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,411&#39;, &#39;deaths_per_1m_population&#39;: &#39;190&#39;, &#39;total_tests&#39;: &#39;940,341&#39;, &#39;tests_per_1m_population&#39;: &#39;23,212&#39;}, {&#39;country_name&#39;: &#39;Uganda&#39;, &#39;cases&#39;: &#39;164,069&#39;, &#39;deaths&#39;: &#39;3,596&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;100,205&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;2&#39;, &#39;active_cases&#39;: &#39;60,268&#39;, &#39;total_cases_per_1m_population&#39;: &#39;3,394&#39;, &#39;deaths_per_1m_population&#39;: &#39;74&#39;, &#39;total_tests&#39;: &#39;2,612,795&#39;, &#39;tests_per_1m_population&#39;: &#39;54,043&#39;}, {&#39;country_name&#39;: &#39;El Salvador&#39;, &#39;cases&#39;: &#39;162,089&#39;, &#39;deaths&#39;: &#39;4,127&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;150,662&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;8&#39;, &#39;active_cases&#39;: &#39;7,300&#39;, &#39;total_cases_per_1m_population&#39;: &#39;24,764&#39;, &#39;deaths_per_1m_population&#39;: &#39;631&#39;, &#39;total_tests&#39;: &#39;1,950,448&#39;, &#39;tests_per_1m_population&#39;: &#39;297,993&#39;}, {&#39;country_name&#39;: &#39;Ghana&#39;, &#39;cases&#39;: &#39;161,124&#39;, &#39;deaths&#39;: &#39;1,445&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;159,655&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;24&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,997&#39;, &#39;deaths_per_1m_population&#39;: &#39;45&#39;, &#39;total_tests&#39;: &#39;2,433,244&#39;, &#39;tests_per_1m_population&#39;: &#39;75,465&#39;}, {&#39;country_name&#39;: &#39;Namibia&#39;, &#39;cases&#39;: &#39;158,332&#39;, &#39;deaths&#39;: &#39;4,023&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;153,662&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;647&#39;, &#39;total_cases_per_1m_population&#39;: &#39;60,341&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,533&#39;, &#39;total_tests&#39;: &#39;1,001,354&#39;, &#39;tests_per_1m_population&#39;: &#39;381,621&#39;}, {&#39;country_name&#39;: &#39;Martinique&#39;, &#39;cases&#39;: &#39;147,519&#39;, &#39;deaths&#39;: &#39;918&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;104&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;8&#39;, &#39;active_cases&#39;: &#39;146,497&#39;, &#39;total_cases_per_1m_population&#39;: &#39;393,657&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,450&#39;, &#39;total_tests&#39;: &#39;828,928&#39;, &#39;tests_per_1m_population&#39;: &#39;2,212,008&#39;}, {&#39;country_name&#39;: &#39;Trinidad and Tobago&#39;, &#39;cases&#39;: &#39;144,359&#39;, &#39;deaths&#39;: &#39;3,812&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;133,604&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;18&#39;, &#39;active_cases&#39;: &#39;6,943&#39;, &#39;total_cases_per_1m_population&#39;: &#39;102,552&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,708&#39;, &#39;total_tests&#39;: &#39;696,148&#39;, &#39;tests_per_1m_population&#39;: &#39;494,540&#39;}, {&#39;country_name&#39;: &#39;Brunei&#39;, &#39;cases&#39;: &#39;141,014&#39;, &#39;deaths&#39;: &#39;218&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;139,724&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;2&#39;, &#39;active_cases&#39;: &#39;1,072&#39;, &#39;total_cases_per_1m_population&#39;: &#39;316,857&#39;, &#39;deaths_per_1m_population&#39;: &#39;490&#39;, &#39;total_tests&#39;: &#39;717,784&#39;, &#39;tests_per_1m_population&#39;: &#39;1,612,853&#39;}, {&#39;country_name&#39;: &#39;Guadeloupe&#39;, &#39;cases&#39;: &#39;140,130&#39;, &#39;deaths&#39;: &#39;854&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,250&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;19&#39;, &#39;active_cases&#39;: &#39;137,026&#39;, &#39;total_cases_per_1m_population&#39;: &#39;350,108&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,134&#39;, &#39;total_tests&#39;: &#39;938,039&#39;, &#39;tests_per_1m_population&#39;: &#39;2,343,644&#39;}, {&#39;country_name&#39;: &#39;Cambodia&#39;, &#39;cases&#39;: &#39;136,200&#39;, &#39;deaths&#39;: &#39;3,056&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;132,896&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;248&#39;, &#39;total_cases_per_1m_population&#39;: &#39;7,948&#39;, &#39;deaths_per_1m_population&#39;: &#39;178&#39;, &#39;total_tests&#39;: &#39;2,946,965&#39;, &#39;tests_per_1m_population&#39;: &#39;171,969&#39;}, {&#39;country_name&#39;: &#39;Rwanda&#39;, &#39;cases&#39;: &#39;129,764&#39;, &#39;deaths&#39;: &#39;1,458&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;45,522&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;82,784&#39;, &#39;total_cases_per_1m_population&#39;: &#39;9,590&#39;, &#39;deaths_per_1m_population&#39;: &#39;108&#39;, &#39;total_tests&#39;: &#39;5,225,494&#39;, &#39;tests_per_1m_population&#39;: &#39;386,173&#39;}, {&#39;country_name&#39;: &#39;Jamaica&#39;, &#39;cases&#39;: &#39;129,489&#39;, &#39;deaths&#39;: &#39;2,943&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;82,965&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;43,581&#39;, &#39;total_cases_per_1m_population&#39;: &#39;43,387&#39;, &#39;deaths_per_1m_population&#39;: &#39;986&#39;, &#39;total_tests&#39;: &#39;981,688&#39;, &#39;tests_per_1m_population&#39;: &#39;328,929&#39;}, {&#39;country_name&#39;: &#39;Cameroon&#39;, &#39;cases&#39;: &#39;119,780&#39;, &#39;deaths&#39;: &#39;1,927&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;117,791&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;13&#39;, &#39;active_cases&#39;: &#39;62&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,318&#39;, &#39;deaths_per_1m_population&#39;: &#39;69&#39;, &#39;total_tests&#39;: &#39;1,751,774&#39;, &#39;tests_per_1m_population&#39;: &#39;63,154&#39;}, {&#39;country_name&#39;: &#39;Angola&#39;, &#39;cases&#39;: &#39;99,194&#39;, &#39;deaths&#39;: &#39;1,900&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;97,149&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;145&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,858&#39;, &#39;deaths_per_1m_population&#39;: &#39;55&#39;, &#39;total_tests&#39;: &#39;1,499,795&#39;, &#39;tests_per_1m_population&#39;: &#39;43,209&#39;}, {&#39;country_name&#39;: &#39;Malta&#39;, &#39;cases&#39;: &#39;90,595&#39;, &#39;deaths&#39;: &#39;688&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;84,646&#39;, &#39;new_deaths&#39;: &#39;1&#39;, &#39;new_cases&#39;: &#39;196&#39;, &#39;serious_critical&#39;: &#39;4&#39;, &#39;active_cases&#39;: &#39;5,261&#39;, &#39;total_cases_per_1m_population&#39;: &#39;204,196&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,551&#39;, &#39;total_tests&#39;: &#39;1,872,465&#39;, &#39;tests_per_1m_population&#39;: &#39;4,220,438&#39;}, {&#39;country_name&#39;: &#39;DRC&#39;, &#39;cases&#39;: &#39;87,023&#39;, &#39;deaths&#39;: &#39;1,337&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;50,930&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;34,756&#39;, &#39;total_cases_per_1m_population&#39;: &#39;921&#39;, &#39;deaths_per_1m_population&#39;: &#39;14&#39;, &#39;total_tests&#39;: &#39;846,704&#39;, &#39;tests_per_1m_population&#39;: &#39;8,962&#39;}, {&#39;country_name&#39;: &#39;Senegal&#39;, &#39;cases&#39;: &#39;85,984&#39;, &#39;deaths&#39;: &#39;1,966&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;84,001&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;17&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,902&#39;, &#39;deaths_per_1m_population&#39;: &#39;112&#39;, &#39;total_tests&#39;: &#39;1,063,849&#39;, &#39;tests_per_1m_population&#39;: &#39;60,653&#39;}, {&#39;country_name&#39;: &#39;Malawi&#39;, &#39;cases&#39;: &#39;85,747&#39;, &#39;deaths&#39;: &#39;2,633&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;81,938&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;67&#39;, &#39;active_cases&#39;: &#39;1,176&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,283&#39;, &#39;deaths_per_1m_population&#39;: &#39;132&#39;, &#39;total_tests&#39;: &#39;571,585&#39;, &#39;tests_per_1m_population&#39;: &#39;28,548&#39;}, {&#39;country_name&#39;: &#39;Ivory Coast&#39;, &#39;cases&#39;: &#39;81,887&#39;, &#39;deaths&#39;: &#39;799&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;81,061&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;27&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,972&#39;, &#39;deaths_per_1m_population&#39;: &#39;29&#39;, &#39;total_tests&#39;: &#39;1,494,624&#39;, &#39;tests_per_1m_population&#39;: &#39;54,238&#39;}, {&#39;country_name&#39;: &#39;French Guiana&#39;, &#39;cases&#39;: &#39;80,422&#39;, &#39;deaths&#39;: &#39;394&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;11,254&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;68,774&#39;, &#39;total_cases_per_1m_population&#39;: &#39;257,228&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,260&#39;, &#39;total_tests&#39;: &#39;622,646&#39;, &#39;tests_per_1m_population&#39;: &#39;1,991,518&#39;}, {&#39;country_name&#39;: &#39;Suriname&#39;, &#39;cases&#39;: &#39;79,302&#39;, &#39;deaths&#39;: &#39;1,327&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;49,396&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;28,579&#39;, &#39;total_cases_per_1m_population&#39;: &#39;133,030&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,226&#39;, &#39;total_tests&#39;: &#39;235,824&#39;, &#39;tests_per_1m_population&#39;: &#39;395,598&#39;}, {&#39;country_name&#39;: &#39;Channel Islands&#39;, &#39;cases&#39;: &#39;73,609&#39;, &#39;deaths&#39;: &#39;166&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;72,059&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1,384&#39;, &#39;total_cases_per_1m_population&#39;: &#39;416,444&#39;, &#39;deaths_per_1m_population&#39;: &#39;939&#39;, &#39;total_tests&#39;: &#39;1,252,808&#39;, &#39;tests_per_1m_population&#39;: &#39;7,087,782&#39;}, {&#39;country_name&#39;: &#39;French Polynesia&#39;, &#39;cases&#39;: &#39;72,648&#39;, &#39;deaths&#39;: &#39;648&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;7&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;255,948&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,283&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Eswatini&#39;, &#39;cases&#39;: &#39;70,284&#39;, &#39;deaths&#39;: &#39;1,397&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;68,764&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;11&#39;, &#39;active_cases&#39;: &#39;123&#39;, &#39;total_cases_per_1m_population&#39;: &#39;59,470&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,182&#39;, &#39;total_tests&#39;: &#39;1,012,397&#39;, &#39;tests_per_1m_population&#39;: &#39;856,623&#39;}, {&#39;country_name&#39;: &#39;Barbados&#39;, &#39;cases&#39;: &#39;67,256&#39;, &#39;deaths&#39;: &#39;389&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;63,424&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;3,443&#39;, &#39;total_cases_per_1m_population&#39;: &#39;233,520&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,351&#39;, &#39;total_tests&#39;: &#39;640,085&#39;, &#39;tests_per_1m_population&#39;: &#39;2,222,440&#39;}, {&#39;country_name&#39;: &#39;Fiji&#39;, &#39;cases&#39;: &#39;64,524&#39;, &#39;deaths&#39;: &#39;862&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;62,677&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;985&#39;, &#39;total_cases_per_1m_population&#39;: &#39;71,048&#39;, &#39;deaths_per_1m_population&#39;: &#39;949&#39;, &#39;total_tests&#39;: &#39;506,642&#39;, &#39;tests_per_1m_population&#39;: &#39;557,871&#39;}, {&#39;country_name&#39;: &#39;Madagascar&#39;, &#39;cases&#39;: &#39;64,121&#39;, &#39;deaths&#39;: &#39;1,391&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;59,370&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;14&#39;, &#39;active_cases&#39;: &#39;3,360&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,213&#39;, &#39;deaths_per_1m_population&#39;: &#39;48&#39;, &#39;total_tests&#39;: &#39;418,849&#39;, &#39;tests_per_1m_population&#39;: &#39;14,455&#39;}, {&#39;country_name&#39;: &#39;Guyana&#39;, &#39;cases&#39;: &#39;63,413&#39;, &#39;deaths&#39;: &#39;1,228&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;62,092&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;93&#39;, &#39;total_cases_per_1m_population&#39;: &#39;79,925&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,548&#39;, &#39;total_tests&#39;: &#39;590,638&#39;, &#39;tests_per_1m_population&#39;: &#39;744,436&#39;}, {&#39;country_name&#39;: &#39;Sudan&#39;, &#39;cases&#39;: &#39;62,093&#39;, &#39;deaths&#39;: &#39;4,930&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;1,359&#39;, &#39;deaths_per_1m_population&#39;: &#39;108&#39;, &#39;total_tests&#39;: &#39;562,941&#39;, &#39;tests_per_1m_population&#39;: &#39;12,319&#39;}, {&#39;country_name&#39;: &#39;New Caledonia&#39;, &#39;cases&#39;: &#39;60,457&#39;, &#39;deaths&#39;: &#39;312&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;60,064&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;9&#39;, &#39;active_cases&#39;: &#39;81&#39;, &#39;total_cases_per_1m_population&#39;: &#39;208,148&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,074&#39;, &#39;total_tests&#39;: &#39;98,964&#39;, &#39;tests_per_1m_population&#39;: &#39;340,724&#39;}, {&#39;country_name&#39;: &#39;Mauritania&#39;, &#39;cases&#39;: &#39;58,683&#39;, &#39;deaths&#39;: &#39;982&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;57,693&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;8&#39;, &#39;total_cases_per_1m_population&#39;: &#39;12,050&#39;, &#39;deaths_per_1m_population&#39;: &#39;202&#39;, &#39;total_tests&#39;: &#39;799,187&#39;, &#39;tests_per_1m_population&#39;: &#39;164,099&#39;}, {&#39;country_name&#39;: &#39;Bhutan&#39;, &#39;cases&#39;: &#39;57,771&#39;, &#39;deaths&#39;: &#39;20&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;53,080&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;431&#39;, &#39;serious_critical&#39;: &#39;3&#39;, &#39;active_cases&#39;: &#39;4,671&#39;, &#39;total_cases_per_1m_population&#39;: &#39;73,412&#39;, &#39;deaths_per_1m_population&#39;: &#39;25&#39;, &#39;total_tests&#39;: &#39;2,284,301&#39;, &#39;tests_per_1m_population&#39;: &#39;2,902,749&#39;}, {&#39;country_name&#39;: &#39;Belize&#39;, &#39;cases&#39;: &#39;57,419&#39;, &#39;deaths&#39;: &#39;676&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;56,534&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;6&#39;, &#39;active_cases&#39;: &#39;209&#39;, &#39;total_cases_per_1m_population&#39;: &#39;139,823&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,646&#39;, &#39;total_tests&#39;: &#39;534,770&#39;, &#39;tests_per_1m_population&#39;: &#39;1,302,237&#39;}, {&#39;country_name&#39;: &#39;Taiwan&#39;, &#39;cases&#39;: &#39;56,468&#39;, &#39;deaths&#39;: &#39;856&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;23,729&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;5,172&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;31,883&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,363&#39;, &#39;deaths_per_1m_population&#39;: &#39;36&#39;, &#39;total_tests&#39;: &#39;14,289,370&#39;, &#39;tests_per_1m_population&#39;: &#39;598,017&#39;}, {&#39;country_name&#39;: &#39;Cabo Verde&#39;, &#39;cases&#39;: &#39;56,004&#39;, &#39;deaths&#39;: &#39;401&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;55,538&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;23&#39;, &#39;active_cases&#39;: &#39;65&#39;, &#39;total_cases_per_1m_population&#39;: &#39;98,792&#39;, &#39;deaths_per_1m_population&#39;: &#39;707&#39;, &#39;total_tests&#39;: &#39;400,982&#39;, &#39;tests_per_1m_population&#39;: &#39;707,340&#39;}, {&#39;country_name&#39;: &#39;Syria&#39;, &#39;cases&#39;: &#39;55,795&#39;, &#39;deaths&#39;: &#39;3,150&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;52,090&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;555&#39;, &#39;total_cases_per_1m_population&#39;: &#39;3,054&#39;, &#39;deaths_per_1m_population&#39;: &#39;172&#39;, &#39;total_tests&#39;: &#39;146,269&#39;, &#39;tests_per_1m_population&#39;: &#39;8,007&#39;}, {&#39;country_name&#39;: &#39;Gabon&#39;, &#39;cases&#39;: &#39;47,597&#39;, &#39;deaths&#39;: &#39;303&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;47,282&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;12&#39;, &#39;total_cases_per_1m_population&#39;: &#39;20,512&#39;, &#39;deaths_per_1m_population&#39;: &#39;131&#39;, &#39;total_tests&#39;: &#39;1,592,483&#39;, &#39;tests_per_1m_population&#39;: &#39;686,270&#39;}, {&#39;country_name&#39;: &#39;Papua New Guinea&#39;, &#39;cases&#39;: &#39;43,732&#39;, &#39;deaths&#39;: &#39;649&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;43,025&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;7&#39;, &#39;active_cases&#39;: &#39;58&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,726&#39;, &#39;deaths_per_1m_population&#39;: &#39;70&#39;, &#39;total_tests&#39;: &#39;249,149&#39;, &#39;tests_per_1m_population&#39;: &#39;26,927&#39;}, {&#39;country_name&#39;: &#39;Seychelles&#39;, &#39;cases&#39;: &#39;42,079&#39;, &#39;deaths&#39;: &#39;165&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;41,260&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;654&#39;, &#39;total_cases_per_1m_population&#39;: &#39;423,134&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,659&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Curaçao&#39;, &#39;cases&#39;: &#39;41,966&#39;, &#39;deaths&#39;: &#39;273&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;41,251&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;3&#39;, &#39;active_cases&#39;: &#39;442&#39;, &#39;total_cases_per_1m_population&#39;: &#39;253,872&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,652&#39;, &#39;total_tests&#39;: &#39;496,693&#39;, &#39;tests_per_1m_population&#39;: &#39;3,004,725&#39;}, {&#39;country_name&#39;: &#39;Andorra&#39;, &#39;cases&#39;: &#39;41,013&#39;, &#39;deaths&#39;: &#39;153&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;40,343&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;14&#39;, &#39;active_cases&#39;: &#39;517&#39;, &#39;total_cases_per_1m_population&#39;: &#39;529,282&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,974&#39;, &#39;total_tests&#39;: &#39;249,838&#39;, &#39;tests_per_1m_population&#39;: &#39;3,224,215&#39;}, {&#39;country_name&#39;: &#39;Burundi&#39;, &#39;cases&#39;: &#39;38,887&#39;, &#39;deaths&#39;: &#39;38&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;773&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;38,076&#39;, &#39;total_cases_per_1m_population&#39;: &#39;3,104&#39;, &#39;deaths_per_1m_population&#39;: &#39;3&#39;, &#39;total_tests&#39;: &#39;345,742&#39;, &#39;tests_per_1m_population&#39;: &#39;27,594&#39;}, {&#39;country_name&#39;: &#39;Mauritius&#39;, &#39;cases&#39;: &#39;37,656&#39;, &#39;deaths&#39;: &#39;990&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;35,656&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1,010&#39;, &#39;total_cases_per_1m_population&#39;: &#39;29,521&#39;, &#39;deaths_per_1m_population&#39;: &#39;776&#39;, &#39;total_tests&#39;: &#39;358,675&#39;, &#39;tests_per_1m_population&#39;: &#39;281,186&#39;}, {&#39;country_name&#39;: &#39;Mayotte&#39;, &#39;cases&#39;: &#39;37,038&#39;, &#39;deaths&#39;: &#39;187&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,964&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;33,887&#39;, &#39;total_cases_per_1m_population&#39;: &#39;130,099&#39;, &#39;deaths_per_1m_population&#39;: &#39;657&#39;, &#39;total_tests&#39;: &#39;176,919&#39;, &#39;tests_per_1m_population&#39;: &#39;621,442&#39;}, {&#39;country_name&#39;: &#39;Togo&#39;, &#39;cases&#39;: &#39;36,977&#39;, &#39;deaths&#39;: &#39;273&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;36,679&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;25&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,285&#39;, &#39;deaths_per_1m_population&#39;: &#39;32&#39;, &#39;total_tests&#39;: &#39;727,740&#39;, &#39;tests_per_1m_population&#39;: &#39;84,338&#39;}, {&#39;country_name&#39;: &#39;Guinea&#39;, &#39;cases&#39;: &#39;36,459&#39;, &#39;deaths&#39;: &#39;440&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;35,976&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;8&#39;, &#39;active_cases&#39;: &#39;43&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,647&#39;, &#39;deaths_per_1m_population&#39;: &#39;32&#39;, &#39;total_tests&#39;: &#39;660,107&#39;, &#39;tests_per_1m_population&#39;: &#39;47,919&#39;}, {&#39;country_name&#39;: &#39;Faeroe Islands&#39;, &#39;cases&#39;: &#39;34,658&#39;, &#39;deaths&#39;: &#39;28&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7,693&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;5&#39;, &#39;active_cases&#39;: &#39;26,937&#39;, &#39;total_cases_per_1m_population&#39;: &#39;704,460&#39;, &#39;deaths_per_1m_population&#39;: &#39;569&#39;, &#39;total_tests&#39;: &#39;778,000&#39;, &#39;tests_per_1m_population&#39;: &#39;15,813,651&#39;}, {&#39;country_name&#39;: &#39;Aruba&#39;, &#39;cases&#39;: &#39;34,589&#39;, &#39;deaths&#39;: &#39;212&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;34,251&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;2&#39;, &#39;active_cases&#39;: &#39;126&#39;, &#39;total_cases_per_1m_population&#39;: &#39;321,507&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,971&#39;, &#39;total_tests&#39;: &#39;177,885&#39;, &#39;tests_per_1m_population&#39;: &#39;1,653,452&#39;}, {&#39;country_name&#39;: &#39;Tanzania&#39;, &#39;cases&#39;: &#39;33,864&#39;, &#39;deaths&#39;: &#39;803&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;7&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;539&#39;, &#39;deaths_per_1m_population&#39;: &#39;13&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Bahamas&#39;, &#39;cases&#39;: &#39;33,463&#39;, &#39;deaths&#39;: &#39;789&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;32,310&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;11&#39;, &#39;active_cases&#39;: &#39;364&#39;, &#39;total_cases_per_1m_population&#39;: &#39;83,652&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,972&#39;, &#39;total_tests&#39;: &#39;229,817&#39;, &#39;tests_per_1m_population&#39;: &#39;574,504&#39;}, {&#39;country_name&#39;: &#39;Lesotho&#39;, &#39;cases&#39;: &#39;32,910&#39;, &#39;deaths&#39;: &#39;697&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;24,155&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;8,058&#39;, &#39;total_cases_per_1m_population&#39;: &#39;15,146&#39;, &#39;deaths_per_1m_population&#39;: &#39;321&#39;, &#39;total_tests&#39;: &#39;431,221&#39;, &#39;tests_per_1m_population&#39;: &#39;198,454&#39;}, {&#39;country_name&#39;: &#39;Mali&#39;, &#39;cases&#39;: &#39;30,727&#39;, &#39;deaths&#39;: &#39;731&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;29,795&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;201&#39;, &#39;total_cases_per_1m_population&#39;: &#39;1,442&#39;, &#39;deaths_per_1m_population&#39;: &#39;34&#39;, &#39;total_tests&#39;: &#39;663,805&#39;, &#39;tests_per_1m_population&#39;: &#39;31,160&#39;}, {&#39;country_name&#39;: &#39;Haiti&#39;, &#39;cases&#39;: &#39;30,640&#39;, &#39;deaths&#39;: &#39;835&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;29,389&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;416&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,629&#39;, &#39;deaths_per_1m_population&#39;: &#39;72&#39;, &#39;total_tests&#39;: &#39;132,422&#39;, &#39;tests_per_1m_population&#39;: &#39;11,363&#39;}, {&#39;country_name&#39;: &#39;Isle of Man&#39;, &#39;cases&#39;: &#39;28,416&#39;, &#39;deaths&#39;: &#39;87&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;26,794&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1,535&#39;, &#39;total_cases_per_1m_population&#39;: &#39;331,015&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,013&#39;, &#39;total_tests&#39;: &#39;150,753&#39;, &#39;tests_per_1m_population&#39;: &#39;1,756,107&#39;}, {&#39;country_name&#39;: &#39;Benin&#39;, &#39;cases&#39;: &#39;26,952&#39;, &#39;deaths&#39;: &#39;163&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;25,506&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;5&#39;, &#39;active_cases&#39;: &#39;1,283&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,123&#39;, &#39;deaths_per_1m_population&#39;: &#39;13&#39;, &#39;total_tests&#39;: &#39;604,310&#39;, &#39;tests_per_1m_population&#39;: &#39;47,598&#39;}, {&#39;country_name&#39;: &#39;Somalia&#39;, &#39;cases&#39;: &#39;26,485&#39;, &#39;deaths&#39;: &#39;1,350&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;13,182&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;11,953&#39;, &#39;total_cases_per_1m_population&#39;: &#39;1,587&#39;, &#39;deaths_per_1m_population&#39;: &#39;81&#39;, &#39;total_tests&#39;: &#39;400,466&#39;, &#39;tests_per_1m_population&#39;: &#39;23,990&#39;}, {&#39;country_name&#39;: &#39;Congo&#39;, &#39;cases&#39;: &#39;24,079&#39;, &#39;deaths&#39;: &#39;385&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;20,178&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;3,516&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,178&#39;, &#39;deaths_per_1m_population&#39;: &#39;67&#39;, &#39;total_tests&#39;: &#39;347,815&#39;, &#39;tests_per_1m_population&#39;: &#39;60,352&#39;}, {&#39;country_name&#39;: &#39;Saint Lucia&#39;, &#39;cases&#39;: &#39;23,239&#39;, &#39;deaths&#39;: &#39;368&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;22,736&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;135&#39;, &#39;total_cases_per_1m_population&#39;: &#39;125,520&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,988&#39;, &#39;total_tests&#39;: &#39;142,630&#39;, &#39;tests_per_1m_population&#39;: &#39;770,382&#39;}, {&#39;country_name&#39;: &#39;Timor-Leste&#39;, &#39;cases&#39;: &#39;22,860&#39;, &#39;deaths&#39;: &#39;130&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;22,714&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;16&#39;, &#39;total_cases_per_1m_population&#39;: &#39;16,762&#39;, &#39;deaths_per_1m_population&#39;: &#39;95&#39;, &#39;total_tests&#39;: &#39;261,007&#39;, &#39;tests_per_1m_population&#39;: &#39;191,388&#39;}, {&#39;country_name&#39;: &#39;Cayman Islands&#39;, &#39;cases&#39;: &#39;21,755&#39;, &#39;deaths&#39;: &#39;26&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;8,553&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;13,176&#39;, &#39;total_cases_per_1m_population&#39;: &#39;324,145&#39;, &#39;deaths_per_1m_population&#39;: &#39;387&#39;, &#39;total_tests&#39;: &#39;222,773&#39;, &#39;tests_per_1m_population&#39;: &#39;3,319,273&#39;}, {&#39;country_name&#39;: &#39;Burkina Faso&#39;, &#39;cases&#39;: &#39;20,853&#39;, &#39;deaths&#39;: &#39;382&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;20,439&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;32&#39;, &#39;total_cases_per_1m_population&#39;: &#39;951&#39;, &#39;deaths_per_1m_population&#39;: &#39;17&#39;, &#39;total_tests&#39;: &#39;248,995&#39;, &#39;tests_per_1m_population&#39;: &#39;11,350&#39;}, {&#39;country_name&#39;: &#39;Nicaragua&#39;, &#39;cases&#39;: &#39;18,491&#39;, &#39;deaths&#39;: &#39;225&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;4,225&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;14,041&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,733&#39;, &#39;deaths_per_1m_population&#39;: &#39;33&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Gibraltar&#39;, &#39;cases&#39;: &#39;17,706&#39;, &#39;deaths&#39;: &#39;102&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;16,579&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1,025&#39;, &#39;total_cases_per_1m_population&#39;: &#39;525,822&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,029&#39;, &#39;total_tests&#39;: &#39;534,283&#39;, &#39;tests_per_1m_population&#39;: &#39;15,866,807&#39;}, {&#39;country_name&#39;: &#39;South Sudan&#39;, &#39;cases&#39;: &#39;17,422&#39;, &#39;deaths&#39;: &#39;138&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;13,514&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;3,770&#39;, &#39;total_cases_per_1m_population&#39;: &#39;1,524&#39;, &#39;deaths_per_1m_population&#39;: &#39;12&#39;, &#39;total_tests&#39;: &#39;376,391&#39;, &#39;tests_per_1m_population&#39;: &#39;32,928&#39;}, {&#39;country_name&#39;: &#39;Tajikistan&#39;, &#39;cases&#39;: &#39;17,388&#39;, &#39;deaths&#39;: &#39;124&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;17,264&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;0&#39;, &#39;total_cases_per_1m_population&#39;: &#39;1,752&#39;, &#39;deaths_per_1m_population&#39;: &#39;12&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Liechtenstein&#39;, &#39;cases&#39;: &#39;17,103&#39;, &#39;deaths&#39;: &#39;85&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;16,831&#39;, &#39;new_deaths&#39;: &#39;1&#39;, &#39;new_cases&#39;: &#39;12&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;187&#39;, &#39;total_cases_per_1m_population&#39;: &#39;446,251&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,218&#39;, &#39;total_tests&#39;: &#39;102,174&#39;, &#39;tests_per_1m_population&#39;: &#39;2,665,919&#39;}, {&#39;country_name&#39;: &#39;San Marino&#39;, &#39;cases&#39;: &#39;16,140&#39;, &#39;deaths&#39;: &#39;114&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;15,662&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;4&#39;, &#39;active_cases&#39;: &#39;364&#39;, &#39;total_cases_per_1m_population&#39;: &#39;473,870&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,347&#39;, &#39;total_tests&#39;: &#39;149,271&#39;, &#39;tests_per_1m_population&#39;: &#39;4,382,590&#39;}, {&#39;country_name&#39;: &#39;Equatorial Guinea&#39;, &#39;cases&#39;: &#39;15,907&#39;, &#39;deaths&#39;: &#39;183&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;15,698&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;5&#39;, &#39;active_cases&#39;: &#39;26&#39;, &#39;total_cases_per_1m_population&#39;: &#39;10,704&#39;, &#39;deaths_per_1m_population&#39;: &#39;123&#39;, &#39;total_tests&#39;: &#39;310,972&#39;, &#39;tests_per_1m_population&#39;: &#39;209,251&#39;}, {&#39;country_name&#39;: &#39;Djibouti&#39;, &#39;cases&#39;: &#39;15,611&#39;, &#39;deaths&#39;: &#39;189&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;15,411&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;11&#39;, &#39;total_cases_per_1m_population&#39;: &#39;15,396&#39;, &#39;deaths_per_1m_population&#39;: &#39;186&#39;, &#39;total_tests&#39;: &#39;303,924&#39;, &#39;tests_per_1m_population&#39;: &#39;299,748&#39;}, {&#39;country_name&#39;: &#39;CAR&#39;, &#39;cases&#39;: &#39;14,649&#39;, &#39;deaths&#39;: &#39;113&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;6,859&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;2&#39;, &#39;active_cases&#39;: &#39;7,677&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,941&#39;, &#39;deaths_per_1m_population&#39;: &#39;23&#39;, &#39;total_tests&#39;: &#39;81,294&#39;, &#39;tests_per_1m_population&#39;: &#39;16,320&#39;}, {&#39;country_name&#39;: &#39;Grenada&#39;, &#39;cases&#39;: &#39;14,428&#39;, &#39;deaths&#39;: &#39;220&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;13,945&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;4&#39;, &#39;active_cases&#39;: &#39;263&#39;, &#39;total_cases_per_1m_population&#39;: &#39;127,159&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,939&#39;, &#39;total_tests&#39;: &#39;148,567&#39;, &#39;tests_per_1m_population&#39;: &#39;1,309,376&#39;}, {&#39;country_name&#39;: &#39;Bermuda&#39;, &#39;cases&#39;: &#39;13,143&#39;, &#39;deaths&#39;: &#39;131&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;12,719&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;293&#39;, &#39;total_cases_per_1m_population&#39;: &#39;212,453&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,118&#39;, &#39;total_tests&#39;: &#39;866,313&#39;, &#39;tests_per_1m_population&#39;: &#39;14,003,734&#39;}, {&#39;country_name&#39;: &#39;Solomon Islands&#39;, &#39;cases&#39;: &#39;12,437&#39;, &#39;deaths&#39;: &#39;139&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;11,194&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;2&#39;, &#39;active_cases&#39;: &#39;1,104&#39;, &#39;total_cases_per_1m_population&#39;: &#39;17,339&#39;, &#39;deaths_per_1m_population&#39;: &#39;194&#39;, &#39;total_tests&#39;: &#39;5,117&#39;, &#39;tests_per_1m_population&#39;: &#39;7,134&#39;}, {&#39;country_name&#39;: &#39;Dominica&#39;, &#39;cases&#39;: &#39;12,011&#39;, &#39;deaths&#39;: &#39;63&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;11,926&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;22&#39;, &#39;total_cases_per_1m_population&#39;: &#39;166,107&#39;, &#39;deaths_per_1m_population&#39;: &#39;871&#39;, &#39;total_tests&#39;: &#39;187,690&#39;, &#39;tests_per_1m_population&#39;: &#39;2,595,666&#39;}, {&#39;country_name&#39;: &#39;Gambia&#39;, &#39;cases&#39;: &#39;11,995&#39;, &#39;deaths&#39;: &#39;365&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;11,591&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;39&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,724&#39;, &#39;deaths_per_1m_population&#39;: &#39;144&#39;, &#39;total_tests&#39;: &#39;155,686&#39;, &#39;tests_per_1m_population&#39;: &#39;61,314&#39;}, {&#39;country_name&#39;: &#39;Greenland&#39;, &#39;cases&#39;: &#39;11,971&#39;, &#39;deaths&#39;: &#39;21&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,761&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;4&#39;, &#39;active_cases&#39;: &#39;9,189&#39;, &#39;total_cases_per_1m_population&#39;: &#39;210,209&#39;, &#39;deaths_per_1m_population&#39;: &#39;369&#39;, &#39;total_tests&#39;: &#39;164,926&#39;, &#39;tests_per_1m_population&#39;: &#39;2,896,081&#39;}, {&#39;country_name&#39;: &#39;Yemen&#39;, &#39;cases&#39;: &#39;11,818&#39;, &#39;deaths&#39;: &#39;2,148&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;9,001&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;23&#39;, &#39;active_cases&#39;: &#39;669&#39;, &#39;total_cases_per_1m_population&#39;: &#39;381&#39;, &#39;deaths_per_1m_population&#39;: &#39;69&#39;, &#39;total_tests&#39;: &#39;265,253&#39;, &#39;tests_per_1m_population&#39;: &#39;8,553&#39;}, {&#39;country_name&#39;: &#39;Monaco&#39;, &#39;cases&#39;: &#39;11,604&#39;, &#39;deaths&#39;: &#39;54&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;11,362&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;4&#39;, &#39;active_cases&#39;: &#39;188&#39;, &#39;total_cases_per_1m_population&#39;: &#39;291,969&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,359&#39;, &#39;total_tests&#39;: &#39;54,960&#39;, &#39;tests_per_1m_population&#39;: &#39;1,382,850&#39;}, {&#39;country_name&#39;: &#39;Saint Martin&#39;, &#39;cases&#39;: &#39;10,279&#39;, &#39;deaths&#39;: &#39;63&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,399&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;7&#39;, &#39;active_cases&#39;: &#39;8,817&#39;, &#39;total_cases_per_1m_population&#39;: &#39;257,903&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,581&#39;, &#39;total_tests&#39;: &#39;112,382&#39;, &#39;tests_per_1m_population&#39;: &#39;2,819,701&#39;}, {&#39;country_name&#39;: &#39;Sint Maarten&#39;, &#39;cases&#39;: &#39;9,990&#39;, &#39;deaths&#39;: &#39;86&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;9,841&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;10&#39;, &#39;active_cases&#39;: &#39;63&#39;, &#39;total_cases_per_1m_population&#39;: &#39;228,317&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,965&#39;, &#39;total_tests&#39;: &#39;62,056&#39;, &#39;tests_per_1m_population&#39;: &#39;1,418,261&#39;}, {&#39;country_name&#39;: &#39;Eritrea&#39;, &#39;cases&#39;: &#39;9,733&#39;, &#39;deaths&#39;: &#39;103&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;9,629&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,678&#39;, &#39;deaths_per_1m_population&#39;: &#39;28&#39;, &#39;total_tests&#39;: &#39;23,693&#39;, &#39;tests_per_1m_population&#39;: &#39;6,518&#39;}, {&#39;country_name&#39;: &#39;Caribbean Netherlands&#39;, &#39;cases&#39;: &#39;9,592&#39;, &#39;deaths&#39;: &#39;34&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;9,392&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;166&#39;, &#39;total_cases_per_1m_population&#39;: &#39;359,749&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,275&#39;, &#39;total_tests&#39;: &#39;30,126&#39;, &#39;tests_per_1m_population&#39;: &#39;1,129,880&#39;}, {&#39;country_name&#39;: &#39;Tonga&#39;, &#39;cases&#39;: &#39;9,553&#39;, &#39;deaths&#39;: &#39;11&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;8,306&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1,236&#39;, &#39;total_cases_per_1m_population&#39;: &#39;88,571&#39;, &#39;deaths_per_1m_population&#39;: &#39;102&#39;, &#39;total_tests&#39;: &#39;408,213&#39;, &#39;tests_per_1m_population&#39;: &#39;3,784,761&#39;}, {&#39;country_name&#39;: &#39;Niger&#39;, &#39;cases&#39;: &#39;8,914&#39;, &#39;deaths&#39;: &#39;309&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;8,507&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;98&#39;, &#39;total_cases_per_1m_population&#39;: &#39;346&#39;, &#39;deaths_per_1m_population&#39;: &#39;12&#39;, &#39;total_tests&#39;: &#39;249,026&#39;, &#39;tests_per_1m_population&#39;: &#39;9,657&#39;}, {&#39;country_name&#39;: &#39;Guinea-Bissau&#39;, &#39;cases&#39;: &#39;8,185&#39;, &#39;deaths&#39;: &#39;171&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7,515&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;6&#39;, &#39;active_cases&#39;: &#39;499&#39;, &#39;total_cases_per_1m_population&#39;: &#39;3,989&#39;, &#39;deaths_per_1m_population&#39;: &#39;83&#39;, &#39;total_tests&#39;: &#39;132,611&#39;, &#39;tests_per_1m_population&#39;: &#39;64,628&#39;}, {&#39;country_name&#39;: &#39;Comoros&#39;, &#39;cases&#39;: &#39;8,100&#39;, &#39;deaths&#39;: &#39;160&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7,933&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;7&#39;, &#39;total_cases_per_1m_population&#39;: &#39;8,970&#39;, &#39;deaths_per_1m_population&#39;: &#39;177&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Sierra Leone&#39;, &#39;cases&#39;: &#39;7,681&#39;, &#39;deaths&#39;: &#39;125&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;929&#39;, &#39;deaths_per_1m_population&#39;: &#39;15&#39;, &#39;total_tests&#39;: &#39;259,958&#39;, &#39;tests_per_1m_population&#39;: &#39;31,435&#39;}, {&#39;country_name&#39;: &#39;Antigua and Barbuda&#39;, &#39;cases&#39;: &#39;7,571&#39;, &#39;deaths&#39;: &#39;135&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7,402&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;34&#39;, &#39;total_cases_per_1m_population&#39;: &#39;76,172&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,358&#39;, &#39;total_tests&#39;: &#39;18,901&#39;, &#39;tests_per_1m_population&#39;: &#39;190,164&#39;}, {&#39;country_name&#39;: &#39;Liberia&#39;, &#39;cases&#39;: &#39;7,432&#39;, &#39;deaths&#39;: &#39;294&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,747&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;2&#39;, &#39;active_cases&#39;: &#39;1,391&#39;, &#39;total_cases_per_1m_population&#39;: &#39;1,410&#39;, &#39;deaths_per_1m_population&#39;: &#39;56&#39;, &#39;total_tests&#39;: &#39;139,824&#39;, &#39;tests_per_1m_population&#39;: &#39;26,521&#39;}, {&#39;country_name&#39;: &#39;Chad&#39;, &#39;cases&#39;: &#39;7,396&#39;, &#39;deaths&#39;: &#39;193&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;4,874&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;2,329&#39;, &#39;total_cases_per_1m_population&#39;: &#39;428&#39;, &#39;deaths_per_1m_population&#39;: &#39;11&#39;, &#39;total_tests&#39;: &#39;191,341&#39;, &#39;tests_per_1m_population&#39;: &#39;11,075&#39;}, {&#39;country_name&#39;: &#39;Samoa&#39;, &#39;cases&#39;: &#39;7,185&#39;, &#39;deaths&#39;: &#39;13&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,605&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;3&#39;, &#39;active_cases&#39;: &#39;5,567&#39;, &#39;total_cases_per_1m_population&#39;: &#39;35,783&#39;, &#39;deaths_per_1m_population&#39;: &#39;65&#39;, &#39;total_tests&#39;: &#39;53,893&#39;, &#39;tests_per_1m_population&#39;: &#39;268,399&#39;}, {&#39;country_name&#39;: &#39;Vanuatu&#39;, &#39;cases&#39;: &#39;6,793&#39;, &#39;deaths&#39;: &#39;12&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,991&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;5&#39;, &#39;active_cases&#39;: &#39;790&#39;, &#39;total_cases_per_1m_population&#39;: &#39;21,222&#39;, &#39;deaths_per_1m_population&#39;: &#39;37&#39;, &#39;total_tests&#39;: &#39;24,976&#39;, &#39;tests_per_1m_population&#39;: &#39;78,027&#39;}, {&#39;country_name&#39;: &#39;St. Vincent Grenadines&#39;, &#39;cases&#39;: &#39;6,779&#39;, &#39;deaths&#39;: &#39;106&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;6,641&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;32&#39;, &#39;total_cases_per_1m_population&#39;: &#39;60,757&#39;, &#39;deaths_per_1m_population&#39;: &#39;950&#39;, &#39;total_tests&#39;: &#39;98,860&#39;, &#39;tests_per_1m_population&#39;: &#39;886,033&#39;}, {&#39;country_name&#39;: &#39;British Virgin Islands&#39;, &#39;cases&#39;: &#39;6,296&#39;, &#39;deaths&#39;: &#39;62&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;205,792&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,027&#39;, &#39;total_tests&#39;: &#39;102,862&#39;, &#39;tests_per_1m_population&#39;: &#39;3,362,163&#39;}, {&#39;country_name&#39;: &#39;Sao Tome and Principe&#39;, &#39;cases&#39;: &#39;5,953&#39;, &#39;deaths&#39;: &#39;73&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,875&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;5&#39;, &#39;total_cases_per_1m_population&#39;: &#39;26,282&#39;, &#39;deaths_per_1m_population&#39;: &#39;322&#39;, &#39;total_tests&#39;: &#39;29,036&#39;, &#39;tests_per_1m_population&#39;: &#39;128,193&#39;}, {&#39;country_name&#39;: &#39;Turks and Caicos&#39;, &#39;cases&#39;: &#39;5,941&#39;, &#39;deaths&#39;: &#39;36&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,862&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;4&#39;, &#39;active_cases&#39;: &#39;43&#39;, &#39;total_cases_per_1m_population&#39;: &#39;149,791&#39;, &#39;deaths_per_1m_population&#39;: &#39;908&#39;, &#39;total_tests&#39;: &#39;478,593&#39;, &#39;tests_per_1m_population&#39;: &#39;12,066,789&#39;}, {&#39;country_name&#39;: &#39;Saint Kitts and Nevis&#39;, &#39;cases&#39;: &#39;5,561&#39;, &#39;deaths&#39;: &#39;43&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,517&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1&#39;, &#39;total_cases_per_1m_population&#39;: &#39;103,215&#39;, &#39;deaths_per_1m_population&#39;: &#39;798&#39;, &#39;total_tests&#39;: &#39;65,141&#39;, &#39;tests_per_1m_population&#39;: &#39;1,209,046&#39;}, {&#39;country_name&#39;: &#39;Cook Islands&#39;, &#39;cases&#39;: &#39;4,727&#39;, &#39;deaths&#39;: &#39;0&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,990&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;737&#39;, &#39;total_cases_per_1m_population&#39;: &#39;268,686&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;15,740&#39;, &#39;tests_per_1m_population&#39;: &#39;894,674&#39;}, {&#39;country_name&#39;: &#39;St. Barth&#39;, &#39;cases&#39;: &#39;4,432&#39;, &#39;deaths&#39;: &#39;6&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;446,279&#39;, &#39;deaths_per_1m_population&#39;: &#39;604&#39;, &#39;total_tests&#39;: &#39;78,646&#39;, &#39;tests_per_1m_population&#39;: &#39;7,919,243&#39;}, {&#39;country_name&#39;: &#39;Palau&#39;, &#39;cases&#39;: &#39;4,396&#39;, &#39;deaths&#39;: &#39;6&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,879&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;511&#39;, &#39;total_cases_per_1m_population&#39;: &#39;240,877&#39;, &#39;deaths_per_1m_population&#39;: &#39;329&#39;, &#39;total_tests&#39;: &#39;45,500&#39;, &#39;tests_per_1m_population&#39;: &#39;2,493,151&#39;}, {&#39;country_name&#39;: &#39;Kiribati&#39;, &#39;cases&#39;: &#39;3,076&#39;, &#39;deaths&#39;: &#39;13&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,597&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;3&#39;, &#39;active_cases&#39;: &#39;466&#39;, &#39;total_cases_per_1m_population&#39;: &#39;25,058&#39;, &#39;deaths_per_1m_population&#39;: &#39;106&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Anguilla&#39;, &#39;cases&#39;: &#39;2,731&#39;, &#39;deaths&#39;: &#39;9&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,716&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;4&#39;, &#39;active_cases&#39;: &#39;6&#39;, &#39;total_cases_per_1m_population&#39;: &#39;179,141&#39;, &#39;deaths_per_1m_population&#39;: &#39;590&#39;, &#39;total_tests&#39;: &#39;51,382&#39;, &#39;tests_per_1m_population&#39;: &#39;3,370,417&#39;}, {&#39;country_name&#39;: &#39;Saint Pierre Miquelon&#39;, &#39;cases&#39;: &#39;2,641&#39;, &#39;deaths&#39;: &#39;1&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,449&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;191&#39;, &#39;total_cases_per_1m_population&#39;: &#39;459,864&#39;, &#39;deaths_per_1m_population&#39;: &#39;174&#39;, &#39;total_tests&#39;: &#39;22,941&#39;, &#39;tests_per_1m_population&#39;: &#39;3,994,602&#39;}, {&#39;country_name&#39;: &#39;Diamond Princess&#39;, &#39;cases&#39;: &#39;712&#39;, &#39;deaths&#39;: &#39;13&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;699&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;0&#39;, &#39;total_cases_per_1m_population&#39;: &#39;0&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Wallis and Futuna&#39;, &#39;cases&#39;: &#39;454&#39;, &#39;deaths&#39;: &#39;7&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;438&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;9&#39;, &#39;total_cases_per_1m_population&#39;: &#39;41,713&#39;, &#39;deaths_per_1m_population&#39;: &#39;643&#39;, &#39;total_tests&#39;: &#39;20,508&#39;, &#39;tests_per_1m_population&#39;: &#39;1,884,234&#39;}, {&#39;country_name&#39;: &#39;Montserrat&#39;, &#39;cases&#39;: &#39;183&#39;, &#39;deaths&#39;: &#39;2&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;174&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;7&#39;, &#39;total_cases_per_1m_population&#39;: &#39;36,622&#39;, &#39;deaths_per_1m_population&#39;: &#39;400&#39;, &#39;total_tests&#39;: &#39;9,700&#39;, &#39;tests_per_1m_population&#39;: &#39;1,941,165&#39;}, {&#39;country_name&#39;: &#39;Falkland Islands&#39;, &#39;cases&#39;: &#39;128&#39;, &#39;deaths&#39;: &#39;0&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;34,944&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;8,632&#39;, &#39;tests_per_1m_population&#39;: &#39;2,356,538&#39;}, {&#39;country_name&#39;: &#39;Macao&#39;, &#39;cases&#39;: &#39;82&#39;, &#39;deaths&#39;: &#39;0&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;82&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;0&#39;, &#39;total_cases_per_1m_population&#39;: &#39;123&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;5,375&#39;, &#39;tests_per_1m_population&#39;: &#39;8,079&#39;}, {&#39;country_name&#39;: &#39;Vatican City&#39;, &#39;cases&#39;: &#39;29&#39;, &#39;deaths&#39;: &#39;0&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;29&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;0&#39;, &#39;total_cases_per_1m_population&#39;: &#39;36,025&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Marshall Islands&#39;, &#39;cases&#39;: &#39;15&#39;, &#39;deaths&#39;: &#39;0&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;8&#39;, &#39;total_cases_per_1m_population&#39;: &#39;250&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Western Sahara&#39;, &#39;cases&#39;: &#39;10&#39;, &#39;deaths&#39;: &#39;1&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;9&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;0&#39;, &#39;total_cases_per_1m_population&#39;: &#39;16&#39;, &#39;deaths_per_1m_population&#39;: &#39;2&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;MS Zaandam&#39;, &#39;cases&#39;: &#39;9&#39;, &#39;deaths&#39;: &#39;2&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;0&#39;, &#39;total_cases_per_1m_population&#39;: &#39;0&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Niue&#39;, &#39;cases&#39;: &#39;8&#39;, &#39;deaths&#39;: &#39;0&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,860&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Nauru&#39;, &#39;cases&#39;: &#39;3&#39;, &#39;deaths&#39;: &#39;0&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;0&#39;, &#39;total_cases_per_1m_population&#39;: &#39;274&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Saint Helena&#39;, &#39;cases&#39;: &#39;2&#39;, &#39;deaths&#39;: &#39;0&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;0&#39;, &#39;total_cases_per_1m_population&#39;: &#39;327&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Micronesia&#39;, &#39;cases&#39;: &#39;1&#39;, &#39;deaths&#39;: &#39;0&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;0&#39;, &#39;total_cases_per_1m_population&#39;: &#39;9&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}], &#39;statistic_taken_at&#39;: &#39;2022-04-24 11:18:01&#39;, &#39;world_total&#39;: {&#39;total_cases&#39;: &#39;509,268,964&#39;, &#39;new_cases&#39;: &#39;204,268&#39;, &#39;total_deaths&#39;: &#39;6,242,509&#39;, &#39;new_deaths&#39;: &#39;630&#39;, &#39;total_recovered&#39;: &#39;461,827,849&#39;, &#39;active_cases&#39;: &#39;41,198,606&#39;, &#39;serious_critical&#39;: &#39;42,510&#39;, &#39;total_cases_per_1m_population&#39;: &#39;65,334&#39;, &#39;deaths_per_1m_population&#39;: &#39;800.9&#39;, &#39;statistic_taken_at&#39;: &#39;2022-04-24 11:18:01&#39;}} World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . import requests url = &quot;https://airport-info.p.rapidapi.com/airport&quot; querystring = {&quot;iata&quot;:&quot;LAX&quot;,&quot;icao&quot;:&quot;KLAX&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;b558955759msh32134753facfdd1p133021jsncf26cd31822e&quot;, &quot;X-RapidAPI-Host&quot;: &quot;airport-info.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) . {&#34;id&#34;:4044,&#34;iata&#34;:&#34;LAX&#34;,&#34;icao&#34;:&#34;KLAX&#34;,&#34;name&#34;:&#34;Los Angeles International Airport&#34;,&#34;location&#34;:&#34;Los Angeles, California, United States&#34;,&#34;street_number&#34;:&#34;1&#34;,&#34;street&#34;:&#34;World Way&#34;,&#34;city&#34;:&#34;Los Angeles&#34;,&#34;county&#34;:&#34;Los Angeles County&#34;,&#34;state&#34;:&#34;California&#34;,&#34;country_iso&#34;:&#34;US&#34;,&#34;country&#34;:&#34;United States&#34;,&#34;postal_code&#34;:&#34;90045&#34;,&#34;phone&#34;:&#34;+1 855-463-5252&#34;,&#34;latitude&#34;:33.94159,&#34;longitude&#34;:-118.40853,&#34;uct&#34;:-420,&#34;website&#34;:&#34;http://www.lawa.org/welcomelax.aspx&#34;} . import requests url = &quot;https://airport-info.p.rapidapi.com/airport&quot; querystring = {&quot;iata&quot;:&quot;LAX&quot;,&quot;icao&quot;:&quot;KLAX&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;b558955759msh32134753facfdd1p133021jsncf26cd31822e&quot;, &quot;X-RapidAPI-Host&quot;: &quot;airport-info.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) # print(response.text) airports = response.json().get(&#39;data&#39;) for airport in airports: if airport[&quot;home&quot;] == &quot;LAX&quot;: for key, value in airport.items(): print(key, value) . TypeError Traceback (most recent call last) /mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb Cell 10 in &lt;cell line: 16&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; # print(response.text) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; airports = response.json().get(&#39;data&#39;) &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; for airport in airports: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; if airport[&#34;home&#34;] == &#34;LAX&#34;: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/rohan/vscode/RohanRepository/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; for key, value in airport.items(): TypeError: &#39;NoneType&#39; object is not iterable . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://rohanagr.github.io/RohanRepository/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 1 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 101: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 10 == 5: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 print(&quot;Hello! Welcome to me restaurant.&quot;) print(&quot;Menu:&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) order = True while order: item = input(&quot;order here:&quot;) if item in menu.keys(): total+= menu[item] print(&quot;grand total:&quot;, total) else: order = False print(&quot;Your Total is:&quot;,total) . Hello! Welcome to me restaurant. Menu: burger $3.99 fries $1.99 drink $0.99 Your Total is: 0 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://rohanagr.github.io/RohanRepository/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Tentative Project Idea",
            "content": "Group Members: . Rohan | Saavan | Derek | Dillon | . Tentative project ideas . We were thinking of making a website which could allow for free movies and streams. | Another idea was that we make a small database of baseball, football, and / or basketball players | The goal is to get people into sports (maybe) | .",
            "url": "https://rohanagr.github.io/RohanRepository/posts/2022/09/26/ProjectIdea.html",
            "relUrl": "/posts/2022/09/26/ProjectIdea.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "JavaScript Fragments",
            "content": "Our Group . Dillon Lee: Scrum Master | Rohan Agarwal: Backend Dev | Derek Sol: Frontend Dev | Saavan Gade: DevOps | .",
            "url": "https://rohanagr.github.io/RohanRepository/csp%20assignments/week%206/2022/09/26/JSFragments.html",
            "relUrl": "/csp%20assignments/week%206/2022/09/26/JSFragments.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Title",
            "content": ". toc: true layout: notebook description: categories: [posts] . title: CB Performance Task Planning . This is an overview of javascript | . console.log(&quot;Rohan Agarwal&quot;); . Rohan Agarwal . var msg = &quot;Rohan Agarwal&quot; console.log(msg) . Rohan Agarwal . function logIt(output) { console.log(output); } logIt(msg) . Rohan Agarwal . console.log(&quot;Reuse of logIt&quot;) logIt(&quot;Rohan Agarwal&quot;) logIt(2023) . Reuse of logIt Rohan Agarwal 2023 . function LogItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) LogItType(&quot;Rohan Agarwal&quot;); LogItType(2020); LogItType([1, 2, 3]); . Looking at dynamic nature of types in JavaScript string ; Rohan Agarwal number ; 2020 object ; [ 1, 2, 3 ] . function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } Person.prototype.setRole = function(role) { this.role = role; } Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } var student = new Person(&quot;Rohan&quot;, &quot;RohanAgr&quot;, 2023); LogItType(student); LogItType(student.toJSON()); teacher.setRole(&quot;Student&quot;); LogItType(student); LogItType(teacher.toJSON()); . object ; Person { name: &#39;Rohan&#39;, ghID: &#39;RohanAgr&#39;, classOf: 2023, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Rohan&#34;,&#34;ghID&#34;:&#34;RohanAgr&#34;,&#34;classOf&#34;:2023,&#34;role&#34;:&#34;&#34;} . evalmachine.&lt;anonymous&gt;:22 teacher.setRole(&#34;Student&#34;); ^ ReferenceError: teacher is not defined at evalmachine.&lt;anonymous&gt;:22:1 at ContextifyScript.Script.runInThisContext (vm.js:25:33) at Object.runInThisContext (vm.js:97:38) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) . function Player(name, position, average) { this.name = name; this.position = position; this.average = average; this.role = &quot;&quot;; } Player.prototype.setRole = function(role) { this.role = role; } Player.prototype.toJSON = function() { const obj = {name: this.name, position: this.position, average: this.average, role: this.role}; const json = JSON.stringify(obj); return json; } var manager = new Player(&quot;Bob Melvin&quot;, &quot;Catcher&quot;, &quot;.233&quot;); LogItType(manager); LogItType(manager.toJSON()); manager.setRole(&quot;Manager&quot;); LogItType(manager); LogItType(manager.toJSON()); . evalmachine.&lt;anonymous&gt;:19 LogItType(manager); ^ ReferenceError: LogItType is not defined at evalmachine.&lt;anonymous&gt;:19:1 at ContextifyScript.Script.runInThisContext (vm.js:25:33) at Object.runInThisContext (vm.js:97:38) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) . var players = [ new Player(&quot;Manny Machado&quot;, &quot;Third Base&quot;, &quot;.299&quot;), new Player(&quot;Trent Grisham&quot;, &quot;Center Field&quot;, &quot;.185&quot;), new Player(&quot;Jake Cronenworth&quot;, &quot;Second Base&quot;, &quot;.238&quot;), new Player(&quot;Jurickson Profar&quot;, &quot;Left Field&quot;, &quot;.240&quot;), new Player(&quot;Ha-Seong Kim&quot;, &quot;Shortstop&quot;, &quot;.252&quot;), new Player(&quot;Brandon Drury&quot;, &quot;First Base&quot;, &quot;.226&quot;), new Player(&quot;Jorge Alfaro&quot;, &quot;Catcher&quot;, &quot;.249&quot;), new Player(&quot;Wil Myers&quot;, &quot;Right Field, First Base&quot;, &quot;.255&quot;), new Player(&quot;Juan Soto&quot;, &quot;Right Field&quot;, &quot;.242&quot;), new Player(&quot;Austin Nola&quot;, &quot;Catcher&quot;, &quot;.248&quot;), new Player(&quot;Josh Bell&quot;, &quot;Designated Hitter, First Base&quot;, &quot;.191&quot;), new Player(&quot;Jose Azocar&quot;, &quot;Outfield&quot;, &quot;.272&quot;), ]; function Padres(manager, players){ manager.setRole(&quot;Manager&quot;); this.manager = manager; this.padres = [manager]; this.players = players; this.players.forEach(player =&gt; { player.setRole(&quot;Player&quot;); this.padres.push(player); }); this.json = []; this.padres.forEach(player =&gt; this.json.push(player.toJSON())); } sd2022 = new Padres(manager, players); LogItType(sd2022.padres); LogItType(sd2022.padres[0].name); LogItType(sd2022.json[0]); LogItType(JSON.parse(sd2022.json[0])); . object ; [ Player { name: &#39;Bob Melvin&#39;, position: &#39;Catcher&#39;, average: &#39;.233&#39;, role: &#39;Manager&#39; }, Player { name: &#39;Manny Machado&#39;, position: &#39;Third Base&#39;, average: &#39;.299&#39;, role: &#39;Player&#39; }, Player { name: &#39;Trent Grisham&#39;, position: &#39;Center Field&#39;, average: &#39;.185&#39;, role: &#39;Player&#39; }, Player { name: &#39;Jake Cronenworth&#39;, position: &#39;Second Base&#39;, average: &#39;.238&#39;, role: &#39;Player&#39; }, Player { name: &#39;Jurickson Profar&#39;, position: &#39;Left Field&#39;, average: &#39;.240&#39;, role: &#39;Player&#39; }, Player { name: &#39;Ha-Seong Kim&#39;, position: &#39;Shortstop&#39;, average: &#39;.252&#39;, role: &#39;Player&#39; }, Player { name: &#39;Brandon Drury&#39;, position: &#39;First Base&#39;, average: &#39;.226&#39;, role: &#39;Player&#39; }, Player { name: &#39;Jorge Alfaro&#39;, position: &#39;Catcher&#39;, average: &#39;.249&#39;, role: &#39;Player&#39; }, Player { name: &#39;Wil Myers&#39;, position: &#39;Right Field, First Base&#39;, average: &#39;.255&#39;, role: &#39;Player&#39; }, Player { name: &#39;Juan Soto&#39;, position: &#39;Right Field&#39;, average: &#39;.242&#39;, role: &#39;Player&#39; }, Player { name: &#39;Austin Nola&#39;, position: &#39;Catcher&#39;, average: &#39;.248&#39;, role: &#39;Player&#39; }, Player { name: &#39;Josh Bell&#39;, position: &#39;Designated Hitter, First Base&#39;, average: &#39;.191&#39;, role: &#39;Player&#39; }, Player { name: &#39;Jose Azocar&#39;, position: &#39;Outfield&#39;, average: &#39;.272&#39;, role: &#39;Player&#39; } ] string ; Bob Melvin string ; {&#34;name&#34;:&#34;Bob Melvin&#34;,&#34;position&#34;:&#34;Catcher&#34;,&#34;average&#34;:&#34;.233&#34;,&#34;role&#34;:&#34;Manager&#34;} object ; { name: &#39;Bob Melvin&#39;, position: &#39;Catcher&#39;, average: &#39;.233&#39;, role: &#39;Manager&#39; } . Padres.prototype._toHtml = function() { var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); var body = &quot;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Position&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Batting Average&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; for (var row of sd2022.padres) { body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.position + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.average + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; } return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; $$.html(sd2022._toHtml()); . NamePositionBatting AverageRole . Bob Melvin | Catcher | .233 | Manager | Manny Machado | Third Base | .299 | Player | Trent Grisham | Center Field | .185 | Player | Jake Cronenworth | Second Base | .238 | Player | Jurickson Profar | Left Field | .240 | Player | Ha-Seong Kim | Shortstop | .252 | Player | Brandon Drury | First Base | .226 | Player | Jorge Alfaro | Catcher | .249 | Player | Wil Myers | Right Field, First Base | .255 | Player | Juan Soto | Right Field | .242 | Player | Austin Nola | Catcher | .248 | Player | Josh Bell | Designated Hitter, First Base | .191 | Player | Jose Azocar | Outfield | .272 | Player | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . . . .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/09/25/JavaScript.html",
            "relUrl": "/2022/09/25/JavaScript.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Collaboration Post",
            "content": "The Essence of Collaboration . Innovations are always better through collaboration and other people’s input | Effective collaboration includes communication, consensus, compromises, and resolving conflicts | Computing innovation is a result of collaboration and includes diverse talents, skills, perspectives, and backgrounds. | Can reduce bias | . From the second daily video . Emphasizes communication and consultation of peers | Inputs from the entire group can help understand all the aspects of a program or the task at hand. It also incorporates all the perspectives | . Quiz . 2/3 correct | Benefits of a diverse team: It can eliminate the need for software testing | Having three students write independent code and then another person combine all of them into a program is not an effective way of communication. | One benefit of having users participate is to provide feedback that can be used to incorporate a variety of perspectives into the software. | .",
            "url": "https://rohanagr.github.io/RohanRepository/posts/2022/09/21/collaboration.html",
            "relUrl": "/posts/2022/09/21/collaboration.html",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Stress Video Blog",
            "content": "Overview . A college professor surveyed Yale University’s student body and noticed that a lot of people were stressed | It affected their learning environment and negatively affected the student body and endeavors of Yale University | There are many fallacies such as GI-Joe | Knowing your mental situation is half the battle, and taking action is the other half | They excitedly come to Yale but cannot function properly because of their depression or other mental situation | . What I learned . 40% of students are extremely stressed | 1/3 are so depressed that it is hard for them to function properly | 40% feel hopeless in school | 60% of people have developed a large amount of anxiety | It is crazy that people are stressed to an extent that they cannot function properly at school, even in a prestigious university like Yale. | It makes me want to regularly check myself and make sure I am not overly stressed to an extent where my performance drops. | . Group Member Takeaways . Derek said that it was interesting how stress is everywhere and many people have it, but find it hard to deal with. He felt connected to some statistics and it made him feel that we are not alone when we are unhappy at times. | Dillon was surprised aat how much stress and anxiety college students have in the academic environment. He worries about himself as a result and always takes time to reflect and make sure he is under control. | Saavan thought the video was very informational and believes that it is very important to work towards stress relief as a means of living a happier life. | . I Am Thankful For… . my parents | my computer | my teachers for fostering a great learning environment | my bike so I can go places | my drivers license so I can actually drive. | .",
            "url": "https://rohanagr.github.io/RohanRepository/posts/2022/09/15/StressPost.html",
            "relUrl": "/posts/2022/09/15/StressPost.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Docker Test",
            "content": "print (&quot;testing... testing... testing...&quot;) .",
            "url": "https://rohanagr.github.io/RohanRepository/posts/2022/09/13/dockerpost.html",
            "relUrl": "/posts/2022/09/13/dockerpost.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "CB Performance Task Planning",
            "content": "This is going to be a monumental task XD . Me and Dillon will be sharing a common code, and then we deviate based on whatever theme we want to add . We make a new Jupyter notebook for the code | we hope to make a database to store information, and then we make a search engine | The search engine will extract information from the database depending on what is searched | Variables: we can use this to interchange the variables in between 2 code cells | one code cell stores data, and the other code cell outputs the data | we can classify and sort each input in the database (e.g. date of birth, height, other statistics) | Me and Dillon might split this task into smaller problems, and we will specify who wrote which code cell. | We can take inspiration from the Data Abstraction week and expand on it. | Everything here is subject to change in case an idea doesn’t work | .",
            "url": "https://rohanagr.github.io/RohanRepository/posts/2022/09/09/PerformaceTaskPlan.html",
            "relUrl": "/posts/2022/09/09/PerformaceTaskPlan.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Quiz and App using AppLab",
            "content": "Me and Dillon made an app and quiz using AppLab . it was fun lol xd | We were introduced to JavaScript and used it in our app through block codes. We were able to see the plaintext when we changed a few settings. | Our quiz was about Major League Baseball (again) and our app consisted of a drop down menu which gave a brief overview about the major wars fought by the West in the 20th century (World War I, World War II, Cold War) | Our quiz has 10 questions and our app had 3 sections, one for each question and / or major event. | We got the program to work without facing too many setbacks | We included a lot of “on event” commands to allow for easy app and quiz navigation | We found the overall process to be easy, but it was tedious writing the same “on event” command function over 10-20 times. | . Key Takeaways . AppLab is a great little platform to see how certain commands and variables work | With the right planning and execution, a task which may seem hard at first gets a lot easier | The data appeared to be stored in each screen, and the OnEvent command would allow for the code to call the input. | Resembled data abstraction . | You can view the quiz here | You can view the app here . | Here is the plan that me and Dillon made before coding the app and the quiz: | . Component Plan / Execution . Home Page | Have an image of the MLB logo. Place a button below the logo and the quiz begins when we press start. | . Questions | Here we can have all sorts of questions MLB related, such as MVP races, team names, trades, and more | . Aesthetic Appeal | We can place images beside each question to make the screen look full. We can adjust the theme so it is easy on the eye. | .",
            "url": "https://rohanagr.github.io/RohanRepository/posts/2022/09/09/AppQuizBlog.html",
            "relUrl": "/posts/2022/09/09/AppQuizBlog.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Themeblogpost",
            "content": "categories: [posts] . I used the hacker theme for my fastpages. I thought it looked good and the color contrast was quite nice. | However, I could not locate the menus, about me, and the other tabs which was there in the default theme. | .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/09/04/ThemeBlogPost.html",
            "relUrl": "/2022/09/04/ThemeBlogPost.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Title",
            "content": "Title: MLB Players | layout: notebook | categories: [jupyter] | . This post contains some information about two of my favorite baseball players. . #Append to player profile of Manny Machado in his 10 year career in MLB InfoDb = [] InfoDb.append({ &quot;FirstName&quot;: &quot;Manny&quot;, &quot;LastName&quot;: &quot;Machado&quot;, &quot;Position&quot;: &quot;Third Base&quot;, &quot;MLB Debut&quot;: &quot;August 9, 2012&quot;, &quot;Batting Average&quot;: &quot;.282&quot;, &quot;Career OPS&quot;: &quot;.833&quot;, &quot;Teams&quot;: [&quot;Baltimore Orioles&quot;, &quot;Los Angeles Dodgers&quot;, &quot;San Diego Padres&quot;] }) #Append to player profile of Aaron Judge in his 6 year career in MLB InfoDb.append({ &quot;FirstName&quot;: &quot;Aaron&quot;, &quot;LastName&quot;: &quot;Judge&quot;, &quot;Position&quot;: &quot;Outfield&quot;, &quot;MLB Debut&quot;: &quot;August 13, 2016&quot;, &quot;Batting Average&quot;: &quot;.280&quot;, &quot;Career OPS&quot;: &quot;.963&quot;, &quot;Teams&quot;: [&quot;New York Yankees&quot;] }) . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Position:&quot;, d_rec[&quot;Position&quot;]) print(&quot; t&quot;, &quot;MLB Debut:&quot;, d_rec[&quot;MLB Debut&quot;]) print(&quot; t&quot;, &quot;Batting Average:&quot;, d_rec[&quot;Batting Average&quot;]) print(&quot; t&quot;, &quot;Career OPS:&quot;, d_rec[&quot;Career OPS&quot;]) print(&quot; t&quot;, &quot;Teams: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Teams&quot;])) print() def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Manny Machado Position: Third Base MLB Debut: August 9, 2012 Batting Average: .282 Career OPS: .833 Teams: Baltimore Orioles, Los Angeles Dodgers, San Diego Padres Aaron Judge Position: Outfield MLB Debut: August 13, 2016 Batting Average: .280 Career OPS: .963 Teams: New York Yankees .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/08/30/InfoDb.html",
            "relUrl": "/2022/08/30/InfoDb.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "Title",
            "content": "categories: [jupyter] | . Welcome . This bash code will check to see if the javascript kernel is installed. . python --versions python2 --version . unknown option --versions usage: python [option] ... [-c cmd | -m mod | file | -] [arg] ... Try `python -h&#39; for more information. Python 2.7.18 . conda list . # packages in environment at /home/rohanagr/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.4.0 ipykernel : 6.15.1 ipywidgets : not installed jupyter_client : 7.3.4 jupyter_core : 4.11.1 jupyter_server : not installed jupyterlab : not installed nbclient : not installed nbconvert : not installed nbformat : not installed notebook : not installed qtconsole : not installed traitlets : 5.3.0 Available kernels: bash /home/rohanagr/.local/share/jupyter/kernels/bash javascript /home/rohanagr/.local/share/jupyter/kernels/javascript python3 /home/rohanagr/.local/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /home/rohanagr/.local/share/jupyter/kernels/python3 .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/08/28/bashtoolcheck.html",
            "relUrl": "/2022/08/28/bashtoolcheck.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "Statistics",
            "content": "As of 8/26/2022, I have learned the following: . Types of graphs and representations of data . | Ideal graphs for certain scenarios . | Analysis of numerical data and distributions . | How to analyze data through words and effective language . | . So far AP Statistics hasn’t been brutal. .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/08/28/Statistics.html",
            "relUrl": "/2022/08/28/Statistics.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "Physics",
            "content": "Stuff we learned in physics: . - The equation used to find the electrical force is largely similar to the equation used for the force of gravity. . - The force of electricity is generally many magnitudes larger than the force of gravity . - electric fields are somewhat interesting . - There is a positive and a negative charge .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/08/28/Physics.html",
            "relUrl": "/2022/08/28/Physics.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "Economics",
            "content": "Stuff we learned in Economics: . - Manage your money well! . - Make a budget and spend accordingly. . - Invest as much as you can, and watch your money grow . - Know your money habits and personality, and spend / save accordingly .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/08/28/Economics.html",
            "relUrl": "/2022/08/28/Economics.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "Rohan's research notes",
            "content": "Here you will find my notes from class every week. . Week of 8/22 . In class this week we got a brief overview of python and jupyter notebooks. | We were shown a sample quiz and were tasked to create one of our own. | We had to use PowerShell and send pull requests to gain more file access from the APCSP repository. | We were introduced to bash and ran a few commands so everything was aligned. | .",
            "url": "https://rohanagr.github.io/RohanRepository/posts/2022/08/27/pages.notes.html",
            "relUrl": "/posts/2022/08/27/pages.notes.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "Welcome to Rohan's first post!",
            "content": "Welcome! . Hello world, this is my first Jekyll blog post. .",
            "url": "https://rohanagr.github.io/RohanRepository/posts/2022/08/21/RohanFirstPost.html",
            "relUrl": "/posts/2022/08/21/RohanFirstPost.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post61": {
            "title": "Title",
            "content": "toc: true | branch: master | badges: true | comments: true | categories: [jupyter] # My Jupyter Notebook&quot;Here is a line of code which will print Hello World!&quot; . | . print (&quot;Hello World!&quot;) print (&quot;My name is Rohan&quot;) . Hello World! My name is Rohan .",
            "url": "https://rohanagr.github.io/RohanRepository/2022/08/21/MyFirstNotebook.html",
            "relUrl": "/2022/08/21/MyFirstNotebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Me",
          "content": "This website is powered by fastpages [^1]. . Hello! My name is Rohan Agarwal. I am currently a senior in Del Norte High School. My hobbies include watching baseball, eating, and playing games. I wanted to get a jist of coding this year and hence I signed up for APCSP. I hope to learn a lot about python, github, and other computer science topics this year. I hope I can convey my interest in learning through my fastpages. .",
          "url": "https://rohanagr.github.io/RohanRepository/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Vocabulary",
          "content": "| Term| Description | |—- | ————| |Github | A version-control platform for software development and version control using git. | |Jupyter Notebook | A web-based interactive computive platform. It supports python, markdown, bash, and other languages. | | Visual Studio Code | Code editor which acts as a text editor and IDE by including multiple coding and scripting languages. | | Python | An open source, object oriented programming language | | Markdown | Lightweight markup language for formatting text. | | Shell Script | A computer program used in the shell to install, modify, or optimize things in the computer. | | Code | A system of statements and programs integrated to produce something. | | Input | Something which a user enters into the computer | | Output | Anything which a computer displays as a result of the input. | | Repository | A hub where all the user’s code, websites, and other data is stored. | | Commit | the action of making tentative changes permanent | | Push | delivery of information from one server to the other | | Pull | a request of data from one server to the other | | Bash | A command line interpreter commonly used in the shell | | Bin | Compressed binary files used by computer applications | . Other Vocabulary . | Review Ticket | A ticket where every group member puts their issues (work from the week) for teacher review. It consists of each member’s work and peer evaluation. | | Creativity | Presents itself in how a person or group approaches a certain problems and tasks. It is often unique and has features which others may find hard to replicate. | | Critical Thinking | A person or group thinks hard about a problem and offers unique approaches while considering all the aspects. Always looks for improvement opportunities, and always welcome challenges. | | Communication | Methods which groups use to convey information to each other. Crucial to getting complex tasks done. | | Collaboration Through Leadership | Leaders can facilitate conversations and foster the essence of collaboration by taking charge, managing conflicts, groups, and initiating new ideas. | | Collaboration Through Teamwork | Two or more group members communicate and incorporate the above vocabulary terms to tackle a large problem or project. If done right, collaboration can elevate the spirit and creates a domino effect in the right direction. | | Research | Process of searching the internet for information. It is used to gain useful insights and other pieces of information which a group may not posses. | | Technical | The process of being current with the latest updates of anything, including technologies and other features. | .",
          "url": "https://rohanagr.github.io/RohanRepository/vocabulary/",
          "relUrl": "/vocabulary/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Other Class Notes",
          "content": "Class . Economics | . Physics | . Statistics | .",
          "url": "https://rohanagr.github.io/RohanRepository/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  

  

  

  
      ,"page6": {
          "title": "Trimester 2 Algorithm Vocabulary",
          "content": "Term Description . Addition Symbol + | Adds integers and other data | . Subtraction Symbol - | Subtracts integers and other data | . Multiplication Symbol * | Multiplies integers and other data | . Division Symbol / | Divides integers and other data | . Modulus Symbol % | Takes the modulus of numerical data | . Exponent Symbol ** | Takes numerical values and adds an inputted power to it. | . Algorithm | A way of performing a task… | . Index | Position of something in a data set | . Concatenation | Combining multiple strings | . Length | Number of characters in a string | . Substring | Part of a string | . Pseudocode | Program written in plain English in order to lay out the framework of the program | . Packages | Allow a person to import methods from a library | . Library | Database where certain commands, executions, and other information is stored (largely in python) | . Procedure | named group of programming instructions that may have parameters and return values | . Parameters | input values Arguments: specify the values of parameters | . Prodecural Abstraction | name or a process that allows for an understanding of the procedure | . Boolean | True or false statement | . Binary | 0s and 1s which are interpreted by the computer in order to output characters (or vice versa) | . logical operators | operators used to produce boolean results | .",
          "url": "https://rohanagr.github.io/RohanRepository/algorithmvocabulary/",
          "relUrl": "/algorithmvocabulary/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  
  

  

  

  

  

  
  

  
      ,"page19": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://rohanagr.github.io/RohanRepository/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}